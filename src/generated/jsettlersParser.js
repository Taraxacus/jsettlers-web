// Generated from jsettlers.g4 by ANTLR 4.7.1
// jshint ignore: start
var antlr4 = require('antlr4/index');
var jsettlersListener = require('./jsettlersListener').jsettlersListener;
var grammarFileName = "jsettlers.g4";

var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\u00a8\u0556\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
    "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004",
    "G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004",
    "N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004",
    "U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004",
    "\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004",
    "c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004i\ti\u0004",
    "j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004p\tp\u0004",
    "q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004w\tw\u0004",
    "x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004~\t~\u0004",
    "\u007f\t\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004\u0082\t",
    "\u0082\u0004\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t\u0085\u0004",
    "\u0086\t\u0086\u0004\u0087\t\u0087\u0004\u0088\t\u0088\u0004\u0089\t",
    "\u0089\u0004\u008a\t\u008a\u0004\u008b\t\u008b\u0004\u008c\t\u008c\u0004",
    "\u008d\t\u008d\u0004\u008e\t\u008e\u0004\u008f\t\u008f\u0004\u0090\t",
    "\u0090\u0004\u0091\t\u0091\u0004\u0092\t\u0092\u0004\u0093\t\u0093\u0004",
    "\u0094\t\u0094\u0004\u0095\t\u0095\u0004\u0096\t\u0096\u0004\u0097\t",
    "\u0097\u0004\u0098\t\u0098\u0004\u0099\t\u0099\u0004\u009a\t\u009a\u0004",
    "\u009b\t\u009b\u0004\u009c\t\u009c\u0004\u009d\t\u009d\u0004\u009e\t",
    "\u009e\u0004\u009f\t\u009f\u0004\u00a0\t\u00a0\u0004\u00a1\t\u00a1\u0003",
    "\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0005\u0004\u014c\n\u0004\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u0153\n",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u0158\n\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0006\u0005\u015d\n\u0005\r\u0005",
    "\u000e\u0005\u015e\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0007\u0006\u0169\n\u0006",
    "\f\u0006\u000e\u0006\u016c\u000b\u0006\u0003\u0007\u0003\u0007\u0003",
    "\u0007\u0003\u0007\u0003\u0007\u0005\u0007\u0173\n\u0007\u0003\b\u0003",
    "\b\u0003\b\u0005\b\u0178\n\b\u0003\b\u0003\b\u0005\b\u017c\n\b\u0003",
    "\t\u0003\t\u0003\t\u0005\t\u0181\n\t\u0003\t\u0003\t\u0005\t\u0185\n",
    "\t\u0003\n\u0003\n\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003",
    "\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0007\u000b\u0191\n\u000b",
    "\f\u000b\u000e\u000b\u0194\u000b\u000b\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0005\f\u019e\n\f\u0003\r\u0003\r",
    "\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0005\r\u01a9",
    "\n\r\u0007\r\u01ab\n\r\f\r\u000e\r\u01ae\u000b\r\u0003\r\u0003\r\u0003",
    "\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u0010\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0011\u0003\u0011\u0003",
    "\u0011\u0005\u0011\u01cb\n\u0011\u0003\u0012\u0003\u0012\u0003\u0013",
    "\u0003\u0013\u0003\u0014\u0003\u0014\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0016\u0003\u0016\u0003\u0017",
    "\u0003\u0017\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0019",
    "\u0003\u0019\u0003\u001a\u0003\u001a\u0005\u001a\u01e5\n\u001a\u0003",
    "\u001b\u0003\u001b\u0003\u001c\u0003\u001c\u0003\u001d\u0003\u001d\u0003",
    "\u001e\u0003\u001e\u0003\u001f\u0003\u001f\u0005\u001f\u01f1\n\u001f",
    "\u0003 \u0003 \u0003 \u0003 \u0003!\u0003!\u0003!\u0003!\u0003!\u0003",
    "!\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0007",
    "\"\u0205\n\"\f\"\u000e\"\u0208\u000b\"\u0003#\u0003#\u0005#\u020c\n",
    "#\u0003$\u0003$\u0003$\u0006$\u0211\n$\r$\u000e$\u0212\u0003%\u0003",
    "%\u0006%\u0217\n%\r%\u000e%\u0218\u0003&\u0003&\u0003&\u0003&\u0003",
    "&\u0003&\u0003&\u0003&\u0007&\u0223\n&\f&\u000e&\u0226\u000b&\u0003",
    "\'\u0003\'\u0005\'\u022a\n\'\u0003(\u0003(\u0003)\u0003)\u0005)\u0230",
    "\n)\u0003*\u0003*\u0003*\u0003*\u0005*\u0236\n*\u0003*\u0005*\u0239",
    "\n*\u0003*\u0005*\u023c\n*\u0006*\u023e\n*\r*\u000e*\u023f\u0003+\u0003",
    "+\u0005+\u0244\n+\u0003+\u0005+\u0247\n+\u0003+\u0005+\u024a\n+\u0003",
    "+\u0006+\u024d\n+\r+\u000e+\u024e\u0003,\u0003,\u0003,\u0003,\u0003",
    ",\u0003,\u0003,\u0003,\u0007,\u0259\n,\f,\u000e,\u025c\u000b,\u0003",
    "-\u0003-\u0005-\u0260\n-\u0003.\u0003.\u0003/\u0003/\u00030\u00030\u0003",
    "0\u00050\u0269\n0\u00031\u00031\u00031\u00031\u00051\u026f\n1\u0003",
    "1\u00051\u0272\n1\u00031\u00051\u0275\n1\u00061\u0277\n1\r1\u000e1\u0278",
    "\u00032\u00032\u00052\u027d\n2\u00032\u00052\u0280\n2\u00032\u00052",
    "\u0283\n2\u00032\u00062\u0286\n2\r2\u000e2\u0287\u00033\u00033\u0003",
    "3\u00033\u00033\u00033\u00033\u00033\u00073\u0292\n3\f3\u000e3\u0295",
    "\u000b3\u00034\u00034\u00034\u00034\u00034\u00034\u00035\u00035\u0003",
    "5\u00035\u00035\u00035\u00035\u00035\u00075\u02a5\n5\f5\u000e5\u02a8",
    "\u000b5\u00036\u00036\u00056\u02ac\n6\u00036\u00036\u00036\u00037\u0003",
    "7\u00037\u00038\u00038\u00038\u00039\u00039\u00039\u00039\u00039\u0003",
    "9\u00039\u00039\u00059\u02bf\n9\u0003:\u0003:\u0003:\u0003:\u0003;\u0003",
    ";\u0003;\u0003;\u0003;\u0005;\u02ca\n;\u0007;\u02cc\n;\f;\u000e;\u02cf",
    "\u000b;\u0003;\u0003;\u0003<\u0003<\u0003<\u0003<\u0003=\u0003=\u0003",
    "=\u0003=\u0003=\u0005=\u02dc\n=\u0007=\u02de\n=\f=\u000e=\u02e1\u000b",
    "=\u0003=\u0003=\u0003>\u0003>\u0003>\u0003>\u0003>\u0005>\u02ea\n>\u0007",
    ">\u02ec\n>\f>\u000e>\u02ef\u000b>\u0003>\u0003>\u0003?\u0003?\u0003",
    "?\u0003?\u0003?\u0005?\u02f8\n?\u0007?\u02fa\n?\f?\u000e?\u02fd\u000b",
    "?\u0003?\u0003?\u0003@\u0003@\u0003@\u0003@\u0003@\u0005@\u0306\n@\u0007",
    "@\u0308\n@\f@\u000e@\u030b\u000b@\u0003@\u0003@\u0003A\u0003A\u0003",
    "A\u0003A\u0003A\u0005A\u0314\nA\u0007A\u0316\nA\fA\u000eA\u0319\u000b",
    "A\u0003A\u0003A\u0003B\u0003B\u0003B\u0003B\u0003B\u0005B\u0322\nB\u0007",
    "B\u0324\nB\fB\u000eB\u0327\u000bB\u0003B\u0003B\u0003C\u0003C\u0005",
    "C\u032d\nC\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0007D\u0335\n",
    "D\fD\u000eD\u0338\u000bD\u0003E\u0003E\u0003E\u0003E\u0005E\u033e\n",
    "E\u0003E\u0003E\u0003E\u0003E\u0005E\u0344\nE\u0003F\u0003F\u0003F\u0003",
    "F\u0003F\u0003F\u0006F\u034c\nF\rF\u000eF\u034d\u0003G\u0003G\u0003",
    "G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0007G\u0359\nG\fG\u000e",
    "G\u035c\u000bG\u0003H\u0003H\u0005H\u0360\nH\u0003I\u0003I\u0003I\u0003",
    "I\u0003I\u0003I\u0003I\u0003I\u0003I\u0003I\u0003I\u0003I\u0003I\u0003",
    "I\u0003I\u0003I\u0003I\u0005I\u0373\nI\u0003J\u0003J\u0003K\u0003K\u0003",
    "K\u0003K\u0003L\u0003L\u0003L\u0003L\u0005L\u037f\nL\u0003L\u0003L\u0003",
    "L\u0003L\u0003L\u0005L\u0386\nL\u0003L\u0003L\u0003M\u0003M\u0003M\u0003",
    "M\u0005M\u038e\nM\u0003M\u0003M\u0003M\u0003M\u0003M\u0005M\u0395\n",
    "M\u0003M\u0003M\u0003N\u0003N\u0003N\u0003N\u0005N\u039d\nN\u0003N\u0003",
    "N\u0003N\u0003N\u0003N\u0005N\u03a4\nN\u0003N\u0003N\u0003O\u0003O\u0003",
    "O\u0003O\u0005O\u03ac\nO\u0003O\u0003O\u0003O\u0003O\u0003O\u0005O\u03b3",
    "\nO\u0003O\u0003O\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003",
    "P\u0003P\u0003P\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003R\u0003",
    "R\u0003R\u0005R\u03ca\nR\u0003S\u0003S\u0003S\u0003T\u0003T\u0003T\u0003",
    "T\u0003U\u0003U\u0003U\u0003U\u0007U\u03d7\nU\fU\u000eU\u03da\u000b",
    "U\u0005U\u03dc\nU\u0003U\u0003U\u0003V\u0003V\u0003V\u0003V\u0003V\u0003",
    "V\u0003V\u0003V\u0003V\u0003V\u0003W\u0003W\u0003W\u0003W\u0003W\u0003",
    "W\u0003W\u0003W\u0003W\u0003W\u0003X\u0003X\u0003X\u0003X\u0003X\u0003",
    "X\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Z\u0003Z\u0003Z\u0003",
    "Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003[\u0003[\u0003[\u0003",
    "[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003",
    "[\u0003\\\u0003\\\u0003\\\u0003\\\u0003\\\u0003\\\u0003]\u0003]\u0003",
    "]\u0003]\u0003]\u0003]\u0003]\u0003]\u0003]\u0003]\u0003^\u0003^\u0003",
    "^\u0003^\u0003_\u0003_\u0003_\u0003_\u0003_\u0003`\u0003`\u0003`\u0003",
    "`\u0003`\u0005`\u0436\n`\u0003a\u0003a\u0003b\u0003b\u0003c\u0003c\u0003",
    "d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003",
    "e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003f\u0003f\u0003f\u0003f\u0003",
    "f\u0003g\u0003g\u0003h\u0003h\u0003h\u0003h\u0003h\u0003h\u0003h\u0005",
    "h\u045c\nh\u0003i\u0003i\u0003j\u0003j\u0003k\u0003k\u0003l\u0003l\u0003",
    "m\u0003m\u0003n\u0003n\u0003o\u0003o\u0003p\u0003p\u0003p\u0003p\u0003",
    "p\u0003p\u0003p\u0005p\u0473\np\u0003q\u0003q\u0003q\u0003q\u0003q\u0003",
    "q\u0003r\u0003r\u0003r\u0003r\u0003r\u0003r\u0003r\u0003r\u0003r\u0003",
    "r\u0003r\u0003r\u0003s\u0003s\u0003s\u0003s\u0003t\u0003t\u0003t\u0003",
    "t\u0003u\u0003u\u0003u\u0003u\u0003u\u0005u\u0494\nu\u0003u\u0003u\u0003",
    "u\u0003v\u0003v\u0003v\u0003v\u0003v\u0005v\u049e\nv\u0003v\u0003v\u0003",
    "v\u0003w\u0003w\u0003w\u0003w\u0003w\u0003x\u0003x\u0007x\u04aa\nx\f",
    "x\u000ex\u04ad\u000bx\u0003x\u0003x\u0005x\u04b1\nx\u0007x\u04b3\nx",
    "\fx\u000ex\u04b6\u000bx\u0003x\u0007x\u04b9\nx\fx\u000ex\u04bc\u000b",
    "x\u0003x\u0003x\u0003y\u0003y\u0003y\u0003y\u0003y\u0003y\u0005y\u04c6",
    "\ny\u0003z\u0003z\u0003{\u0003{\u0003|\u0003|\u0003}\u0003}\u0003~\u0003",
    "~\u0003\u007f\u0003\u007f\u0003\u0080\u0003\u0080\u0003\u0080\u0003",
    "\u0080\u0005\u0080\u04d8\n\u0080\u0003\u0081\u0003\u0081\u0003\u0082",
    "\u0003\u0082\u0003\u0083\u0003\u0083\u0003\u0084\u0003\u0084\u0003\u0085",
    "\u0003\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0005\u0085\u04e7\n",
    "\u0085\u0003\u0086\u0003\u0086\u0003\u0087\u0003\u0087\u0003\u0088\u0003",
    "\u0088\u0003\u0089\u0003\u0089\u0003\u008a\u0003\u008a\u0003\u008b\u0003",
    "\u008b\u0003\u008b\u0003\u008b\u0003\u008b\u0003\u008b\u0003\u008b\u0003",
    "\u008b\u0005\u008b\u04fb\n\u008b\u0003\u008c\u0003\u008c\u0003\u008d",
    "\u0003\u008d\u0003\u008d\u0003\u008d\u0005\u008d\u0503\n\u008d\u0003",
    "\u008e\u0003\u008e\u0003\u008e\u0003\u008e\u0005\u008e\u0509\n\u008e",
    "\u0003\u008f\u0003\u008f\u0003\u008f\u0003\u008f\u0005\u008f\u050f\n",
    "\u008f\u0003\u0090\u0003\u0090\u0003\u0090\u0003\u0090\u0005\u0090\u0515",
    "\n\u0090\u0003\u0091\u0003\u0091\u0003\u0091\u0003\u0091\u0005\u0091",
    "\u051b\n\u0091\u0003\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0005",
    "\u0092\u0521\n\u0092\u0003\u0093\u0003\u0093\u0003\u0093\u0003\u0093",
    "\u0005\u0093\u0527\n\u0093\u0003\u0094\u0003\u0094\u0003\u0094\u0003",
    "\u0094\u0005\u0094\u052d\n\u0094\u0003\u0095\u0003\u0095\u0003\u0095",
    "\u0003\u0095\u0003\u0095\u0003\u0095\u0003\u0095\u0003\u0095\u0005\u0095",
    "\u0537\n\u0095\u0003\u0096\u0003\u0096\u0003\u0097\u0003\u0097\u0003",
    "\u0098\u0003\u0098\u0003\u0099\u0003\u0099\u0003\u009a\u0003\u009a\u0003",
    "\u009b\u0003\u009b\u0003\u009c\u0003\u009c\u0003\u009d\u0003\u009d\u0003",
    "\u009e\u0003\u009e\u0003\u009e\u0003\u009e\u0003\u009e\u0005\u009e\u054e",
    "\n\u009e\u0003\u009f\u0003\u009f\u0003\u00a0\u0003\u00a0\u0003\u00a1",
    "\u0003\u00a1\u0003\u00a1\u0002\u0002\u00a2\u0002\u0004\u0006\b\n\f\u000e",
    "\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@B",
    "DFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a",
    "\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2",
    "\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba",
    "\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2",
    "\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea",
    "\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102",
    "\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a",
    "\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132",
    "\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0002-\u0003\u0002\u0003",
    "\u0004\u0004\u0002\u0005\u0005\u00a7\u00a7\u0003\u0002\n\f\u0004\u0002",
    "\u0015\u0015\u00a5\u00a5\u0004\u0002\u0016\u0016\u00a4\u00a4\u0003\u0002",
    "\u001f \u0003\u0002!\"\u0003\u0002$%\u0004\u000212\u009f\u009f\u0004",
    "\u0002EF\u00a2\u00a3\u0003\u0002HI\u0003\u0002JK\u0003\u0002LM\u0003",
    "\u0002NO\u0003\u0002PQ\u0003\u0002RS\u0004\u0002\"\"[\\\u0003\u0002",
    "]_\u0003\u0002`b\u0003\u0002ce\u0003\u0002fh\u0003\u0002ij\u0003\u0002",
    "kl\u0003\u0002mn\u0003\u0002op\u0003\u0002qr\u0004\u0002\"\"ss\u0003",
    "\u0002tu\u0003\u0002vw\u0003\u0002xy\u0003\u0002z{\u0004\u0002||\u00a1",
    "\u00a1\u0003\u0002\u0087\u0088\u0004\u0002^^\u0089\u0089\u0003\u0002",
    "\u008a\u008b\u0003\u0002\u008c\u008d\u0003\u0002\u008e\u008f\u0003\u0002",
    "\u0090\u0091\u0004\u0002##\u0092\u0092\u0003\u0002\u0093\u0094\u0003",
    "\u0002\u0095\u0096\u0003\u0002\u0097\u0098\u0003\u0002\u0099\u009a\u0002",
    "\u0564\u0002\u0142\u0003\u0002\u0002\u0002\u0004\u0144\u0003\u0002\u0002",
    "\u0002\u0006\u0146\u0003\u0002\u0002\u0002\b\u014d\u0003\u0002\u0002",
    "\u0002\n\u0160\u0003\u0002\u0002\u0002\f\u0172\u0003\u0002\u0002\u0002",
    "\u000e\u0174\u0003\u0002\u0002\u0002\u0010\u017d\u0003\u0002\u0002\u0002",
    "\u0012\u0186\u0003\u0002\u0002\u0002\u0014\u0188\u0003\u0002\u0002\u0002",
    "\u0016\u019d\u0003\u0002\u0002\u0002\u0018\u019f\u0003\u0002\u0002\u0002",
    "\u001a\u01b1\u0003\u0002\u0002\u0002\u001c\u01b9\u0003\u0002\u0002\u0002",
    "\u001e\u01c1\u0003\u0002\u0002\u0002 \u01ca\u0003\u0002\u0002\u0002",
    "\"\u01cc\u0003\u0002\u0002\u0002$\u01ce\u0003\u0002\u0002\u0002&\u01d0",
    "\u0003\u0002\u0002\u0002(\u01d2\u0003\u0002\u0002\u0002*\u01d8\u0003",
    "\u0002\u0002\u0002,\u01da\u0003\u0002\u0002\u0002.\u01dc\u0003\u0002",
    "\u0002\u00020\u01e0\u0003\u0002\u0002\u00022\u01e4\u0003\u0002\u0002",
    "\u00024\u01e6\u0003\u0002\u0002\u00026\u01e8\u0003\u0002\u0002\u0002",
    "8\u01ea\u0003\u0002\u0002\u0002:\u01ec\u0003\u0002\u0002\u0002<\u01f0",
    "\u0003\u0002\u0002\u0002>\u01f2\u0003\u0002\u0002\u0002@\u01f6\u0003",
    "\u0002\u0002\u0002B\u01fc\u0003\u0002\u0002\u0002D\u020b\u0003\u0002",
    "\u0002\u0002F\u020d\u0003\u0002\u0002\u0002H\u0216\u0003\u0002\u0002",
    "\u0002J\u021a\u0003\u0002\u0002\u0002L\u0229\u0003\u0002\u0002\u0002",
    "N\u022b\u0003\u0002\u0002\u0002P\u022f\u0003\u0002\u0002\u0002R\u0231",
    "\u0003\u0002\u0002\u0002T\u0241\u0003\u0002\u0002\u0002V\u0250\u0003",
    "\u0002\u0002\u0002X\u025f\u0003\u0002\u0002\u0002Z\u0261\u0003\u0002",
    "\u0002\u0002\\\u0263\u0003\u0002\u0002\u0002^\u0268\u0003\u0002\u0002",
    "\u0002`\u026a\u0003\u0002\u0002\u0002b\u027a\u0003\u0002\u0002\u0002",
    "d\u0289\u0003\u0002\u0002\u0002f\u0296\u0003\u0002\u0002\u0002h\u029c",
    "\u0003\u0002\u0002\u0002j\u02ab\u0003\u0002\u0002\u0002l\u02b0\u0003",
    "\u0002\u0002\u0002n\u02b3\u0003\u0002\u0002\u0002p\u02be\u0003\u0002",
    "\u0002\u0002r\u02c0\u0003\u0002\u0002\u0002t\u02c4\u0003\u0002\u0002",
    "\u0002v\u02d2\u0003\u0002\u0002\u0002x\u02d6\u0003\u0002\u0002\u0002",
    "z\u02e4\u0003\u0002\u0002\u0002|\u02f2\u0003\u0002\u0002\u0002~\u0300",
    "\u0003\u0002\u0002\u0002\u0080\u030e\u0003\u0002\u0002\u0002\u0082\u031c",
    "\u0003\u0002\u0002\u0002\u0084\u032c\u0003\u0002\u0002\u0002\u0086\u032e",
    "\u0003\u0002\u0002\u0002\u0088\u033d\u0003\u0002\u0002\u0002\u008a\u0345",
    "\u0003\u0002\u0002\u0002\u008c\u034f\u0003\u0002\u0002\u0002\u008e\u035f",
    "\u0003\u0002\u0002\u0002\u0090\u0372\u0003\u0002\u0002\u0002\u0092\u0374",
    "\u0003\u0002\u0002\u0002\u0094\u0376\u0003\u0002\u0002\u0002\u0096\u037a",
    "\u0003\u0002\u0002\u0002\u0098\u0389\u0003\u0002\u0002\u0002\u009a\u0398",
    "\u0003\u0002\u0002\u0002\u009c\u03a7\u0003\u0002\u0002\u0002\u009e\u03b6",
    "\u0003\u0002\u0002\u0002\u00a0\u03c0\u0003\u0002\u0002\u0002\u00a2\u03c9",
    "\u0003\u0002\u0002\u0002\u00a4\u03cb\u0003\u0002\u0002\u0002\u00a6\u03ce",
    "\u0003\u0002\u0002\u0002\u00a8\u03d2\u0003\u0002\u0002\u0002\u00aa\u03df",
    "\u0003\u0002\u0002\u0002\u00ac\u03e9\u0003\u0002\u0002\u0002\u00ae\u03f3",
    "\u0003\u0002\u0002\u0002\u00b0\u03f9\u0003\u0002\u0002\u0002\u00b2\u03ff",
    "\u0003\u0002\u0002\u0002\u00b4\u0409\u0003\u0002\u0002\u0002\u00b6\u0417",
    "\u0003\u0002\u0002\u0002\u00b8\u041d\u0003\u0002\u0002\u0002\u00ba\u0427",
    "\u0003\u0002\u0002\u0002\u00bc\u042b\u0003\u0002\u0002\u0002\u00be\u0435",
    "\u0003\u0002\u0002\u0002\u00c0\u0437\u0003\u0002\u0002\u0002\u00c2\u0439",
    "\u0003\u0002\u0002\u0002\u00c4\u043b\u0003\u0002\u0002\u0002\u00c6\u043d",
    "\u0003\u0002\u0002\u0002\u00c8\u0447\u0003\u0002\u0002\u0002\u00ca\u044d",
    "\u0003\u0002\u0002\u0002\u00cc\u0452\u0003\u0002\u0002\u0002\u00ce\u045b",
    "\u0003\u0002\u0002\u0002\u00d0\u045d\u0003\u0002\u0002\u0002\u00d2\u045f",
    "\u0003\u0002\u0002\u0002\u00d4\u0461\u0003\u0002\u0002\u0002\u00d6\u0463",
    "\u0003\u0002\u0002\u0002\u00d8\u0465\u0003\u0002\u0002\u0002\u00da\u0467",
    "\u0003\u0002\u0002\u0002\u00dc\u0469\u0003\u0002\u0002\u0002\u00de\u0472",
    "\u0003\u0002\u0002\u0002\u00e0\u0474\u0003\u0002\u0002\u0002\u00e2\u047a",
    "\u0003\u0002\u0002\u0002\u00e4\u0486\u0003\u0002\u0002\u0002\u00e6\u048a",
    "\u0003\u0002\u0002\u0002\u00e8\u048e\u0003\u0002\u0002\u0002\u00ea\u0498",
    "\u0003\u0002\u0002\u0002\u00ec\u04a2\u0003\u0002\u0002\u0002\u00ee\u04a7",
    "\u0003\u0002\u0002\u0002\u00f0\u04c5\u0003\u0002\u0002\u0002\u00f2\u04c7",
    "\u0003\u0002\u0002\u0002\u00f4\u04c9\u0003\u0002\u0002\u0002\u00f6\u04cb",
    "\u0003\u0002\u0002\u0002\u00f8\u04cd\u0003\u0002\u0002\u0002\u00fa\u04cf",
    "\u0003\u0002\u0002\u0002\u00fc\u04d1\u0003\u0002\u0002\u0002\u00fe\u04d7",
    "\u0003\u0002\u0002\u0002\u0100\u04d9\u0003\u0002\u0002\u0002\u0102\u04db",
    "\u0003\u0002\u0002\u0002\u0104\u04dd\u0003\u0002\u0002\u0002\u0106\u04df",
    "\u0003\u0002\u0002\u0002\u0108\u04e6\u0003\u0002\u0002\u0002\u010a\u04e8",
    "\u0003\u0002\u0002\u0002\u010c\u04ea\u0003\u0002\u0002\u0002\u010e\u04ec",
    "\u0003\u0002\u0002\u0002\u0110\u04ee\u0003\u0002\u0002\u0002\u0112\u04f0",
    "\u0003\u0002\u0002\u0002\u0114\u04fa\u0003\u0002\u0002\u0002\u0116\u04fc",
    "\u0003\u0002\u0002\u0002\u0118\u0502\u0003\u0002\u0002\u0002\u011a\u0508",
    "\u0003\u0002\u0002\u0002\u011c\u050e\u0003\u0002\u0002\u0002\u011e\u0514",
    "\u0003\u0002\u0002\u0002\u0120\u051a\u0003\u0002\u0002\u0002\u0122\u0520",
    "\u0003\u0002\u0002\u0002\u0124\u0526\u0003\u0002\u0002\u0002\u0126\u052c",
    "\u0003\u0002\u0002\u0002\u0128\u0536\u0003\u0002\u0002\u0002\u012a\u0538",
    "\u0003\u0002\u0002\u0002\u012c\u053a\u0003\u0002\u0002\u0002\u012e\u053c",
    "\u0003\u0002\u0002\u0002\u0130\u053e\u0003\u0002\u0002\u0002\u0132\u0540",
    "\u0003\u0002\u0002\u0002\u0134\u0542\u0003\u0002\u0002\u0002\u0136\u0544",
    "\u0003\u0002\u0002\u0002\u0138\u0546\u0003\u0002\u0002\u0002\u013a\u054d",
    "\u0003\u0002\u0002\u0002\u013c\u054f\u0003\u0002\u0002\u0002\u013e\u0551",
    "\u0003\u0002\u0002\u0002\u0140\u0553\u0003\u0002\u0002\u0002\u0142\u0143",
    "\t\u0002\u0002\u0002\u0143\u0003\u0003\u0002\u0002\u0002\u0144\u0145",
    "\t\u0003\u0002\u0002\u0145\u0005\u0003\u0002\u0002\u0002\u0146\u0147",
    "\u0005\b\u0005\u0002\u0147\u0148\u0005\u0086D\u0002\u0148\u0149\u0005",
    "\u008aF\u0002\u0149\u014b\u0003\u0002\u0002\u0002\u014a\u014c\u0007",
    "\u0002\u0002\u0003\u014b\u014a\u0003\u0002\u0002\u0002\u014b\u014c\u0003",
    "\u0002\u0002\u0002\u014c\u0007\u0003\u0002\u0002\u0002\u014d\u014e\u0007",
    "\u0006\u0002\u0002\u014e\u0152\u0007\u009c\u0002\u0002\u014f\u0150\u0005",
    "\n\u0006\u0002\u0150\u0151\u0007\u009c\u0002\u0002\u0151\u0153\u0003",
    "\u0002\u0002\u0002\u0152\u014f\u0003\u0002\u0002\u0002\u0152\u0153\u0003",
    "\u0002\u0002\u0002\u0153\u0157\u0003\u0002\u0002\u0002\u0154\u0155\u0005",
    "\u0014\u000b\u0002\u0155\u0156\u0007\u009c\u0002\u0002\u0156\u0158\u0003",
    "\u0002\u0002\u0002\u0157\u0154\u0003\u0002\u0002\u0002\u0157\u0158\u0003",
    "\u0002\u0002\u0002\u0158\u015c\u0003\u0002\u0002\u0002\u0159\u015a\u0005",
    "h5\u0002\u015a\u015b\u0007\u009c\u0002\u0002\u015b\u015d\u0003\u0002",
    "\u0002\u0002\u015c\u0159\u0003\u0002\u0002\u0002\u015d\u015e\u0003\u0002",
    "\u0002\u0002\u015e\u015c\u0003\u0002\u0002\u0002\u015e\u015f\u0003\u0002",
    "\u0002\u0002\u015f\t\u0003\u0002\u0002\u0002\u0160\u0161\u0007\u009d",
    "\u0002\u0002\u0161\u0162\u0007\u0007\u0002\u0002\u0162\u016a\u0007\u009c",
    "\u0002\u0002\u0163\u0164\u0007\u009d\u0002\u0002\u0164\u0165\u0007\u009d",
    "\u0002\u0002\u0165\u0166\u0005\f\u0007\u0002\u0166\u0167\u0007\u009c",
    "\u0002\u0002\u0167\u0169\u0003\u0002\u0002\u0002\u0168\u0163\u0003\u0002",
    "\u0002\u0002\u0169\u016c\u0003\u0002\u0002\u0002\u016a\u0168\u0003\u0002",
    "\u0002\u0002\u016a\u016b\u0003\u0002\u0002\u0002\u016b\u000b\u0003\u0002",
    "\u0002\u0002\u016c\u016a\u0003\u0002\u0002\u0002\u016d\u0173\u0005t",
    ";\u0002\u016e\u0173\u0005\u0010\t\u0002\u016f\u0173\u0005\u0014\u000b",
    "\u0002\u0170\u0173\u0005\u000e\b\u0002\u0171\u0173\u0005\u0012\n\u0002",
    "\u0172\u016d\u0003\u0002\u0002\u0002\u0172\u016e\u0003\u0002\u0002\u0002",
    "\u0172\u016f\u0003\u0002\u0002\u0002\u0172\u0170\u0003\u0002\u0002\u0002",
    "\u0172\u0171\u0003\u0002\u0002\u0002\u0173\r\u0003\u0002\u0002\u0002",
    "\u0174\u0177\u0007\b\u0002\u0002\u0175\u0176\u0007\u009e\u0002\u0002",
    "\u0176\u0178\u0005\u0002\u0002\u0002\u0177\u0175\u0003\u0002\u0002\u0002",
    "\u0177\u0178\u0003\u0002\u0002\u0002\u0178\u017b\u0003\u0002\u0002\u0002",
    "\u0179\u017a\u0007\u009e\u0002\u0002\u017a\u017c\u0005 \u0011\u0002",
    "\u017b\u0179\u0003\u0002\u0002\u0002\u017b\u017c\u0003\u0002\u0002\u0002",
    "\u017c\u000f\u0003\u0002\u0002\u0002\u017d\u0180\u0007\t\u0002\u0002",
    "\u017e\u017f\u0007\u009e\u0002\u0002\u017f\u0181\u0005\u0002\u0002\u0002",
    "\u0180\u017e\u0003\u0002\u0002\u0002\u0180\u0181\u0003\u0002\u0002\u0002",
    "\u0181\u0184\u0003\u0002\u0002\u0002\u0182\u0183\u0007\u009e\u0002\u0002",
    "\u0183\u0185\u0005 \u0011\u0002\u0184\u0182\u0003\u0002\u0002\u0002",
    "\u0184\u0185\u0003\u0002\u0002\u0002\u0185\u0011\u0003\u0002\u0002\u0002",
    "\u0186\u0187\t\u0004\u0002\u0002\u0187\u0013\u0003\u0002\u0002\u0002",
    "\u0188\u0189\u0007\u009d\u0002\u0002\u0189\u018a\u0007\r\u0002\u0002",
    "\u018a\u0192\u0007\u009c\u0002\u0002\u018b\u018c\u0007\u009d\u0002\u0002",
    "\u018c\u018d\u0007\u009d\u0002\u0002\u018d\u018e\u0005\u0016\f\u0002",
    "\u018e\u018f\u0007\u009c\u0002\u0002\u018f\u0191\u0003\u0002\u0002\u0002",
    "\u0190\u018b\u0003\u0002\u0002\u0002\u0191\u0194\u0003\u0002\u0002\u0002",
    "\u0192\u0190\u0003\u0002\u0002\u0002\u0192\u0193\u0003\u0002\u0002\u0002",
    "\u0193\u0015\u0003\u0002\u0002\u0002\u0194\u0192\u0003\u0002\u0002\u0002",
    "\u0195\u019e\u0005\u001e\u0010\u0002\u0196\u019e\u0005B\"\u0002\u0197",
    "\u019e\u0005J&\u0002\u0198\u019e\u0005V,\u0002\u0199\u019e\u0005d3\u0002",
    "\u019a\u019e\u0005\u0018\r\u0002\u019b\u019e\u0005\u001a\u000e\u0002",
    "\u019c\u019e\u0005\u001c\u000f\u0002\u019d\u0195\u0003\u0002\u0002\u0002",
    "\u019d\u0196\u0003\u0002\u0002\u0002\u019d\u0197\u0003\u0002\u0002\u0002",
    "\u019d\u0198\u0003\u0002\u0002\u0002\u019d\u0199\u0003\u0002\u0002\u0002",
    "\u019d\u019a\u0003\u0002\u0002\u0002\u019d\u019b\u0003\u0002\u0002\u0002",
    "\u019d\u019c\u0003\u0002\u0002\u0002\u019e\u0017\u0003\u0002\u0002\u0002",
    "\u019f\u01a0\u0007\u000e\u0002\u0002\u01a0\u01a1\u0007\u009e\u0002\u0002",
    "\u01a1\u01ac\u0007\u000f\u0002\u0002\u01a2\u01a3\u0007\u009b\u0002\u0002",
    "\u01a3\u01a4\u0007\u009e\u0002\u0002\u01a4\u01a5\u0007\u0005\u0002\u0002",
    "\u01a5\u01a6\u0007\u009e\u0002\u0002\u01a6\u01a8\u0005\u0128\u0095\u0002",
    "\u01a7\u01a9\u0007\u009e\u0002\u0002\u01a8\u01a7\u0003\u0002\u0002\u0002",
    "\u01a8\u01a9\u0003\u0002\u0002\u0002\u01a9\u01ab\u0003\u0002\u0002\u0002",
    "\u01aa\u01a2\u0003\u0002\u0002\u0002\u01ab\u01ae\u0003\u0002\u0002\u0002",
    "\u01ac\u01aa\u0003\u0002\u0002\u0002\u01ac\u01ad\u0003\u0002\u0002\u0002",
    "\u01ad\u01af\u0003\u0002\u0002\u0002\u01ae\u01ac\u0003\u0002\u0002\u0002",
    "\u01af\u01b0\u0007\u0010\u0002\u0002\u01b0\u0019\u0003\u0002\u0002\u0002",
    "\u01b1\u01b2\u0007\u0011\u0002\u0002\u01b2\u01b3\u0007\u009e\u0002\u0002",
    "\u01b3\u01b4\u0007\u009b\u0002\u0002\u01b4\u01b5\u0007\u009e\u0002\u0002",
    "\u01b5\u01b6\u0007\u0005\u0002\u0002\u01b6\u01b7\u0007\u009e\u0002\u0002",
    "\u01b7\u01b8\u0005\u0114\u008b\u0002\u01b8\u001b\u0003\u0002\u0002\u0002",
    "\u01b9\u01ba\u0007\u0012\u0002\u0002\u01ba\u01bb\u0007\u009e\u0002\u0002",
    "\u01bb\u01bc\u0007\u009b\u0002\u0002\u01bc\u01bd\u0007\u009e\u0002\u0002",
    "\u01bd\u01be\u0007\u0005\u0002\u0002\u01be\u01bf\u0007\u009e\u0002\u0002",
    "\u01bf\u01c0\u0005^0\u0002\u01c0\u001d\u0003\u0002\u0002\u0002\u01c1",
    "\u01c2\u0007\u0013\u0002\u0002\u01c2\u01c3\u0007\u009e\u0002\u0002\u01c3",
    "\u01c4\u00052\u001a\u0002\u01c4\u01c5\u0007\u009e\u0002\u0002\u01c5",
    "\u01c6\u0005<\u001f\u0002\u01c6\u001f\u0003\u0002\u0002\u0002\u01c7",
    "\u01cb\u0005(\u0015\u0002\u01c8\u01cb\u0005.\u0018\u0002\u01c9\u01cb",
    "\u00050\u0019\u0002\u01ca\u01c7\u0003\u0002\u0002\u0002\u01ca\u01c8",
    "\u0003\u0002\u0002\u0002\u01ca\u01c9\u0003\u0002\u0002\u0002\u01cb!",
    "\u0003\u0002\u0002\u0002\u01cc\u01cd\u0007\u009b\u0002\u0002\u01cd#",
    "\u0003\u0002\u0002\u0002\u01ce\u01cf\u0007\u009b\u0002\u0002\u01cf%",
    "\u0003\u0002\u0002\u0002\u01d0\u01d1\u0007\u009b\u0002\u0002\u01d1\'",
    "\u0003\u0002\u0002\u0002\u01d2\u01d3\u0005\"\u0012\u0002\u01d3\u01d4",
    "\u0007\u0014\u0002\u0002\u01d4\u01d5\u0005$\u0013\u0002\u01d5\u01d6",
    "\u0007\u0014\u0002\u0002\u01d6\u01d7\u0005&\u0014\u0002\u01d7)\u0003",
    "\u0002\u0002\u0002\u01d8\u01d9\u0007\u009b\u0002\u0002\u01d9+\u0003",
    "\u0002\u0002\u0002\u01da\u01db\u0007\u009b\u0002\u0002\u01db-\u0003",
    "\u0002\u0002\u0002\u01dc\u01dd\u0005*\u0016\u0002\u01dd\u01de\u0007",
    "\u0014\u0002\u0002\u01de\u01df\u0005,\u0017\u0002\u01df/\u0003\u0002",
    "\u0002\u0002\u01e0\u01e1\u0007\u009b\u0002\u0002\u01e11\u0003\u0002",
    "\u0002\u0002\u01e2\u01e5\u00054\u001b\u0002\u01e3\u01e5\u00056\u001c",
    "\u0002\u01e4\u01e2\u0003\u0002\u0002\u0002\u01e4\u01e3\u0003\u0002\u0002",
    "\u0002\u01e53\u0003\u0002\u0002\u0002\u01e6\u01e7\t\u0005\u0002\u0002",
    "\u01e75\u0003\u0002\u0002\u0002\u01e8\u01e9\t\u0006\u0002\u0002\u01e9",
    "7\u0003\u0002\u0002\u0002\u01ea\u01eb\u0007\u0017\u0002\u0002\u01eb",
    "9\u0003\u0002\u0002\u0002\u01ec\u01ed\u0007\u0018\u0002\u0002\u01ed",
    ";\u0003\u0002\u0002\u0002\u01ee\u01f1\u00058\u001d\u0002\u01ef\u01f1",
    "\u0005:\u001e\u0002\u01f0\u01ee\u0003\u0002\u0002\u0002\u01f0\u01ef",
    "\u0003\u0002\u0002\u0002\u01f1=\u0003\u0002\u0002\u0002\u01f2\u01f3",
    "\u0005 \u0011\u0002\u01f3\u01f4\u0007\u0019\u0002\u0002\u01f4\u01f5",
    "\u0005 \u0011\u0002\u01f5?\u0003\u0002\u0002\u0002\u01f6\u01f7\u0005",
    " \u0011\u0002\u01f7\u01f8\u0007\u00a8\u0002\u0002\u01f8\u01f9\u0005",
    " \u0011\u0002\u01f9\u01fa\u0007\u00a8\u0002\u0002\u01fa\u01fb\u0005",
    " \u0011\u0002\u01fbA\u0003\u0002\u0002\u0002\u01fc\u01fd\u0007\u001a",
    "\u0002\u0002\u01fd\u0206\u0007\u009c\u0002\u0002\u01fe\u01ff\u0007\u009d",
    "\u0002\u0002\u01ff\u0200\u0007\u009d\u0002\u0002\u0200\u0201\u0007\u009d",
    "\u0002\u0002\u0201\u0202\u0005D#\u0002\u0202\u0203\u0007\u009c\u0002",
    "\u0002\u0203\u0205\u0003\u0002\u0002\u0002\u0204\u01fe\u0003\u0002\u0002",
    "\u0002\u0205\u0208\u0003\u0002\u0002\u0002\u0206\u0204\u0003\u0002\u0002",
    "\u0002\u0206\u0207\u0003\u0002\u0002\u0002\u0207C\u0003\u0002\u0002",
    "\u0002\u0208\u0206\u0003\u0002\u0002\u0002\u0209\u020c\u0005F$\u0002",
    "\u020a\u020c\u0005H%\u0002\u020b\u0209\u0003\u0002\u0002\u0002\u020b",
    "\u020a\u0003\u0002\u0002\u0002\u020cE\u0003\u0002\u0002\u0002\u020d",
    "\u0210\u0005\u0128\u0095\u0002\u020e\u020f\u0007\u009e\u0002\u0002\u020f",
    "\u0211\u0005\u0128\u0095\u0002\u0210\u020e\u0003\u0002\u0002\u0002\u0211",
    "\u0212\u0003\u0002\u0002\u0002\u0212\u0210\u0003\u0002\u0002\u0002\u0212",
    "\u0213\u0003\u0002\u0002\u0002\u0213G\u0003\u0002\u0002\u0002\u0214",
    "\u0215\u0007\u009e\u0002\u0002\u0215\u0217\u0005\u0128\u0095\u0002\u0216",
    "\u0214\u0003\u0002\u0002\u0002\u0217\u0218\u0003\u0002\u0002\u0002\u0218",
    "\u0216\u0003\u0002\u0002\u0002\u0218\u0219\u0003\u0002\u0002\u0002\u0219",
    "I\u0003\u0002\u0002\u0002\u021a\u021b\u0007\u001b\u0002\u0002\u021b",
    "\u0224\u0007\u009c\u0002\u0002\u021c\u021d\u0007\u009d\u0002\u0002\u021d",
    "\u021e\u0007\u009d\u0002\u0002\u021e\u021f\u0007\u009d\u0002\u0002\u021f",
    "\u0220\u0005L\'\u0002\u0220\u0221\u0007\u009c\u0002\u0002\u0221\u0223",
    "\u0003\u0002\u0002\u0002\u0222\u021c\u0003\u0002\u0002\u0002\u0223\u0226",
    "\u0003\u0002\u0002\u0002\u0224\u0222\u0003\u0002\u0002\u0002\u0224\u0225",
    "\u0003\u0002\u0002\u0002\u0225K\u0003\u0002\u0002\u0002\u0226\u0224",
    "\u0003\u0002\u0002\u0002\u0227\u022a\u0005R*\u0002\u0228\u022a\u0005",
    "T+\u0002\u0229\u0227\u0003\u0002\u0002\u0002\u0229\u0228\u0003\u0002",
    "\u0002\u0002\u022aM\u0003\u0002\u0002\u0002\u022b\u022c\u0007\u001c",
    "\u0002\u0002\u022cO\u0003\u0002\u0002\u0002\u022d\u0230\u0007\u009b",
    "\u0002\u0002\u022e\u0230\u0005N(\u0002\u022f\u022d\u0003\u0002\u0002",
    "\u0002\u022f\u022e\u0003\u0002\u0002\u0002\u0230Q\u0003\u0002\u0002",
    "\u0002\u0231\u0232\u0007\u009e\u0002\u0002\u0232\u023d\u0007\u009e\u0002",
    "\u0002\u0233\u0235\u0005P)\u0002\u0234\u0236\u0007\u009e\u0002\u0002",
    "\u0235\u0234\u0003\u0002\u0002\u0002\u0235\u0236\u0003\u0002\u0002\u0002",
    "\u0236\u0238\u0003\u0002\u0002\u0002\u0237\u0239\u0007\u009e\u0002\u0002",
    "\u0238\u0237\u0003\u0002\u0002\u0002\u0238\u0239\u0003\u0002\u0002\u0002",
    "\u0239\u023b\u0003\u0002\u0002\u0002\u023a\u023c\u0007\u009e\u0002\u0002",
    "\u023b\u023a\u0003\u0002\u0002\u0002\u023b\u023c\u0003\u0002\u0002\u0002",
    "\u023c\u023e\u0003\u0002\u0002\u0002\u023d\u0233\u0003\u0002\u0002\u0002",
    "\u023e\u023f\u0003\u0002\u0002\u0002\u023f\u023d\u0003\u0002\u0002\u0002",
    "\u023f\u0240\u0003\u0002\u0002\u0002\u0240S\u0003\u0002\u0002\u0002",
    "\u0241\u024c\u0005P)\u0002\u0242\u0244\u0007\u009e\u0002\u0002\u0243",
    "\u0242\u0003\u0002\u0002\u0002\u0243\u0244\u0003\u0002\u0002\u0002\u0244",
    "\u0246\u0003\u0002\u0002\u0002\u0245\u0247\u0007\u009e\u0002\u0002\u0246",
    "\u0245\u0003\u0002\u0002\u0002\u0246\u0247\u0003\u0002\u0002\u0002\u0247",
    "\u0249\u0003\u0002\u0002\u0002\u0248\u024a\u0007\u009e\u0002\u0002\u0249",
    "\u0248\u0003\u0002\u0002\u0002\u0249\u024a\u0003\u0002\u0002\u0002\u024a",
    "\u024b\u0003\u0002\u0002\u0002\u024b\u024d\u0005P)\u0002\u024c\u0243",
    "\u0003\u0002\u0002\u0002\u024d\u024e\u0003\u0002\u0002\u0002\u024e\u024c",
    "\u0003\u0002\u0002\u0002\u024e\u024f\u0003\u0002\u0002\u0002\u024fU",
    "\u0003\u0002\u0002\u0002\u0250\u0251\u0007\u001d\u0002\u0002\u0251\u025a",
    "\u0007\u009c\u0002\u0002\u0252\u0253\u0007\u009d\u0002\u0002\u0253\u0254",
    "\u0007\u009d\u0002\u0002\u0254\u0255\u0007\u009d\u0002\u0002\u0255\u0256",
    "\u0005X-\u0002\u0256\u0257\u0007\u009c\u0002\u0002\u0257\u0259\u0003",
    "\u0002\u0002\u0002\u0258\u0252\u0003\u0002\u0002\u0002\u0259\u025c\u0003",
    "\u0002\u0002\u0002\u025a\u0258\u0003\u0002\u0002\u0002\u025a\u025b\u0003",
    "\u0002\u0002\u0002\u025bW\u0003\u0002\u0002\u0002\u025c\u025a\u0003",
    "\u0002\u0002\u0002\u025d\u0260\u0005`1\u0002\u025e\u0260\u0005b2\u0002",
    "\u025f\u025d\u0003\u0002\u0002\u0002\u025f\u025e\u0003\u0002\u0002\u0002",
    "\u0260Y\u0003\u0002\u0002\u0002\u0261\u0262\u0007\u001c\u0002\u0002",
    "\u0262[\u0003\u0002\u0002\u0002\u0263\u0264\u0007\u00a6\u0002\u0002",
    "\u0264]\u0003\u0002\u0002\u0002\u0265\u0269\u0007\u009b\u0002\u0002",
    "\u0266\u0269\u0005Z.\u0002\u0267\u0269\u0005\\/\u0002\u0268\u0265\u0003",
    "\u0002\u0002\u0002\u0268\u0266\u0003\u0002\u0002\u0002\u0268\u0267\u0003",
    "\u0002\u0002\u0002\u0269_\u0003\u0002\u0002\u0002\u026a\u026b\u0007",
    "\u009e\u0002\u0002\u026b\u0276\u0007\u009e\u0002\u0002\u026c\u026e\u0005",
    "^0\u0002\u026d\u026f\u0007\u009e\u0002\u0002\u026e\u026d\u0003\u0002",
    "\u0002\u0002\u026e\u026f\u0003\u0002\u0002\u0002\u026f\u0271\u0003\u0002",
    "\u0002\u0002\u0270\u0272\u0007\u009e\u0002\u0002\u0271\u0270\u0003\u0002",
    "\u0002\u0002\u0271\u0272\u0003\u0002\u0002\u0002\u0272\u0274\u0003\u0002",
    "\u0002\u0002\u0273\u0275\u0007\u009e\u0002\u0002\u0274\u0273\u0003\u0002",
    "\u0002\u0002\u0274\u0275\u0003\u0002\u0002\u0002\u0275\u0277\u0003\u0002",
    "\u0002\u0002\u0276\u026c\u0003\u0002\u0002\u0002\u0277\u0278\u0003\u0002",
    "\u0002\u0002\u0278\u0276\u0003\u0002\u0002\u0002\u0278\u0279\u0003\u0002",
    "\u0002\u0002\u0279a\u0003\u0002\u0002\u0002\u027a\u0285\u0005^0\u0002",
    "\u027b\u027d\u0007\u009e\u0002\u0002\u027c\u027b\u0003\u0002\u0002\u0002",
    "\u027c\u027d\u0003\u0002\u0002\u0002\u027d\u027f\u0003\u0002\u0002\u0002",
    "\u027e\u0280\u0007\u009e\u0002\u0002\u027f\u027e\u0003\u0002\u0002\u0002",
    "\u027f\u0280\u0003\u0002\u0002\u0002\u0280\u0282\u0003\u0002\u0002\u0002",
    "\u0281\u0283\u0007\u009e\u0002\u0002\u0282\u0281\u0003\u0002\u0002\u0002",
    "\u0282\u0283\u0003\u0002\u0002\u0002\u0283\u0284\u0003\u0002\u0002\u0002",
    "\u0284\u0286\u0005^0\u0002\u0285\u027c\u0003\u0002\u0002\u0002\u0286",
    "\u0287\u0003\u0002\u0002\u0002\u0287\u0285\u0003\u0002\u0002\u0002\u0287",
    "\u0288\u0003\u0002\u0002\u0002\u0288c\u0003\u0002\u0002\u0002\u0289",
    "\u028a\u0007\u001e\u0002\u0002\u028a\u0293\u0007\u009c\u0002\u0002\u028b",
    "\u028c\u0007\u009d\u0002\u0002\u028c\u028d\u0007\u009d\u0002\u0002\u028d",
    "\u028e\u0007\u009d\u0002\u0002\u028e\u028f\u0005f4\u0002\u028f\u0290",
    "\u0007\u009c\u0002\u0002\u0290\u0292\u0003\u0002\u0002\u0002\u0291\u028b",
    "\u0003\u0002\u0002\u0002\u0292\u0295\u0003\u0002\u0002\u0002\u0293\u0291",
    "\u0003\u0002\u0002\u0002\u0293\u0294\u0003\u0002\u0002\u0002\u0294e",
    "\u0003\u0002\u0002\u0002\u0295\u0293\u0003\u0002\u0002\u0002\u0296\u0297",
    "\u0005\u0114\u008b\u0002\u0297\u0298\u0007\u009e\u0002\u0002\u0298\u0299",
    "\u0005\u0002\u0002\u0002\u0299\u029a\u0007\u009e\u0002\u0002\u029a\u029b",
    "\u0005> \u0002\u029bg\u0003\u0002\u0002\u0002\u029c\u029d\u0007\u009d",
    "\u0002\u0002\u029d\u029e\u0005j6\u0002\u029e\u02a6\u0007\u009c\u0002",
    "\u0002\u029f\u02a0\u0007\u009d\u0002\u0002\u02a0\u02a1\u0007\u009d\u0002",
    "\u0002\u02a1\u02a2\u0005p9\u0002\u02a2\u02a3\u0007\u009c\u0002\u0002",
    "\u02a3\u02a5\u0003\u0002\u0002\u0002\u02a4\u029f\u0003\u0002\u0002\u0002",
    "\u02a5\u02a8\u0003\u0002\u0002\u0002\u02a6\u02a4\u0003\u0002\u0002\u0002",
    "\u02a6\u02a7\u0003\u0002\u0002\u0002\u02a7i\u0003\u0002\u0002\u0002",
    "\u02a8\u02a6\u0003\u0002\u0002\u0002\u02a9\u02ac\u0005l7\u0002\u02aa",
    "\u02ac\u0005n8\u0002\u02ab\u02a9\u0003\u0002\u0002\u0002\u02ab\u02aa",
    "\u0003\u0002\u0002\u0002\u02ab\u02ac\u0003\u0002\u0002\u0002\u02ac\u02ad",
    "\u0003\u0002\u0002\u0002\u02ad\u02ae\t\u0007\u0002\u0002\u02ae\u02af",
    "\u0007\u009b\u0002\u0002\u02afk\u0003\u0002\u0002\u0002\u02b0\u02b1",
    "\t\b\u0002\u0002\u02b1\u02b2\u0007#\u0002\u0002\u02b2m\u0003\u0002\u0002",
    "\u0002\u02b3\u02b4\t\t\u0002\u0002\u02b4\u02b5\u0007#\u0002\u0002\u02b5",
    "o\u0003\u0002\u0002\u0002\u02b6\u02bf\u0005r:\u0002\u02b7\u02bf\u0005",
    "t;\u0002\u02b8\u02bf\u0005x=\u0002\u02b9\u02bf\u0005z>\u0002\u02ba\u02bf",
    "\u0005|?\u0002\u02bb\u02bf\u0005~@\u0002\u02bc\u02bf\u0005\u0080A\u0002",
    "\u02bd\u02bf\u0005\u0082B\u0002\u02be\u02b6\u0003\u0002\u0002\u0002",
    "\u02be\u02b7\u0003\u0002\u0002\u0002\u02be\u02b8\u0003\u0002\u0002\u0002",
    "\u02be\u02b9\u0003\u0002\u0002\u0002\u02be\u02ba\u0003\u0002\u0002\u0002",
    "\u02be\u02bb\u0003\u0002\u0002\u0002\u02be\u02bc\u0003\u0002\u0002\u0002",
    "\u02be\u02bd\u0003\u0002\u0002\u0002\u02bfq\u0003\u0002\u0002\u0002",
    "\u02c0\u02c1\u0007&\u0002\u0002\u02c1\u02c2\u0007\u009e\u0002\u0002",
    "\u02c2\u02c3\u0005\u00eex\u0002\u02c3s\u0003\u0002\u0002\u0002\u02c4",
    "\u02c5\u0007\'\u0002\u0002\u02c5\u02c6\u0007\u009e\u0002\u0002\u02c6",
    "\u02cd\u0007\u000f\u0002\u0002\u02c7\u02c9\u0005v<\u0002\u02c8\u02ca",
    "\u0007\u009e\u0002\u0002\u02c9\u02c8\u0003\u0002\u0002\u0002\u02c9\u02ca",
    "\u0003\u0002\u0002\u0002\u02ca\u02cc\u0003\u0002\u0002\u0002\u02cb\u02c7",
    "\u0003\u0002\u0002\u0002\u02cc\u02cf\u0003\u0002\u0002\u0002\u02cd\u02cb",
    "\u0003\u0002\u0002\u0002\u02cd\u02ce\u0003\u0002\u0002\u0002\u02ce\u02d0",
    "\u0003\u0002\u0002\u0002\u02cf\u02cd\u0003\u0002\u0002\u0002\u02d0\u02d1",
    "\u0007\u0010\u0002\u0002\u02d1u\u0003\u0002\u0002\u0002\u02d2\u02d3",
    "\u0005\u00fe\u0080\u0002\u02d3\u02d4\u0005\u0004\u0003\u0002\u02d4\u02d5",
    "\u0007\u009b\u0002\u0002\u02d5w\u0003\u0002\u0002\u0002\u02d6\u02d7",
    "\u0007(\u0002\u0002\u02d7\u02d8\u0007\u009e\u0002\u0002\u02d8\u02df",
    "\u0007\u000f\u0002\u0002\u02d9\u02db\u0005\u0108\u0085\u0002\u02da\u02dc",
    "\u0007\u009e\u0002\u0002\u02db\u02da\u0003\u0002\u0002\u0002\u02db\u02dc",
    "\u0003\u0002\u0002\u0002\u02dc\u02de\u0003\u0002\u0002\u0002\u02dd\u02d9",
    "\u0003\u0002\u0002\u0002\u02de\u02e1\u0003\u0002\u0002\u0002\u02df\u02dd",
    "\u0003\u0002\u0002\u0002\u02df\u02e0\u0003\u0002\u0002\u0002\u02e0\u02e2",
    "\u0003\u0002\u0002\u0002\u02e1\u02df\u0003\u0002\u0002\u0002\u02e2\u02e3",
    "\u0007\u0010\u0002\u0002\u02e3y\u0003\u0002\u0002\u0002\u02e4\u02e5",
    "\u0007\u001e\u0002\u0002\u02e5\u02e6\u0007\u009e\u0002\u0002\u02e6\u02ed",
    "\u0007\u000f\u0002\u0002\u02e7\u02e9\u0005\u0114\u008b\u0002\u02e8\u02ea",
    "\u0007\u009e\u0002\u0002\u02e9\u02e8\u0003\u0002\u0002\u0002\u02e9\u02ea",
    "\u0003\u0002\u0002\u0002\u02ea\u02ec\u0003\u0002\u0002\u0002\u02eb\u02e7",
    "\u0003\u0002\u0002\u0002\u02ec\u02ef\u0003\u0002\u0002\u0002\u02ed\u02eb",
    "\u0003\u0002\u0002\u0002\u02ed\u02ee\u0003\u0002\u0002\u0002\u02ee\u02f0",
    "\u0003\u0002\u0002\u0002\u02ef\u02ed\u0003\u0002\u0002\u0002\u02f0\u02f1",
    "\u0007\u0010\u0002\u0002\u02f1{\u0003\u0002\u0002\u0002\u02f2\u02f3",
    "\u0007)\u0002\u0002\u02f3\u02f4\u0007\u009e\u0002\u0002\u02f4\u02fb",
    "\u0007\u000f\u0002\u0002\u02f5\u02f7\u0005\u013a\u009e\u0002\u02f6\u02f8",
    "\u0007\u009e\u0002\u0002\u02f7\u02f6\u0003\u0002\u0002\u0002\u02f7\u02f8",
    "\u0003\u0002\u0002\u0002\u02f8\u02fa\u0003\u0002\u0002\u0002\u02f9\u02f5",
    "\u0003\u0002\u0002\u0002\u02fa\u02fd\u0003\u0002\u0002\u0002\u02fb\u02f9",
    "\u0003\u0002\u0002\u0002\u02fb\u02fc\u0003\u0002\u0002\u0002\u02fc\u02fe",
    "\u0003\u0002\u0002\u0002\u02fd\u02fb\u0003\u0002\u0002\u0002\u02fe\u02ff",
    "\u0007\u0010\u0002\u0002\u02ff}\u0003\u0002\u0002\u0002\u0300\u0301",
    "\u0007*\u0002\u0002\u0301\u0302\u0007\u009e\u0002\u0002\u0302\u0309",
    "\u0007\u000f\u0002\u0002\u0303\u0305\u0005@!\u0002\u0304\u0306\u0007",
    "\u009e\u0002\u0002\u0305\u0304\u0003\u0002\u0002\u0002\u0305\u0306\u0003",
    "\u0002\u0002\u0002\u0306\u0308\u0003\u0002\u0002\u0002\u0307\u0303\u0003",
    "\u0002\u0002\u0002\u0308\u030b\u0003\u0002\u0002\u0002\u0309\u0307\u0003",
    "\u0002\u0002\u0002\u0309\u030a\u0003\u0002\u0002\u0002\u030a\u030c\u0003",
    "\u0002\u0002\u0002\u030b\u0309\u0003\u0002\u0002\u0002\u030c\u030d\u0007",
    "\u0010\u0002\u0002\u030d\u007f\u0003\u0002\u0002\u0002\u030e\u030f\u0007",
    "+\u0002\u0002\u030f\u0310\u0007\u009e\u0002\u0002\u0310\u0317\u0007",
    "\u000f\u0002\u0002\u0311\u0313\u0005@!\u0002\u0312\u0314\u0007\u009e",
    "\u0002\u0002\u0313\u0312\u0003\u0002\u0002\u0002\u0313\u0314\u0003\u0002",
    "\u0002\u0002\u0314\u0316\u0003\u0002\u0002\u0002\u0315\u0311\u0003\u0002",
    "\u0002\u0002\u0316\u0319\u0003\u0002\u0002\u0002\u0317\u0315\u0003\u0002",
    "\u0002\u0002\u0317\u0318\u0003\u0002\u0002\u0002\u0318\u031a\u0003\u0002",
    "\u0002\u0002\u0319\u0317\u0003\u0002\u0002\u0002\u031a\u031b\u0007\u0010",
    "\u0002\u0002\u031b\u0081\u0003\u0002\u0002\u0002\u031c\u031d\u0007,",
    "\u0002\u0002\u031d\u031e\u0007\u009e\u0002\u0002\u031e\u0325\u0007\u000f",
    "\u0002\u0002\u031f\u0321\u0005> \u0002\u0320\u0322\u0007\u009e\u0002",
    "\u0002\u0321\u0320\u0003\u0002\u0002\u0002\u0321\u0322\u0003\u0002\u0002",
    "\u0002\u0322\u0324\u0003\u0002\u0002\u0002\u0323\u031f\u0003\u0002\u0002",
    "\u0002\u0324\u0327\u0003\u0002\u0002\u0002\u0325\u0323\u0003\u0002\u0002",
    "\u0002\u0325\u0326\u0003\u0002\u0002\u0002\u0326\u0328\u0003\u0002\u0002",
    "\u0002\u0327\u0325\u0003\u0002\u0002\u0002\u0328\u0329\u0007\u0010\u0002",
    "\u0002\u0329\u0083\u0003\u0002\u0002\u0002\u032a\u032d\u0005\u0088E",
    "\u0002\u032b\u032d\u0005\u00caf\u0002\u032c\u032a\u0003\u0002\u0002",
    "\u0002\u032c\u032b\u0003\u0002\u0002\u0002\u032d\u0085\u0003\u0002\u0002",
    "\u0002\u032e\u032f\u0007-\u0002\u0002\u032f\u0336\u0007\u009c\u0002",
    "\u0002\u0330\u0331\u0007\u009d\u0002\u0002\u0331\u0332\u0005\u0084C",
    "\u0002\u0332\u0333\u0007\u009c\u0002\u0002\u0333\u0335\u0003\u0002\u0002",
    "\u0002\u0334\u0330\u0003\u0002\u0002\u0002\u0335\u0338\u0003\u0002\u0002",
    "\u0002\u0336\u0334\u0003\u0002\u0002\u0002\u0336\u0337\u0003\u0002\u0002",
    "\u0002\u0337\u0087\u0003\u0002\u0002\u0002\u0338\u0336\u0003\u0002\u0002",
    "\u0002\u0339\u033e\u0005\u0096L\u0002\u033a\u033e\u0005\u0098M\u0002",
    "\u033b\u033e\u0005\u009aN\u0002\u033c\u033e\u0005\u009cO\u0002\u033d",
    "\u0339\u0003\u0002\u0002\u0002\u033d\u033a\u0003\u0002\u0002\u0002\u033d",
    "\u033b\u0003\u0002\u0002\u0002\u033d\u033c\u0003\u0002\u0002\u0002\u033e",
    "\u0343\u0003\u0002\u0002\u0002\u033f\u0340\u0007\u009e\u0002\u0002\u0340",
    "\u0341\u0007.\u0002\u0002\u0341\u0342\u0007\u009e\u0002\u0002\u0342",
    "\u0344\u0005\u00eex\u0002\u0343\u033f\u0003\u0002\u0002\u0002\u0343",
    "\u0344\u0003\u0002\u0002\u0002\u0344\u0089\u0003\u0002\u0002\u0002\u0345",
    "\u0346\u0007/\u0002\u0002\u0346\u034b\u0007\u009c\u0002\u0002\u0347",
    "\u0348\u0007\u009d\u0002\u0002\u0348\u0349\u0005\u008cG\u0002\u0349",
    "\u034a\u0007\u009c\u0002\u0002\u034a\u034c\u0003\u0002\u0002\u0002\u034b",
    "\u0347\u0003\u0002\u0002\u0002\u034c\u034d\u0003\u0002\u0002\u0002\u034d",
    "\u034b\u0003\u0002\u0002\u0002\u034d\u034e\u0003\u0002\u0002\u0002\u034e",
    "\u008b\u0003\u0002\u0002\u0002\u034f\u0350\u00070\u0002\u0002\u0350",
    "\u0351\u0007\u009e\u0002\u0002\u0351\u0352\u0007\u009b\u0002\u0002\u0352",
    "\u035a\u0007\u009c\u0002\u0002\u0353\u0354\u0007\u009d\u0002\u0002\u0354",
    "\u0355\u0007\u009d\u0002\u0002\u0355\u0356\u0005\u008eH\u0002\u0356",
    "\u0357\u0007\u009c\u0002\u0002\u0357\u0359\u0003\u0002\u0002\u0002\u0358",
    "\u0353\u0003\u0002\u0002\u0002\u0359\u035c\u0003\u0002\u0002\u0002\u035a",
    "\u0358\u0003\u0002\u0002\u0002\u035a\u035b\u0003\u0002\u0002\u0002\u035b",
    "\u008d\u0003\u0002\u0002\u0002\u035c\u035a\u0003\u0002\u0002\u0002\u035d",
    "\u0360\u0005\u0090I\u0002\u035e\u0360\u0005\u00caf\u0002\u035f\u035d",
    "\u0003\u0002\u0002\u0002\u035f\u035e\u0003\u0002\u0002\u0002\u0360\u008f",
    "\u0003\u0002\u0002\u0002\u0361\u0373\u0005\u009aN\u0002\u0362\u0373",
    "\u0005\u009cO\u0002\u0363\u0373\u0005\u0098M\u0002\u0364\u0373\u0005",
    "\u0096L\u0002\u0365\u0373\u0005\u0094K\u0002\u0366\u0373\u0005\u009e",
    "P\u0002\u0367\u0373\u0005\u00a0Q\u0002\u0368\u0373\u0005\u00aaV\u0002",
    "\u0369\u0373\u0005\u00acW\u0002\u036a\u0373\u0005\u00aeX\u0002\u036b",
    "\u0373\u0005\u00b0Y\u0002\u036c\u0373\u0005\u00b2Z\u0002\u036d\u0373",
    "\u0005\u00b4[\u0002\u036e\u0373\u0005\u00b6\\\u0002\u036f\u0373\u0005",
    "\u00b8]\u0002\u0370\u0373\u0005\u00ba^\u0002\u0371\u0373\u0005\u00bc",
    "_\u0002\u0372\u0361\u0003\u0002\u0002\u0002\u0372\u0362\u0003\u0002",
    "\u0002\u0002\u0372\u0363\u0003\u0002\u0002\u0002\u0372\u0364\u0003\u0002",
    "\u0002\u0002\u0372\u0365\u0003\u0002\u0002\u0002\u0372\u0366\u0003\u0002",
    "\u0002\u0002\u0372\u0367\u0003\u0002\u0002\u0002\u0372\u0368\u0003\u0002",
    "\u0002\u0002\u0372\u0369\u0003\u0002\u0002\u0002\u0372\u036a\u0003\u0002",
    "\u0002\u0002\u0372\u036b\u0003\u0002\u0002\u0002\u0372\u036c\u0003\u0002",
    "\u0002\u0002\u0372\u036d\u0003\u0002\u0002\u0002\u0372\u036e\u0003\u0002",
    "\u0002\u0002\u0372\u036f\u0003\u0002\u0002\u0002\u0372\u0370\u0003\u0002",
    "\u0002\u0002\u0372\u0371\u0003\u0002\u0002\u0002\u0373\u0091\u0003\u0002",
    "\u0002\u0002\u0374\u0375\t\n\u0002\u0002\u0375\u0093\u0003\u0002\u0002",
    "\u0002\u0376\u0377\u0005j6\u0002\u0377\u0378\u0007\u009e\u0002\u0002",
    "\u0378\u0379\u00073\u0002\u0002\u0379\u0095\u0003\u0002\u0002\u0002",
    "\u037a\u037b\u0005j6\u0002\u037b\u037c\u0007\u009e\u0002\u0002\u037c",
    "\u037e\u0005\u0092J\u0002\u037d\u037f\u0007\u009e\u0002\u0002\u037e",
    "\u037d\u0003\u0002\u0002\u0002\u037e\u037f\u0003\u0002\u0002\u0002\u037f",
    "\u0380\u0003\u0002\u0002\u0002\u0380\u0381\u0005\u0102\u0082\u0002\u0381",
    "\u0385\u0007\u009e\u0002\u0002\u0382\u0383\u0005\u0002\u0002\u0002\u0383",
    "\u0384\u0007\u009e\u0002\u0002\u0384\u0386\u0003\u0002\u0002\u0002\u0385",
    "\u0382\u0003\u0002\u0002\u0002\u0385\u0386\u0003\u0002\u0002\u0002\u0386",
    "\u0387\u0003\u0002\u0002\u0002\u0387\u0388\u0005@!\u0002\u0388\u0097",
    "\u0003\u0002\u0002\u0002\u0389\u038a\u0005j6\u0002\u038a\u038b\u0007",
    "\u009e\u0002\u0002\u038b\u038d\u0005\u0092J\u0002\u038c\u038e\u0007",
    "\u009e\u0002\u0002\u038d\u038c\u0003\u0002\u0002\u0002\u038d\u038e\u0003",
    "\u0002\u0002\u0002\u038e\u038f\u0003\u0002\u0002\u0002\u038f\u0390\u0005",
    "\u0104\u0083\u0002\u0390\u0394\u0007\u009e\u0002\u0002\u0391\u0392\u0005",
    "\u0002\u0002\u0002\u0392\u0393\u0007\u009e\u0002\u0002\u0393\u0395\u0003",
    "\u0002\u0002\u0002\u0394\u0391\u0003\u0002\u0002\u0002\u0394\u0395\u0003",
    "\u0002\u0002\u0002\u0395\u0396\u0003\u0002\u0002\u0002\u0396\u0397\u0005",
    "> \u0002\u0397\u0099\u0003\u0002\u0002\u0002\u0398\u0399\u0005j6\u0002",
    "\u0399\u039a\u0007\u009e\u0002\u0002\u039a\u039c\u0005\u0092J\u0002",
    "\u039b\u039d\u0007\u009e\u0002\u0002\u039c\u039b\u0003\u0002\u0002\u0002",
    "\u039c\u039d\u0003\u0002\u0002\u0002\u039d\u039e\u0003\u0002\u0002\u0002",
    "\u039e\u039f\u0005\u0106\u0084\u0002\u039f\u03a3\u0007\u009e\u0002\u0002",
    "\u03a0\u03a1\u0005\u0002\u0002\u0002\u03a1\u03a2\u0007\u009e\u0002\u0002",
    "\u03a2\u03a4\u0003\u0002\u0002\u0002\u03a3\u03a0\u0003\u0002\u0002\u0002",
    "\u03a3\u03a4\u0003\u0002\u0002\u0002\u03a4\u03a5\u0003\u0002\u0002\u0002",
    "\u03a5\u03a6\u0005> \u0002\u03a6\u009b\u0003\u0002\u0002\u0002\u03a7",
    "\u03a8\u0005j6\u0002\u03a8\u03a9\u0007\u009e\u0002\u0002\u03a9\u03ab",
    "\u0005\u0092J\u0002\u03aa\u03ac\u0007\u009e\u0002\u0002\u03ab\u03aa",
    "\u0003\u0002\u0002\u0002\u03ab\u03ac\u0003\u0002\u0002\u0002\u03ac\u03ad",
    "\u0003\u0002\u0002\u0002\u03ad\u03ae\u0005\u0100\u0081\u0002\u03ae\u03b2",
    "\u0007\u009e\u0002\u0002\u03af\u03b0\u0005\u0002\u0002\u0002\u03b0\u03b1",
    "\u0007\u009e\u0002\u0002\u03b1\u03b3\u0003\u0002\u0002\u0002\u03b2\u03af",
    "\u0003\u0002\u0002\u0002\u03b2\u03b3\u0003\u0002\u0002\u0002\u03b3\u03b4",
    "\u0003\u0002\u0002\u0002\u03b4\u03b5\u0005@!\u0002\u03b5\u009d\u0003",
    "\u0002\u0002\u0002\u03b6\u03b7\u0005j6\u0002\u03b7\u03b8\u0007\u009e",
    "\u0002\u0002\u03b8\u03b9\u00074\u0002\u0002\u03b9\u03ba\u0007\u009e",
    "\u0002\u0002\u03ba\u03bb\u0005\u000e\b\u0002\u03bb\u03bc\u0007\u009e",
    "\u0002\u0002\u03bc\u03bd\u00075\u0002\u0002\u03bd\u03be\u0007\u009e",
    "\u0002\u0002\u03be\u03bf\u0005 \u0011\u0002\u03bf\u009f\u0003\u0002",
    "\u0002\u0002\u03c0\u03c1\u0005j6\u0002\u03c1\u03c2\u0007\u009e\u0002",
    "\u0002\u03c2\u03c3\u0005\u00a4S\u0002\u03c3\u03c4\u0007\u009e\u0002",
    "\u0002\u03c4\u03c5\u0005\u00a8U\u0002\u03c5\u00a1\u0003\u0002\u0002",
    "\u0002\u03c6\u03ca\u0007\u00a0\u0002\u0002\u03c7\u03c8\u00076\u0002",
    "\u0002\u03c8\u03ca\u0007\u009e\u0002\u0002\u03c9\u03c6\u0003\u0002\u0002",
    "\u0002\u03c9\u03c7\u0003\u0002\u0002\u0002\u03ca\u00a3\u0003\u0002\u0002",
    "\u0002\u03cb\u03cc\u0005\u00a2R\u0002\u03cc\u03cd\u0007\u009b\u0002",
    "\u0002\u03cd\u00a5\u0003\u0002\u0002\u0002\u03ce\u03cf\u0005j6\u0002",
    "\u03cf\u03d0\u0007\u009e\u0002\u0002\u03d0\u03d1\u0005\u00eex\u0002",
    "\u03d1\u00a7\u0003\u0002\u0002\u0002\u03d2\u03db\u0007\u000f\u0002\u0002",
    "\u03d3\u03d8\u0005\u00a6T\u0002\u03d4\u03d5\u0007\u0014\u0002\u0002",
    "\u03d5\u03d7\u0005\u00a6T\u0002\u03d6\u03d4\u0003\u0002\u0002\u0002",
    "\u03d7\u03da\u0003\u0002\u0002\u0002\u03d8\u03d6\u0003\u0002\u0002\u0002",
    "\u03d8\u03d9\u0003\u0002\u0002\u0002\u03d9\u03dc\u0003\u0002\u0002\u0002",
    "\u03da\u03d8\u0003\u0002\u0002\u0002\u03db\u03d3\u0003\u0002\u0002\u0002",
    "\u03db\u03dc\u0003\u0002\u0002\u0002\u03dc\u03dd\u0003\u0002\u0002\u0002",
    "\u03dd\u03de\u0007\u0010\u0002\u0002\u03de\u00a9\u0003\u0002\u0002\u0002",
    "\u03df\u03e0\u0005j6\u0002\u03e0\u03e1\u0007\u009e\u0002\u0002\u03e1",
    "\u03e2\u00077\u0002\u0002\u03e2\u03e3\u0007\u009e\u0002\u0002\u03e3",
    "\u03e4\u0005> \u0002\u03e4\u03e5\u0007\u009e\u0002\u0002\u03e5\u03e6",
    "\u00075\u0002\u0002\u03e6\u03e7\u0007\u009e\u0002\u0002\u03e7\u03e8",
    "\u0005> \u0002\u03e8\u00ab\u0003\u0002\u0002\u0002\u03e9\u03ea\u0005",
    "j6\u0002\u03ea\u03eb\u0007\u009e\u0002\u0002\u03eb\u03ec\u00078\u0002",
    "\u0002\u03ec\u03ed\u0007\u009e\u0002\u0002\u03ed\u03ee\u0005\u00eex",
    "\u0002\u03ee\u03ef\u0007\u009e\u0002\u0002\u03ef\u03f0\u00079\u0002",
    "\u0002\u03f0\u03f1\u0007\u009e\u0002\u0002\u03f1\u03f2\u0005\u00eex",
    "\u0002\u03f2\u00ad\u0003\u0002\u0002\u0002\u03f3\u03f4\u0005j6\u0002",
    "\u03f4\u03f5\u0007\u009e\u0002\u0002\u03f5\u03f6\u0007:\u0002\u0002",
    "\u03f6\u03f7\u0007\u009e\u0002\u0002\u03f7\u03f8\u0005j6\u0002\u03f8",
    "\u00af\u0003\u0002\u0002\u0002\u03f9\u03fa\u0005j6\u0002\u03fa\u03fb",
    "\u0007\u009e\u0002\u0002\u03fb\u03fc\u0007;\u0002\u0002\u03fc\u03fd",
    "\u0007\u009e\u0002\u0002\u03fd\u03fe\u0005j6\u0002\u03fe\u00b1\u0003",
    "\u0002\u0002\u0002\u03ff\u0400\u0005j6\u0002\u0400\u0401\u0007\u009e",
    "\u0002\u0002\u0401\u0402\u0007<\u0002\u0002\u0402\u0403\u0007\u009e",
    "\u0002\u0002\u0403\u0404\u0005\u00eex\u0002\u0404\u0405\u0007\u009e",
    "\u0002\u0002\u0405\u0406\u00079\u0002\u0002\u0406\u0407\u0007\u009e",
    "\u0002\u0002\u0407\u0408\u0005\u00eex\u0002\u0408\u00b3\u0003\u0002",
    "\u0002\u0002\u0409\u040a\u0005j6\u0002\u040a\u040b\u0007\u009e\u0002",
    "\u0002\u040b\u040c\u0007=\u0002\u0002\u040c\u040d\u0007\u009e\u0002",
    "\u0002\u040d\u040e\u0005\u00eex\u0002\u040e\u040f\u0007\u009e\u0002",
    "\u0002\u040f\u0410\u00079\u0002\u0002\u0410\u0411\u0007\u009e\u0002",
    "\u0002\u0411\u0412\u0005\u00eex\u0002\u0412\u0413\u0007\u009e\u0002",
    "\u0002\u0413\u0414\u0007>\u0002\u0002\u0414\u0415\u0007\u009e\u0002",
    "\u0002\u0415\u0416\u0005j6\u0002\u0416\u00b5\u0003\u0002\u0002\u0002",
    "\u0417\u0418\u0005j6\u0002\u0418\u0419\u0007\u009e\u0002\u0002\u0419",
    "\u041a\u0007?\u0002\u0002\u041a\u041b\u0007\u009e\u0002\u0002\u041b",
    "\u041c\u0005\u00eex\u0002\u041c\u00b7\u0003\u0002\u0002\u0002\u041d",
    "\u041e\u0005j6\u0002\u041e\u041f\u0007\u009e\u0002\u0002\u041f\u0420",
    "\u0007@\u0002\u0002\u0420\u0421\u0007\u009e\u0002\u0002\u0421\u0422",
    "\u0005j6\u0002\u0422\u0423\u0007\u009e\u0002\u0002\u0423\u0424\u0007",
    "A\u0002\u0002\u0424\u0425\u0007\u009e\u0002\u0002\u0425\u0426\u0005",
    "\u00f0y\u0002\u0426\u00b9\u0003\u0002\u0002\u0002\u0427\u0428\u0005",
    "j6\u0002\u0428\u0429\u0007\u009e\u0002\u0002\u0429\u042a\u0007B\u0002",
    "\u0002\u042a\u00bb\u0003\u0002\u0002\u0002\u042b\u042c\u0005j6\u0002",
    "\u042c\u042d\u0007\u009e\u0002\u0002\u042d\u042e\u0007C\u0002\u0002",
    "\u042e\u042f\u0005\u00be`\u0002\u042f\u00bd\u0003\u0002\u0002\u0002",
    "\u0430\u0436\u0005\u00c0a\u0002\u0431\u0436\u0005\u00c2b\u0002\u0432",
    "\u0436\u0005\u00c4c\u0002\u0433\u0436\u0005\u00c6d\u0002\u0434\u0436",
    "\u0005\u00c8e\u0002\u0435\u0430\u0003\u0002\u0002\u0002\u0435\u0431",
    "\u0003\u0002\u0002\u0002\u0435\u0432\u0003\u0002\u0002\u0002\u0435\u0433",
    "\u0003\u0002\u0002\u0002\u0435\u0434\u0003\u0002\u0002\u0002\u0436\u00bf",
    "\u0003\u0002\u0002\u0002\u0437\u0438\u0005\u010a\u0086\u0002\u0438\u00c1",
    "\u0003\u0002\u0002\u0002\u0439\u043a\u0005\u0110\u0089\u0002\u043a\u00c3",
    "\u0003\u0002\u0002\u0002\u043b\u043c\u0005\u010e\u0088\u0002\u043c\u00c5",
    "\u0003\u0002\u0002\u0002\u043d\u043e\u0005\u010c\u0087\u0002\u043e\u043f",
    "\u0007\u009e\u0002\u0002\u043f\u0440\u0007D\u0002\u0002\u0440\u0441",
    "\u0007\u009e\u0002\u0002\u0441\u0442\u0005\u00f0y\u0002\u0442\u0443",
    "\u0007\u009e\u0002\u0002\u0443\u0444\u0007.\u0002\u0002\u0444\u0445",
    "\u0007\u009e\u0002\u0002\u0445\u0446\u0005\u00eex\u0002\u0446\u00c7",
    "\u0003\u0002\u0002\u0002\u0447\u0448\u0005\u0112\u008a\u0002\u0448\u0449",
    "\u0007\u009e\u0002\u0002\u0449\u044a\u0007.\u0002\u0002\u044a\u044b",
    "\u0005\u00f0y\u0002\u044b\u044c\u0005\u00f0y\u0002\u044c\u00c9\u0003",
    "\u0002\u0002\u0002\u044d\u044e\u0007\u009d\u0002\u0002\u044e\u044f\u0005",
    "\u00ccg\u0002\u044f\u0450\u0007\u009e\u0002\u0002\u0450\u0451\u0005",
    "\u00dep\u0002\u0451\u00cb\u0003\u0002\u0002\u0002\u0452\u0453\t\u000b",
    "\u0002\u0002\u0453\u00cd\u0003\u0002\u0002\u0002\u0454\u045c\u0005\u00d0",
    "i\u0002\u0455\u045c\u0005\u00d2j\u0002\u0456\u045c\u0005\u00d4k\u0002",
    "\u0457\u045c\u0005\u00d6l\u0002\u0458\u045c\u0005\u00d8m\u0002\u0459",
    "\u045c\u0005\u00dan\u0002\u045a\u045c\u0005\u00dco\u0002\u045b\u0454",
    "\u0003\u0002\u0002\u0002\u045b\u0455\u0003\u0002\u0002\u0002\u045b\u0456",
    "\u0003\u0002\u0002\u0002\u045b\u0457\u0003\u0002\u0002\u0002\u045b\u0458",
    "\u0003\u0002\u0002\u0002\u045b\u0459\u0003\u0002\u0002\u0002\u045b\u045a",
    "\u0003\u0002\u0002\u0002\u045c\u00cf\u0003\u0002\u0002\u0002\u045d\u045e",
    "\u0007G\u0002\u0002\u045e\u00d1\u0003\u0002\u0002\u0002\u045f\u0460",
    "\t\f\u0002\u0002\u0460\u00d3\u0003\u0002\u0002\u0002\u0461\u0462\t\r",
    "\u0002\u0002\u0462\u00d5\u0003\u0002\u0002\u0002\u0463\u0464\t\u000e",
    "\u0002\u0002\u0464\u00d7\u0003\u0002\u0002\u0002\u0465\u0466\t\u000f",
    "\u0002\u0002\u0466\u00d9\u0003\u0002\u0002\u0002\u0467\u0468\t\u0010",
    "\u0002\u0002\u0468\u00db\u0003\u0002\u0002\u0002\u0469\u046a\t\u0011",
    "\u0002\u0002\u046a\u00dd\u0003\u0002\u0002\u0002\u046b\u0473\u0005\u00e0",
    "q\u0002\u046c\u0473\u0005\u00e2r\u0002\u046d\u0473\u0005\u00e6t\u0002",
    "\u046e\u0473\u0005\u00e4s\u0002\u046f\u0473\u0005\u00e8u\u0002\u0470",
    "\u0473\u0005\u00ecw\u0002\u0471\u0473\u0005\u00eav\u0002\u0472\u046b",
    "\u0003\u0002\u0002\u0002\u0472\u046c\u0003\u0002\u0002\u0002\u0472\u046d",
    "\u0003\u0002\u0002\u0002\u0472\u046e\u0003\u0002\u0002\u0002\u0472\u046f",
    "\u0003\u0002\u0002\u0002\u0472\u0470\u0003\u0002\u0002\u0002\u0472\u0471",
    "\u0003\u0002\u0002\u0002\u0473\u00df\u0003\u0002\u0002\u0002\u0474\u0475",
    "\u0005j6\u0002\u0475\u0476\u0007\u009e\u0002\u0002\u0476\u0477\u0007",
    "T\u0002\u0002\u0477\u0478\u0007\u009e\u0002\u0002\u0478\u0479\u0005",
    "\u00eex\u0002\u0479\u00e1\u0003\u0002\u0002\u0002\u047a\u047b\u0005",
    "j6\u0002\u047b\u047c\u0007\u009e\u0002\u0002\u047c\u047d\u0007T\u0002",
    "\u0002\u047d\u047e\u0007\u009e\u0002\u0002\u047e\u047f\u0005\u00ceh",
    "\u0002\u047f\u0480\u0007\u009e\u0002\u0002\u0480\u0481\u0007\u009b\u0002",
    "\u0002\u0481\u0482\u0007\u009e\u0002\u0002\u0482\u0483\u0005\u00fe\u0080",
    "\u0002\u0483\u0484\u0007\u009e\u0002\u0002\u0484\u0485\u0007U\u0002",
    "\u0002\u0485\u00e3\u0003\u0002\u0002\u0002\u0486\u0487\u0005j6\u0002",
    "\u0487\u0488\u0007\u009e\u0002\u0002\u0488\u0489\u0007V\u0002\u0002",
    "\u0489\u00e5\u0003\u0002\u0002\u0002\u048a\u048b\u0005j6\u0002\u048b",
    "\u048c\u0007\u009e\u0002\u0002\u048c\u048d\u0007W\u0002\u0002\u048d",
    "\u00e7\u0003\u0002\u0002\u0002\u048e\u048f\u0005j6\u0002\u048f\u0490",
    "\u0007\u009e\u0002\u0002\u0490\u0493\u0007X\u0002\u0002\u0491\u0492",
    "\u0007\u009e\u0002\u0002\u0492\u0494\u0005\u0002\u0002\u0002\u0493\u0491",
    "\u0003\u0002\u0002\u0002\u0493\u0494\u0003\u0002\u0002\u0002\u0494\u0495",
    "\u0003\u0002\u0002\u0002\u0495\u0496\u0007\u009e\u0002\u0002\u0496\u0497",
    "\u0005> \u0002\u0497\u00e9\u0003\u0002\u0002\u0002\u0498\u0499\u0005",
    "j6\u0002\u0499\u049a\u0007\u009e\u0002\u0002\u049a\u049d\u0007Y\u0002",
    "\u0002\u049b\u049c\u0007\u009e\u0002\u0002\u049c\u049e\u0005\u0002\u0002",
    "\u0002\u049d\u049b\u0003\u0002\u0002\u0002\u049d\u049e\u0003\u0002\u0002",
    "\u0002\u049e\u049f\u0003\u0002\u0002\u0002\u049f\u04a0\u0007\u009e\u0002",
    "\u0002\u04a0\u04a1\u0005@!\u0002\u04a1\u00eb\u0003\u0002\u0002\u0002",
    "\u04a2\u04a3\u0005j6\u0002\u04a3\u04a4\u0007Z\u0002\u0002\u04a4\u04a5",
    "\u0007\u009b\u0002\u0002\u04a5\u04a6\u0007,\u0002\u0002\u04a6\u00ed",
    "\u0003\u0002\u0002\u0002\u04a7\u04ab\u0007\u000f\u0002\u0002\u04a8\u04aa",
    "\u0007\u009e\u0002\u0002\u04a9\u04a8\u0003\u0002\u0002\u0002\u04aa\u04ad",
    "\u0003\u0002\u0002\u0002\u04ab\u04a9\u0003\u0002\u0002\u0002\u04ab\u04ac",
    "\u0003\u0002\u0002\u0002\u04ac\u04b4\u0003\u0002\u0002\u0002\u04ad\u04ab",
    "\u0003\u0002\u0002\u0002\u04ae\u04b0\u0005\u00f0y\u0002\u04af\u04b1",
    "\u0007\u009e\u0002\u0002\u04b0\u04af\u0003\u0002\u0002\u0002\u04b0\u04b1",
    "\u0003\u0002\u0002\u0002\u04b1\u04b3\u0003\u0002\u0002\u0002\u04b2\u04ae",
    "\u0003\u0002\u0002\u0002\u04b3\u04b6\u0003\u0002\u0002\u0002\u04b4\u04b2",
    "\u0003\u0002\u0002\u0002\u04b4\u04b5\u0003\u0002\u0002\u0002\u04b5\u04ba",
    "\u0003\u0002\u0002\u0002\u04b6\u04b4\u0003\u0002\u0002\u0002\u04b7\u04b9",
    "\u0007\u009e\u0002\u0002\u04b8\u04b7\u0003\u0002\u0002\u0002\u04b9\u04bc",
    "\u0003\u0002\u0002\u0002\u04ba\u04b8\u0003\u0002\u0002\u0002\u04ba\u04bb",
    "\u0003\u0002\u0002\u0002\u04bb\u04bd\u0003\u0002\u0002\u0002\u04bc\u04ba",
    "\u0003\u0002\u0002\u0002\u04bd\u04be\u0007\u0010\u0002\u0002\u04be\u00ef",
    "\u0003\u0002\u0002\u0002\u04bf\u04c6\u0005\u00f2z\u0002\u04c0\u04c6",
    "\u0005\u00f6|\u0002\u04c1\u04c6\u0005\u00f4{\u0002\u04c2\u04c6\u0005",
    "\u00f8}\u0002\u04c3\u04c6\u0005\u00fa~\u0002\u04c4\u04c6\u0005\u00fc",
    "\u007f\u0002\u04c5\u04bf\u0003\u0002\u0002\u0002\u04c5\u04c0\u0003\u0002",
    "\u0002\u0002\u04c5\u04c1\u0003\u0002\u0002\u0002\u04c5\u04c2\u0003\u0002",
    "\u0002\u0002\u04c5\u04c3\u0003\u0002\u0002\u0002\u04c5\u04c4\u0003\u0002",
    "\u0002\u0002\u04c6\u00f1\u0003\u0002\u0002\u0002\u04c7\u04c8\t\u0012",
    "\u0002\u0002\u04c8\u00f3\u0003\u0002\u0002\u0002\u04c9\u04ca\t\u0013",
    "\u0002\u0002\u04ca\u00f5\u0003\u0002\u0002\u0002\u04cb\u04cc\t\u0014",
    "\u0002\u0002\u04cc\u00f7\u0003\u0002\u0002\u0002\u04cd\u04ce\t\u0015",
    "\u0002\u0002\u04ce\u00f9\u0003\u0002\u0002\u0002\u04cf\u04d0\t\u0016",
    "\u0002\u0002\u04d0\u00fb\u0003\u0002\u0002\u0002\u04d1\u04d2\t\u0017",
    "\u0002\u0002\u04d2\u00fd\u0003\u0002\u0002\u0002\u04d3\u04d8\u0005\u0102",
    "\u0082\u0002\u04d4\u04d8\u0005\u0100\u0081\u0002\u04d5\u04d8\u0005\u0104",
    "\u0083\u0002\u04d6\u04d8\u0005\u0106\u0084\u0002\u04d7\u04d3\u0003\u0002",
    "\u0002\u0002\u04d7\u04d4\u0003\u0002\u0002\u0002\u04d7\u04d5\u0003\u0002",
    "\u0002\u0002\u04d7\u04d6\u0003\u0002\u0002\u0002\u04d8\u00ff\u0003\u0002",
    "\u0002\u0002\u04d9\u04da\t\u0018\u0002\u0002\u04da\u0101\u0003\u0002",
    "\u0002\u0002\u04db\u04dc\t\u0019\u0002\u0002\u04dc\u0103\u0003\u0002",
    "\u0002\u0002\u04dd\u04de\t\u001a\u0002\u0002\u04de\u0105\u0003\u0002",
    "\u0002\u0002\u04df\u04e0\t\u001b\u0002\u0002\u04e0\u0107\u0003\u0002",
    "\u0002\u0002\u04e1\u04e7\u0005\u010a\u0086\u0002\u04e2\u04e7\u0005\u010c",
    "\u0087\u0002\u04e3\u04e7\u0005\u010e\u0088\u0002\u04e4\u04e7\u0005\u0110",
    "\u0089\u0002\u04e5\u04e7\u0005\u0112\u008a\u0002\u04e6\u04e1\u0003\u0002",
    "\u0002\u0002\u04e6\u04e2\u0003\u0002\u0002\u0002\u04e6\u04e3\u0003\u0002",
    "\u0002\u0002\u04e6\u04e4\u0003\u0002\u0002\u0002\u04e6\u04e5\u0003\u0002",
    "\u0002\u0002\u04e7\u0109\u0003\u0002\u0002\u0002\u04e8\u04e9\t\u001c",
    "\u0002\u0002\u04e9\u010b\u0003\u0002\u0002\u0002\u04ea\u04eb\t\u001d",
    "\u0002\u0002\u04eb\u010d\u0003\u0002\u0002\u0002\u04ec\u04ed\t\u001e",
    "\u0002\u0002\u04ed\u010f\u0003\u0002\u0002\u0002\u04ee\u04ef\t\u001f",
    "\u0002\u0002\u04ef\u0111\u0003\u0002\u0002\u0002\u04f0\u04f1\t \u0002",
    "\u0002\u04f1\u0113\u0003\u0002\u0002\u0002\u04f2\u04fb\u0005\u0118\u008d",
    "\u0002\u04f3\u04fb\u0005\u011a\u008e\u0002\u04f4\u04fb\u0005\u011c\u008f",
    "\u0002\u04f5\u04fb\u0005\u011e\u0090\u0002\u04f6\u04fb\u0005\u0120\u0091",
    "\u0002\u04f7\u04fb\u0005\u0122\u0092\u0002\u04f8\u04fb\u0005\u0124\u0093",
    "\u0002\u04f9\u04fb\u0005\u0126\u0094\u0002\u04fa\u04f2\u0003\u0002\u0002",
    "\u0002\u04fa\u04f3\u0003\u0002\u0002\u0002\u04fa\u04f4\u0003\u0002\u0002",
    "\u0002\u04fa\u04f5\u0003\u0002\u0002\u0002\u04fa\u04f6\u0003\u0002\u0002",
    "\u0002\u04fa\u04f7\u0003\u0002\u0002\u0002\u04fa\u04f8\u0003\u0002\u0002",
    "\u0002\u04fa\u04f9\u0003\u0002\u0002\u0002\u04fb\u0115\u0003\u0002\u0002",
    "\u0002\u04fc\u04fd\t!\u0002\u0002\u04fd\u0117\u0003\u0002\u0002\u0002",
    "\u04fe\u0503\u0007}\u0002\u0002\u04ff\u0500\u0005\u0116\u008c\u0002",
    "\u0500\u0501\u0007~\u0002\u0002\u0501\u0503\u0003\u0002\u0002\u0002",
    "\u0502\u04fe\u0003\u0002\u0002\u0002\u0502\u04ff\u0003\u0002\u0002\u0002",
    "\u0503\u0119\u0003\u0002\u0002\u0002\u0504\u0509\u0007\u007f\u0002\u0002",
    "\u0505\u0506\u0005\u0116\u008c\u0002\u0506\u0507\u0007\u0080\u0002\u0002",
    "\u0507\u0509\u0003\u0002\u0002\u0002\u0508\u0504\u0003\u0002\u0002\u0002",
    "\u0508\u0505\u0003\u0002\u0002\u0002\u0509\u011b\u0003\u0002\u0002\u0002",
    "\u050a\u050f\u0007\u0081\u0002\u0002\u050b\u050c\u0005\u0116\u008c\u0002",
    "\u050c\u050d\u0005\u00fa~\u0002\u050d\u050f\u0003\u0002\u0002\u0002",
    "\u050e\u050a\u0003\u0002\u0002\u0002\u050e\u050b\u0003\u0002\u0002\u0002",
    "\u050f\u011d\u0003\u0002\u0002\u0002\u0510\u0515\u0007\u0082\u0002\u0002",
    "\u0511\u0512\u0005\u0116\u008c\u0002\u0512\u0513\u0005\u00f6|\u0002",
    "\u0513\u0515\u0003\u0002\u0002\u0002\u0514\u0510\u0003\u0002\u0002\u0002",
    "\u0514\u0511\u0003\u0002\u0002\u0002\u0515\u011f\u0003\u0002\u0002\u0002",
    "\u0516\u051b\u0007\u0083\u0002\u0002\u0517\u0518\u0005\u0116\u008c\u0002",
    "\u0518\u0519\u0005\u00f4{\u0002\u0519\u051b\u0003\u0002\u0002\u0002",
    "\u051a\u0516\u0003\u0002\u0002\u0002\u051a\u0517\u0003\u0002\u0002\u0002",
    "\u051b\u0121\u0003\u0002\u0002\u0002\u051c\u0521\u0007\u0084\u0002\u0002",
    "\u051d\u051e\u0005\u0116\u008c\u0002\u051e\u051f\u0005\u00f8}\u0002",
    "\u051f\u0521\u0003\u0002\u0002\u0002\u0520\u051c\u0003\u0002\u0002\u0002",
    "\u0520\u051d\u0003\u0002\u0002\u0002\u0521\u0123\u0003\u0002\u0002\u0002",
    "\u0522\u0527\u0007\u0085\u0002\u0002\u0523\u0524\u0005\u0116\u008c\u0002",
    "\u0524\u0525\u0005\u00f2z\u0002\u0525\u0527\u0003\u0002\u0002\u0002",
    "\u0526\u0522\u0003\u0002\u0002\u0002\u0526\u0523\u0003\u0002\u0002\u0002",
    "\u0527\u0125\u0003\u0002\u0002\u0002\u0528\u052d\u0007\u0086\u0002\u0002",
    "\u0529\u052a\u0005\u0116\u008c\u0002\u052a\u052b\u0007\u00a6\u0002\u0002",
    "\u052b\u052d\u0003\u0002\u0002\u0002\u052c\u0528\u0003\u0002\u0002\u0002",
    "\u052c\u0529\u0003\u0002\u0002\u0002\u052d\u0127\u0003\u0002\u0002\u0002",
    "\u052e\u0537\u0005\u012a\u0096\u0002\u052f\u0537\u0005\u012c\u0097\u0002",
    "\u0530\u0537\u0005\u012e\u0098\u0002\u0531\u0537\u0005\u0130\u0099\u0002",
    "\u0532\u0537\u0005\u0132\u009a\u0002\u0533\u0537\u0005\u0134\u009b\u0002",
    "\u0534\u0537\u0005\u0136\u009c\u0002\u0535\u0537\u0005\u0138\u009d\u0002",
    "\u0536\u052e\u0003\u0002\u0002\u0002\u0536\u052f\u0003\u0002\u0002\u0002",
    "\u0536\u0530\u0003\u0002\u0002\u0002\u0536\u0531\u0003\u0002\u0002\u0002",
    "\u0536\u0532\u0003\u0002\u0002\u0002\u0536\u0533\u0003\u0002\u0002\u0002",
    "\u0536\u0534\u0003\u0002\u0002\u0002\u0536\u0535\u0003\u0002\u0002\u0002",
    "\u0537\u0129\u0003\u0002\u0002\u0002\u0538\u0539\t\"\u0002\u0002\u0539",
    "\u012b\u0003\u0002\u0002\u0002\u053a\u053b\t#\u0002\u0002\u053b\u012d",
    "\u0003\u0002\u0002\u0002\u053c\u053d\t$\u0002\u0002\u053d\u012f\u0003",
    "\u0002\u0002\u0002\u053e\u053f\t%\u0002\u0002\u053f\u0131\u0003\u0002",
    "\u0002\u0002\u0540\u0541\t&\u0002\u0002\u0541\u0133\u0003\u0002\u0002",
    "\u0002\u0542\u0543\t\'\u0002\u0002\u0543\u0135\u0003\u0002\u0002\u0002",
    "\u0544\u0545\t(\u0002\u0002\u0545\u0137\u0003\u0002\u0002\u0002\u0546",
    "\u0547\t)\u0002\u0002\u0547\u0139\u0003\u0002\u0002\u0002\u0548\u054e",
    "\u0005\u0102\u0082\u0002\u0549\u054e\u0005\u0100\u0081\u0002\u054a\u054e",
    "\u0005\u0110\u0089\u0002\u054b\u054e\u0005\u013c\u009f\u0002\u054c\u054e",
    "\u0005\u013e\u00a0\u0002\u054d\u0548\u0003\u0002\u0002\u0002\u054d\u0549",
    "\u0003\u0002\u0002\u0002\u054d\u054a\u0003\u0002\u0002\u0002\u054d\u054b",
    "\u0003\u0002\u0002\u0002\u054d\u054c\u0003\u0002\u0002\u0002\u054e\u013b",
    "\u0003\u0002\u0002\u0002\u054f\u0550\t*\u0002\u0002\u0550\u013d\u0003",
    "\u0002\u0002\u0002\u0551\u0552\t+\u0002\u0002\u0552\u013f\u0003\u0002",
    "\u0002\u0002\u0553\u0554\t,\u0002\u0002\u0554\u0141\u0003\u0002\u0002",
    "\u0002i\u014b\u0152\u0157\u015e\u016a\u0172\u0177\u017b\u0180\u0184",
    "\u0192\u019d\u01a8\u01ac\u01ca\u01e4\u01f0\u0206\u020b\u0212\u0218\u0224",
    "\u0229\u022f\u0235\u0238\u023b\u023f\u0243\u0246\u0249\u024e\u025a\u025f",
    "\u0268\u026e\u0271\u0274\u0278\u027c\u027f\u0282\u0287\u0293\u02a6\u02ab",
    "\u02be\u02c9\u02cd\u02db\u02df\u02e9\u02ed\u02f7\u02fb\u0305\u0309\u0313",
    "\u0317\u0321\u0325\u032c\u0336\u033d\u0343\u034d\u035a\u035f\u0372\u037e",
    "\u0385\u038d\u0394\u039c\u03a3\u03ab\u03b2\u03c9\u03d8\u03db\u0435\u045b",
    "\u0472\u0493\u049d\u04ab\u04b0\u04b4\u04ba\u04c5\u04d7\u04e6\u04fa\u0502",
    "\u0508\u050e\u0514\u051a\u0520\u0526\u052c\u0536\u054d"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'at'", "'@'", "'x'", "'game'", "'options'", 
                     "'robber'", "'pirate'", "'standard'", "'standardWithCities'", 
                     "'seaFarers'", "'board'", "'hexesBag:'", "'['", "']'", 
                     "'portsBag:'", "'chitsBag:'", "'system2D:'", "','", 
                     "'pointy'", "'flat'", "'odd'", "'even'", "'|'", "'hexes'", 
                     "'locationIds'", "'..'", "'chits'", "'ports'", "'player'", 
                     "'p'", "'server'", "'s'", "'.'", "'client'", "'c'", 
                     "'hand'", "'stock'", "'devCards'", "'victoryPoints'", 
                     "'towns'", "'cities'", "'roads'", "'placement'", "'and gains'", 
                     "'turns'", "'turn'", "'builds'", "'build'", "'ends turn'", 
                     "'moves'", "'to'", "'rolls'", "'moves ship from'", 
                     "'offers'", "'for'", "'accepts offer from'", "'rejects offer from'", 
                     "'counter-offers'", "'trades'", "'with'", "'looses'", 
                     "'robs'", "'and steals'", "'buys a development card'", 
                     "'plays a'", "'on'", "'v/'", "'check'", "'at least'", 
                     "'more then'", "'>'", "'more then or equal'", "'>='", 
                     "'exactly'", "'='", "'less then'", "'<'", "'less then or equal'", 
                     "'<='", "'not'", "'!'", "'has'", "'in stock'", "'is not on turn'", 
                     "'is on turn'", "'has road'", "'has town'", "'hasXRoads:'", 
                     "'\uD83D\uDC11'", "'sheep'", "'\uD83C\uDF32'", "'timber'", 
                     "'t'", "'\uD83C\uDF3E'", "'wheat'", "'w'", "'\u26F0'", 
                     "'ore'", "'o'", "'\u268C'", "'brick'", "'b'", "'?'", 
                     "'unknown'", "'\uD83C\uDFE0'", "'town'", "'\u26EA'", 
                     "'city'", "'\u26F5'", "'ship'", "'\uD83D\uDEE3'", "'road'", 
                     "'soldier'", "'m'", "'monopoly'", "'rb'", "'roadBuilding'", 
                     "'vp'", "'victoryPoint'", "'yop'", "'yearOfPlenty'", 
                     "'port'", "'any3:1Port'", "'3:1'", "'any4:1Port'", 
                     "'4:1'", "'brick2:1Port'", "'wheat2:1Port'", "'timber2:1Port'", 
                     "'ore2:1Port'", "'sheep2:1Port'", "'fromBagPort'", 
                     "'pasture'", "'P'", "'F'", "'mountain'", "'M'", "'river'", 
                     "'R'", "'field'", "'W'", "'sea'", "'S'", "'none'", 
                     "'desert'", "'D'", "'lr'", "'longestRoad'", "'la'", 
                     "'largestArmy'", "'rbt'", "'token'", null, null, null, 
                     "' '", "'\uD83D\uDD28'", "'\uD83C\uDFB2'", "'\u2693'", 
                     "'\u2714'", "'\uFE0F'", "'\u2394'", "'\u2B21'", "'\u0C30'", 
                     "'\u00D7'" ];

var symbolicNames = [ null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      "NUMBER", "NL", "INDENT", "SPACE", "U_BUILD", "U_DICE", 
                      "U_PORT", "U_CHECK", "U_CHECK_GREEN", "U_FLAT", "U_POINTY", 
                      "U_BAG", "U_X", "NODEDOT" ];

var ruleNames =  [ "at", "times", "script", "game", "gameOptions", "gameOption", 
                   "robber", "pirate", "placementSequence", "board", "boardOption", 
                   "hexesBag", "portsBag", "chitsBag", "layout2D", "coord", 
                   "x", "y", "z", "coord3D", "row", "column", "coord2D", 
                   "coord1D", "orientation", "pointy", "flat", "odd", "even", 
                   "oddEven", "edge", "node", "hexSetup", "hexRow", "evenHexRow", 
                   "oddHexRow", "locationSetup", "locationRow", "noLocation", 
                   "locationAssignment", "evenLocationRow", "oddLocationRow", 
                   "chitSetup", "chitRow", "noChit", "chitFromBag", "chit", 
                   "evenChitRow", "oddChitRow", "portsSetup", "portAtEdge", 
                   "players", "player", "server", "client", "setupPlayerOption", 
                   "hand", "stock", "stockItem", "devCards", "ports", "victoryPoints", 
                   "towns", "cities", "roads", "placementItem", "placements", 
                   "buildAction", "turns", "turn", "turnItem", "action", 
                   "build", "endTurn", "buildCity", "buildShip", "buildRoad", 
                   "buildTown", "moveRobber", "rollDice", "dice", "roll", 
                   "playerProduction", "production", "moveShip", "offerTrade", 
                   "acceptOffer", "rejectOffer", "counterOffer", "tradePlayer", 
                   "looseResources", "robPlayer", "buyDevelopmentCard", 
                   "playDevelopmentCard", "playDevelopmentCardExpression", 
                   "playSoldier", "playVictoryPoint", "playRoadBuilding", 
                   "playMonopoly", "playYearOfPlenty", "checkItem", "checkPrefix", 
                   "precision", "atLeast", "moreThen", "moreThenOrEqual", 
                   "exactly", "lessThen", "lessThenOrEqual", "not", "check", 
                   "hasResources", "hasAmountPiecesInStock", "isNotOnTurn", 
                   "isOnTurn", "hasRoadAt", "hasTownAt", "hasXRoads", "resourceSet", 
                   "resource", "sheep", "timber", "wheat", "ore", "brick", 
                   "unknown", "piece", "town", "city", "ship", "road", "devCard", 
                   "soldier", "monopoly", "roadBuilding", "victoryPoint", 
                   "yearOfPlenty", "port", "portPrefix", "any3To1Port", 
                   "any4To1Port", "brick2To1Port", "wheat2To1Port", "timber2To1Port", 
                   "ore2To1Port", "sheep2To1Port", "fromBagPort", "hex", 
                   "pasture", "forest", "mountain", "river", "wheatField", 
                   "sea", "none", "desert", "victoryPointt", "longestRoad", 
                   "largestArmy", "roadBuildingToken" ];

function jsettlersParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

jsettlersParser.prototype = Object.create(antlr4.Parser.prototype);
jsettlersParser.prototype.constructor = jsettlersParser;

Object.defineProperty(jsettlersParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

jsettlersParser.EOF = antlr4.Token.EOF;
jsettlersParser.T__0 = 1;
jsettlersParser.T__1 = 2;
jsettlersParser.T__2 = 3;
jsettlersParser.T__3 = 4;
jsettlersParser.T__4 = 5;
jsettlersParser.T__5 = 6;
jsettlersParser.T__6 = 7;
jsettlersParser.T__7 = 8;
jsettlersParser.T__8 = 9;
jsettlersParser.T__9 = 10;
jsettlersParser.T__10 = 11;
jsettlersParser.T__11 = 12;
jsettlersParser.T__12 = 13;
jsettlersParser.T__13 = 14;
jsettlersParser.T__14 = 15;
jsettlersParser.T__15 = 16;
jsettlersParser.T__16 = 17;
jsettlersParser.T__17 = 18;
jsettlersParser.T__18 = 19;
jsettlersParser.T__19 = 20;
jsettlersParser.T__20 = 21;
jsettlersParser.T__21 = 22;
jsettlersParser.T__22 = 23;
jsettlersParser.T__23 = 24;
jsettlersParser.T__24 = 25;
jsettlersParser.T__25 = 26;
jsettlersParser.T__26 = 27;
jsettlersParser.T__27 = 28;
jsettlersParser.T__28 = 29;
jsettlersParser.T__29 = 30;
jsettlersParser.T__30 = 31;
jsettlersParser.T__31 = 32;
jsettlersParser.T__32 = 33;
jsettlersParser.T__33 = 34;
jsettlersParser.T__34 = 35;
jsettlersParser.T__35 = 36;
jsettlersParser.T__36 = 37;
jsettlersParser.T__37 = 38;
jsettlersParser.T__38 = 39;
jsettlersParser.T__39 = 40;
jsettlersParser.T__40 = 41;
jsettlersParser.T__41 = 42;
jsettlersParser.T__42 = 43;
jsettlersParser.T__43 = 44;
jsettlersParser.T__44 = 45;
jsettlersParser.T__45 = 46;
jsettlersParser.T__46 = 47;
jsettlersParser.T__47 = 48;
jsettlersParser.T__48 = 49;
jsettlersParser.T__49 = 50;
jsettlersParser.T__50 = 51;
jsettlersParser.T__51 = 52;
jsettlersParser.T__52 = 53;
jsettlersParser.T__53 = 54;
jsettlersParser.T__54 = 55;
jsettlersParser.T__55 = 56;
jsettlersParser.T__56 = 57;
jsettlersParser.T__57 = 58;
jsettlersParser.T__58 = 59;
jsettlersParser.T__59 = 60;
jsettlersParser.T__60 = 61;
jsettlersParser.T__61 = 62;
jsettlersParser.T__62 = 63;
jsettlersParser.T__63 = 64;
jsettlersParser.T__64 = 65;
jsettlersParser.T__65 = 66;
jsettlersParser.T__66 = 67;
jsettlersParser.T__67 = 68;
jsettlersParser.T__68 = 69;
jsettlersParser.T__69 = 70;
jsettlersParser.T__70 = 71;
jsettlersParser.T__71 = 72;
jsettlersParser.T__72 = 73;
jsettlersParser.T__73 = 74;
jsettlersParser.T__74 = 75;
jsettlersParser.T__75 = 76;
jsettlersParser.T__76 = 77;
jsettlersParser.T__77 = 78;
jsettlersParser.T__78 = 79;
jsettlersParser.T__79 = 80;
jsettlersParser.T__80 = 81;
jsettlersParser.T__81 = 82;
jsettlersParser.T__82 = 83;
jsettlersParser.T__83 = 84;
jsettlersParser.T__84 = 85;
jsettlersParser.T__85 = 86;
jsettlersParser.T__86 = 87;
jsettlersParser.T__87 = 88;
jsettlersParser.T__88 = 89;
jsettlersParser.T__89 = 90;
jsettlersParser.T__90 = 91;
jsettlersParser.T__91 = 92;
jsettlersParser.T__92 = 93;
jsettlersParser.T__93 = 94;
jsettlersParser.T__94 = 95;
jsettlersParser.T__95 = 96;
jsettlersParser.T__96 = 97;
jsettlersParser.T__97 = 98;
jsettlersParser.T__98 = 99;
jsettlersParser.T__99 = 100;
jsettlersParser.T__100 = 101;
jsettlersParser.T__101 = 102;
jsettlersParser.T__102 = 103;
jsettlersParser.T__103 = 104;
jsettlersParser.T__104 = 105;
jsettlersParser.T__105 = 106;
jsettlersParser.T__106 = 107;
jsettlersParser.T__107 = 108;
jsettlersParser.T__108 = 109;
jsettlersParser.T__109 = 110;
jsettlersParser.T__110 = 111;
jsettlersParser.T__111 = 112;
jsettlersParser.T__112 = 113;
jsettlersParser.T__113 = 114;
jsettlersParser.T__114 = 115;
jsettlersParser.T__115 = 116;
jsettlersParser.T__116 = 117;
jsettlersParser.T__117 = 118;
jsettlersParser.T__118 = 119;
jsettlersParser.T__119 = 120;
jsettlersParser.T__120 = 121;
jsettlersParser.T__121 = 122;
jsettlersParser.T__122 = 123;
jsettlersParser.T__123 = 124;
jsettlersParser.T__124 = 125;
jsettlersParser.T__125 = 126;
jsettlersParser.T__126 = 127;
jsettlersParser.T__127 = 128;
jsettlersParser.T__128 = 129;
jsettlersParser.T__129 = 130;
jsettlersParser.T__130 = 131;
jsettlersParser.T__131 = 132;
jsettlersParser.T__132 = 133;
jsettlersParser.T__133 = 134;
jsettlersParser.T__134 = 135;
jsettlersParser.T__135 = 136;
jsettlersParser.T__136 = 137;
jsettlersParser.T__137 = 138;
jsettlersParser.T__138 = 139;
jsettlersParser.T__139 = 140;
jsettlersParser.T__140 = 141;
jsettlersParser.T__141 = 142;
jsettlersParser.T__142 = 143;
jsettlersParser.T__143 = 144;
jsettlersParser.T__144 = 145;
jsettlersParser.T__145 = 146;
jsettlersParser.T__146 = 147;
jsettlersParser.T__147 = 148;
jsettlersParser.T__148 = 149;
jsettlersParser.T__149 = 150;
jsettlersParser.T__150 = 151;
jsettlersParser.T__151 = 152;
jsettlersParser.NUMBER = 153;
jsettlersParser.NL = 154;
jsettlersParser.INDENT = 155;
jsettlersParser.SPACE = 156;
jsettlersParser.U_BUILD = 157;
jsettlersParser.U_DICE = 158;
jsettlersParser.U_PORT = 159;
jsettlersParser.U_CHECK = 160;
jsettlersParser.U_CHECK_GREEN = 161;
jsettlersParser.U_FLAT = 162;
jsettlersParser.U_POINTY = 163;
jsettlersParser.U_BAG = 164;
jsettlersParser.U_X = 165;
jsettlersParser.NODEDOT = 166;

jsettlersParser.RULE_at = 0;
jsettlersParser.RULE_times = 1;
jsettlersParser.RULE_script = 2;
jsettlersParser.RULE_game = 3;
jsettlersParser.RULE_gameOptions = 4;
jsettlersParser.RULE_gameOption = 5;
jsettlersParser.RULE_robber = 6;
jsettlersParser.RULE_pirate = 7;
jsettlersParser.RULE_placementSequence = 8;
jsettlersParser.RULE_board = 9;
jsettlersParser.RULE_boardOption = 10;
jsettlersParser.RULE_hexesBag = 11;
jsettlersParser.RULE_portsBag = 12;
jsettlersParser.RULE_chitsBag = 13;
jsettlersParser.RULE_layout2D = 14;
jsettlersParser.RULE_coord = 15;
jsettlersParser.RULE_x = 16;
jsettlersParser.RULE_y = 17;
jsettlersParser.RULE_z = 18;
jsettlersParser.RULE_coord3D = 19;
jsettlersParser.RULE_row = 20;
jsettlersParser.RULE_column = 21;
jsettlersParser.RULE_coord2D = 22;
jsettlersParser.RULE_coord1D = 23;
jsettlersParser.RULE_orientation = 24;
jsettlersParser.RULE_pointy = 25;
jsettlersParser.RULE_flat = 26;
jsettlersParser.RULE_odd = 27;
jsettlersParser.RULE_even = 28;
jsettlersParser.RULE_oddEven = 29;
jsettlersParser.RULE_edge = 30;
jsettlersParser.RULE_node = 31;
jsettlersParser.RULE_hexSetup = 32;
jsettlersParser.RULE_hexRow = 33;
jsettlersParser.RULE_evenHexRow = 34;
jsettlersParser.RULE_oddHexRow = 35;
jsettlersParser.RULE_locationSetup = 36;
jsettlersParser.RULE_locationRow = 37;
jsettlersParser.RULE_noLocation = 38;
jsettlersParser.RULE_locationAssignment = 39;
jsettlersParser.RULE_evenLocationRow = 40;
jsettlersParser.RULE_oddLocationRow = 41;
jsettlersParser.RULE_chitSetup = 42;
jsettlersParser.RULE_chitRow = 43;
jsettlersParser.RULE_noChit = 44;
jsettlersParser.RULE_chitFromBag = 45;
jsettlersParser.RULE_chit = 46;
jsettlersParser.RULE_evenChitRow = 47;
jsettlersParser.RULE_oddChitRow = 48;
jsettlersParser.RULE_portsSetup = 49;
jsettlersParser.RULE_portAtEdge = 50;
jsettlersParser.RULE_players = 51;
jsettlersParser.RULE_player = 52;
jsettlersParser.RULE_server = 53;
jsettlersParser.RULE_client = 54;
jsettlersParser.RULE_setupPlayerOption = 55;
jsettlersParser.RULE_hand = 56;
jsettlersParser.RULE_stock = 57;
jsettlersParser.RULE_stockItem = 58;
jsettlersParser.RULE_devCards = 59;
jsettlersParser.RULE_ports = 60;
jsettlersParser.RULE_victoryPoints = 61;
jsettlersParser.RULE_towns = 62;
jsettlersParser.RULE_cities = 63;
jsettlersParser.RULE_roads = 64;
jsettlersParser.RULE_placementItem = 65;
jsettlersParser.RULE_placements = 66;
jsettlersParser.RULE_buildAction = 67;
jsettlersParser.RULE_turns = 68;
jsettlersParser.RULE_turn = 69;
jsettlersParser.RULE_turnItem = 70;
jsettlersParser.RULE_action = 71;
jsettlersParser.RULE_build = 72;
jsettlersParser.RULE_endTurn = 73;
jsettlersParser.RULE_buildCity = 74;
jsettlersParser.RULE_buildShip = 75;
jsettlersParser.RULE_buildRoad = 76;
jsettlersParser.RULE_buildTown = 77;
jsettlersParser.RULE_moveRobber = 78;
jsettlersParser.RULE_rollDice = 79;
jsettlersParser.RULE_dice = 80;
jsettlersParser.RULE_roll = 81;
jsettlersParser.RULE_playerProduction = 82;
jsettlersParser.RULE_production = 83;
jsettlersParser.RULE_moveShip = 84;
jsettlersParser.RULE_offerTrade = 85;
jsettlersParser.RULE_acceptOffer = 86;
jsettlersParser.RULE_rejectOffer = 87;
jsettlersParser.RULE_counterOffer = 88;
jsettlersParser.RULE_tradePlayer = 89;
jsettlersParser.RULE_looseResources = 90;
jsettlersParser.RULE_robPlayer = 91;
jsettlersParser.RULE_buyDevelopmentCard = 92;
jsettlersParser.RULE_playDevelopmentCard = 93;
jsettlersParser.RULE_playDevelopmentCardExpression = 94;
jsettlersParser.RULE_playSoldier = 95;
jsettlersParser.RULE_playVictoryPoint = 96;
jsettlersParser.RULE_playRoadBuilding = 97;
jsettlersParser.RULE_playMonopoly = 98;
jsettlersParser.RULE_playYearOfPlenty = 99;
jsettlersParser.RULE_checkItem = 100;
jsettlersParser.RULE_checkPrefix = 101;
jsettlersParser.RULE_precision = 102;
jsettlersParser.RULE_atLeast = 103;
jsettlersParser.RULE_moreThen = 104;
jsettlersParser.RULE_moreThenOrEqual = 105;
jsettlersParser.RULE_exactly = 106;
jsettlersParser.RULE_lessThen = 107;
jsettlersParser.RULE_lessThenOrEqual = 108;
jsettlersParser.RULE_not = 109;
jsettlersParser.RULE_check = 110;
jsettlersParser.RULE_hasResources = 111;
jsettlersParser.RULE_hasAmountPiecesInStock = 112;
jsettlersParser.RULE_isNotOnTurn = 113;
jsettlersParser.RULE_isOnTurn = 114;
jsettlersParser.RULE_hasRoadAt = 115;
jsettlersParser.RULE_hasTownAt = 116;
jsettlersParser.RULE_hasXRoads = 117;
jsettlersParser.RULE_resourceSet = 118;
jsettlersParser.RULE_resource = 119;
jsettlersParser.RULE_sheep = 120;
jsettlersParser.RULE_timber = 121;
jsettlersParser.RULE_wheat = 122;
jsettlersParser.RULE_ore = 123;
jsettlersParser.RULE_brick = 124;
jsettlersParser.RULE_unknown = 125;
jsettlersParser.RULE_piece = 126;
jsettlersParser.RULE_town = 127;
jsettlersParser.RULE_city = 128;
jsettlersParser.RULE_ship = 129;
jsettlersParser.RULE_road = 130;
jsettlersParser.RULE_devCard = 131;
jsettlersParser.RULE_soldier = 132;
jsettlersParser.RULE_monopoly = 133;
jsettlersParser.RULE_roadBuilding = 134;
jsettlersParser.RULE_victoryPoint = 135;
jsettlersParser.RULE_yearOfPlenty = 136;
jsettlersParser.RULE_port = 137;
jsettlersParser.RULE_portPrefix = 138;
jsettlersParser.RULE_any3To1Port = 139;
jsettlersParser.RULE_any4To1Port = 140;
jsettlersParser.RULE_brick2To1Port = 141;
jsettlersParser.RULE_wheat2To1Port = 142;
jsettlersParser.RULE_timber2To1Port = 143;
jsettlersParser.RULE_ore2To1Port = 144;
jsettlersParser.RULE_sheep2To1Port = 145;
jsettlersParser.RULE_fromBagPort = 146;
jsettlersParser.RULE_hex = 147;
jsettlersParser.RULE_pasture = 148;
jsettlersParser.RULE_forest = 149;
jsettlersParser.RULE_mountain = 150;
jsettlersParser.RULE_river = 151;
jsettlersParser.RULE_wheatField = 152;
jsettlersParser.RULE_sea = 153;
jsettlersParser.RULE_none = 154;
jsettlersParser.RULE_desert = 155;
jsettlersParser.RULE_victoryPointt = 156;
jsettlersParser.RULE_longestRoad = 157;
jsettlersParser.RULE_largestArmy = 158;
jsettlersParser.RULE_roadBuildingToken = 159;

function AtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_at;
    return this;
}

AtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AtContext.prototype.constructor = AtContext;


AtContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterAt(this);
	}
};

AtContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitAt(this);
	}
};




jsettlersParser.AtContext = AtContext;

jsettlersParser.prototype.at = function() {

    var localctx = new AtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, jsettlersParser.RULE_at);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 320;
        _la = this._input.LA(1);
        if(!(_la===jsettlersParser.T__0 || _la===jsettlersParser.T__1)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TimesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_times;
    return this;
}

TimesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TimesContext.prototype.constructor = TimesContext;

TimesContext.prototype.U_X = function() {
    return this.getToken(jsettlersParser.U_X, 0);
};

TimesContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterTimes(this);
	}
};

TimesContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitTimes(this);
	}
};




jsettlersParser.TimesContext = TimesContext;

jsettlersParser.prototype.times = function() {

    var localctx = new TimesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, jsettlersParser.RULE_times);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 322;
        _la = this._input.LA(1);
        if(!(_la===jsettlersParser.T__2 || _la===jsettlersParser.U_X)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ScriptContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_script;
    return this;
}

ScriptContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ScriptContext.prototype.constructor = ScriptContext;

ScriptContext.prototype.game = function() {
    return this.getTypedRuleContext(GameContext,0);
};

ScriptContext.prototype.placements = function() {
    return this.getTypedRuleContext(PlacementsContext,0);
};

ScriptContext.prototype.turns = function() {
    return this.getTypedRuleContext(TurnsContext,0);
};

ScriptContext.prototype.EOF = function() {
    return this.getToken(jsettlersParser.EOF, 0);
};

ScriptContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterScript(this);
	}
};

ScriptContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitScript(this);
	}
};




jsettlersParser.ScriptContext = ScriptContext;

jsettlersParser.prototype.script = function() {

    var localctx = new ScriptContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, jsettlersParser.RULE_script);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 324;
        this.game();
        this.state = 325;
        this.placements();
        this.state = 326;
        this.turns();
        this.state = 329;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
        if(la_===1) {
            this.state = 328;
            this.match(jsettlersParser.EOF);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_game;
    return this;
}

GameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GameContext.prototype.constructor = GameContext;

GameContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.NL);
    } else {
        return this.getToken(jsettlersParser.NL, i);
    }
};


GameContext.prototype.gameOptions = function() {
    return this.getTypedRuleContext(GameOptionsContext,0);
};

GameContext.prototype.board = function() {
    return this.getTypedRuleContext(BoardContext,0);
};

GameContext.prototype.players = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PlayersContext);
    } else {
        return this.getTypedRuleContext(PlayersContext,i);
    }
};

GameContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterGame(this);
	}
};

GameContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitGame(this);
	}
};




jsettlersParser.GameContext = GameContext;

jsettlersParser.prototype.game = function() {

    var localctx = new GameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, jsettlersParser.RULE_game);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 331;
        this.match(jsettlersParser.T__3);
        this.state = 332;
        this.match(jsettlersParser.NL);
        this.state = 336;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
        if(la_===1) {
            this.state = 333;
            this.gameOptions();
            this.state = 334;
            this.match(jsettlersParser.NL);

        }
        this.state = 341;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
        if(la_===1) {
            this.state = 338;
            this.board();
            this.state = 339;
            this.match(jsettlersParser.NL);

        }
        this.state = 346; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 343;
            this.players();
            this.state = 344;
            this.match(jsettlersParser.NL);
            this.state = 348; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===jsettlersParser.INDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GameOptionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_gameOptions;
    return this;
}

GameOptionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GameOptionsContext.prototype.constructor = GameOptionsContext;

GameOptionsContext.prototype.INDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.INDENT);
    } else {
        return this.getToken(jsettlersParser.INDENT, i);
    }
};


GameOptionsContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.NL);
    } else {
        return this.getToken(jsettlersParser.NL, i);
    }
};


GameOptionsContext.prototype.gameOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(GameOptionContext);
    } else {
        return this.getTypedRuleContext(GameOptionContext,i);
    }
};

GameOptionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterGameOptions(this);
	}
};

GameOptionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitGameOptions(this);
	}
};




jsettlersParser.GameOptionsContext = GameOptionsContext;

jsettlersParser.prototype.gameOptions = function() {

    var localctx = new GameOptionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, jsettlersParser.RULE_gameOptions);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 350;
        this.match(jsettlersParser.INDENT);
        this.state = 351;
        this.match(jsettlersParser.T__4);
        this.state = 352;
        this.match(jsettlersParser.NL);
        this.state = 360;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===jsettlersParser.INDENT) {
            this.state = 353;
            this.match(jsettlersParser.INDENT);
            this.state = 354;
            this.match(jsettlersParser.INDENT);
            this.state = 355;
            this.gameOption();
            this.state = 356;
            this.match(jsettlersParser.NL);
            this.state = 362;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GameOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_gameOption;
    return this;
}

GameOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GameOptionContext.prototype.constructor = GameOptionContext;

GameOptionContext.prototype.stock = function() {
    return this.getTypedRuleContext(StockContext,0);
};

GameOptionContext.prototype.pirate = function() {
    return this.getTypedRuleContext(PirateContext,0);
};

GameOptionContext.prototype.board = function() {
    return this.getTypedRuleContext(BoardContext,0);
};

GameOptionContext.prototype.robber = function() {
    return this.getTypedRuleContext(RobberContext,0);
};

GameOptionContext.prototype.placementSequence = function() {
    return this.getTypedRuleContext(PlacementSequenceContext,0);
};

GameOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterGameOption(this);
	}
};

GameOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitGameOption(this);
	}
};




jsettlersParser.GameOptionContext = GameOptionContext;

jsettlersParser.prototype.gameOption = function() {

    var localctx = new GameOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, jsettlersParser.RULE_gameOption);
    try {
        this.state = 368;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case jsettlersParser.T__36:
            this.enterOuterAlt(localctx, 1);
            this.state = 363;
            this.stock();
            break;
        case jsettlersParser.T__6:
            this.enterOuterAlt(localctx, 2);
            this.state = 364;
            this.pirate();
            break;
        case jsettlersParser.INDENT:
            this.enterOuterAlt(localctx, 3);
            this.state = 365;
            this.board();
            break;
        case jsettlersParser.T__5:
            this.enterOuterAlt(localctx, 4);
            this.state = 366;
            this.robber();
            break;
        case jsettlersParser.T__7:
        case jsettlersParser.T__8:
        case jsettlersParser.T__9:
            this.enterOuterAlt(localctx, 5);
            this.state = 367;
            this.placementSequence();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RobberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_robber;
    return this;
}

RobberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RobberContext.prototype.constructor = RobberContext;

RobberContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.SPACE);
    } else {
        return this.getToken(jsettlersParser.SPACE, i);
    }
};


RobberContext.prototype.at = function() {
    return this.getTypedRuleContext(AtContext,0);
};

RobberContext.prototype.coord = function() {
    return this.getTypedRuleContext(CoordContext,0);
};

RobberContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterRobber(this);
	}
};

RobberContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitRobber(this);
	}
};




jsettlersParser.RobberContext = RobberContext;

jsettlersParser.prototype.robber = function() {

    var localctx = new RobberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, jsettlersParser.RULE_robber);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 370;
        this.match(jsettlersParser.T__5);
        this.state = 373;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
        if(la_===1) {
            this.state = 371;
            this.match(jsettlersParser.SPACE);
            this.state = 372;
            this.at();

        }
        this.state = 377;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
        if(la_===1) {
            this.state = 375;
            this.match(jsettlersParser.SPACE);
            this.state = 376;
            this.coord();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PirateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_pirate;
    return this;
}

PirateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PirateContext.prototype.constructor = PirateContext;

PirateContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.SPACE);
    } else {
        return this.getToken(jsettlersParser.SPACE, i);
    }
};


PirateContext.prototype.at = function() {
    return this.getTypedRuleContext(AtContext,0);
};

PirateContext.prototype.coord = function() {
    return this.getTypedRuleContext(CoordContext,0);
};

PirateContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterPirate(this);
	}
};

PirateContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitPirate(this);
	}
};




jsettlersParser.PirateContext = PirateContext;

jsettlersParser.prototype.pirate = function() {

    var localctx = new PirateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, jsettlersParser.RULE_pirate);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 379;
        this.match(jsettlersParser.T__6);
        this.state = 382;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
        if(la_===1) {
            this.state = 380;
            this.match(jsettlersParser.SPACE);
            this.state = 381;
            this.at();

        }
        this.state = 386;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===jsettlersParser.SPACE) {
            this.state = 384;
            this.match(jsettlersParser.SPACE);
            this.state = 385;
            this.coord();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PlacementSequenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_placementSequence;
    return this;
}

PlacementSequenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PlacementSequenceContext.prototype.constructor = PlacementSequenceContext;


PlacementSequenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterPlacementSequence(this);
	}
};

PlacementSequenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitPlacementSequence(this);
	}
};




jsettlersParser.PlacementSequenceContext = PlacementSequenceContext;

jsettlersParser.prototype.placementSequence = function() {

    var localctx = new PlacementSequenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, jsettlersParser.RULE_placementSequence);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 388;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << jsettlersParser.T__7) | (1 << jsettlersParser.T__8) | (1 << jsettlersParser.T__9))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BoardContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_board;
    return this;
}

BoardContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BoardContext.prototype.constructor = BoardContext;

BoardContext.prototype.INDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.INDENT);
    } else {
        return this.getToken(jsettlersParser.INDENT, i);
    }
};


BoardContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.NL);
    } else {
        return this.getToken(jsettlersParser.NL, i);
    }
};


BoardContext.prototype.boardOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BoardOptionContext);
    } else {
        return this.getTypedRuleContext(BoardOptionContext,i);
    }
};

BoardContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterBoard(this);
	}
};

BoardContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitBoard(this);
	}
};




jsettlersParser.BoardContext = BoardContext;

jsettlersParser.prototype.board = function() {

    var localctx = new BoardContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, jsettlersParser.RULE_board);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 390;
        this.match(jsettlersParser.INDENT);
        this.state = 391;
        this.match(jsettlersParser.T__10);
        this.state = 392;
        this.match(jsettlersParser.NL);
        this.state = 400;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===jsettlersParser.INDENT) {
            this.state = 393;
            this.match(jsettlersParser.INDENT);
            this.state = 394;
            this.match(jsettlersParser.INDENT);
            this.state = 395;
            this.boardOption();
            this.state = 396;
            this.match(jsettlersParser.NL);
            this.state = 402;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BoardOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_boardOption;
    return this;
}

BoardOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BoardOptionContext.prototype.constructor = BoardOptionContext;

BoardOptionContext.prototype.layout2D = function() {
    return this.getTypedRuleContext(Layout2DContext,0);
};

BoardOptionContext.prototype.hexSetup = function() {
    return this.getTypedRuleContext(HexSetupContext,0);
};

BoardOptionContext.prototype.locationSetup = function() {
    return this.getTypedRuleContext(LocationSetupContext,0);
};

BoardOptionContext.prototype.chitSetup = function() {
    return this.getTypedRuleContext(ChitSetupContext,0);
};

BoardOptionContext.prototype.portsSetup = function() {
    return this.getTypedRuleContext(PortsSetupContext,0);
};

BoardOptionContext.prototype.hexesBag = function() {
    return this.getTypedRuleContext(HexesBagContext,0);
};

BoardOptionContext.prototype.portsBag = function() {
    return this.getTypedRuleContext(PortsBagContext,0);
};

BoardOptionContext.prototype.chitsBag = function() {
    return this.getTypedRuleContext(ChitsBagContext,0);
};

BoardOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterBoardOption(this);
	}
};

BoardOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitBoardOption(this);
	}
};




jsettlersParser.BoardOptionContext = BoardOptionContext;

jsettlersParser.prototype.boardOption = function() {

    var localctx = new BoardOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, jsettlersParser.RULE_boardOption);
    try {
        this.state = 411;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case jsettlersParser.T__16:
            this.enterOuterAlt(localctx, 1);
            this.state = 403;
            this.layout2D();
            break;
        case jsettlersParser.T__23:
            this.enterOuterAlt(localctx, 2);
            this.state = 404;
            this.hexSetup();
            break;
        case jsettlersParser.T__24:
            this.enterOuterAlt(localctx, 3);
            this.state = 405;
            this.locationSetup();
            break;
        case jsettlersParser.T__26:
            this.enterOuterAlt(localctx, 4);
            this.state = 406;
            this.chitSetup();
            break;
        case jsettlersParser.T__27:
            this.enterOuterAlt(localctx, 5);
            this.state = 407;
            this.portsSetup();
            break;
        case jsettlersParser.T__11:
            this.enterOuterAlt(localctx, 6);
            this.state = 408;
            this.hexesBag();
            break;
        case jsettlersParser.T__14:
            this.enterOuterAlt(localctx, 7);
            this.state = 409;
            this.portsBag();
            break;
        case jsettlersParser.T__15:
            this.enterOuterAlt(localctx, 8);
            this.state = 410;
            this.chitsBag();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HexesBagContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_hexesBag;
    return this;
}

HexesBagContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HexesBagContext.prototype.constructor = HexesBagContext;

HexesBagContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.SPACE);
    } else {
        return this.getToken(jsettlersParser.SPACE, i);
    }
};


HexesBagContext.prototype.NUMBER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.NUMBER);
    } else {
        return this.getToken(jsettlersParser.NUMBER, i);
    }
};


HexesBagContext.prototype.hex = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(HexContext);
    } else {
        return this.getTypedRuleContext(HexContext,i);
    }
};

HexesBagContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterHexesBag(this);
	}
};

HexesBagContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitHexesBag(this);
	}
};




jsettlersParser.HexesBagContext = HexesBagContext;

jsettlersParser.prototype.hexesBag = function() {

    var localctx = new HexesBagContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, jsettlersParser.RULE_hexesBag);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 413;
        this.match(jsettlersParser.T__11);
        this.state = 414;
        this.match(jsettlersParser.SPACE);
        this.state = 415;
        this.match(jsettlersParser.T__12);
        this.state = 426;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===jsettlersParser.NUMBER) {
            this.state = 416;
            this.match(jsettlersParser.NUMBER);
            this.state = 417;
            this.match(jsettlersParser.SPACE);
            this.state = 418;
            this.match(jsettlersParser.T__2);
            this.state = 419;
            this.match(jsettlersParser.SPACE);
            this.state = 420;
            this.hex();
            this.state = 422;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===jsettlersParser.SPACE) {
                this.state = 421;
                this.match(jsettlersParser.SPACE);
            }

            this.state = 428;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 429;
        this.match(jsettlersParser.T__13);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PortsBagContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_portsBag;
    return this;
}

PortsBagContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PortsBagContext.prototype.constructor = PortsBagContext;

PortsBagContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.SPACE);
    } else {
        return this.getToken(jsettlersParser.SPACE, i);
    }
};


PortsBagContext.prototype.NUMBER = function() {
    return this.getToken(jsettlersParser.NUMBER, 0);
};

PortsBagContext.prototype.port = function() {
    return this.getTypedRuleContext(PortContext,0);
};

PortsBagContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterPortsBag(this);
	}
};

PortsBagContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitPortsBag(this);
	}
};




jsettlersParser.PortsBagContext = PortsBagContext;

jsettlersParser.prototype.portsBag = function() {

    var localctx = new PortsBagContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, jsettlersParser.RULE_portsBag);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 431;
        this.match(jsettlersParser.T__14);
        this.state = 432;
        this.match(jsettlersParser.SPACE);
        this.state = 433;
        this.match(jsettlersParser.NUMBER);
        this.state = 434;
        this.match(jsettlersParser.SPACE);
        this.state = 435;
        this.match(jsettlersParser.T__2);
        this.state = 436;
        this.match(jsettlersParser.SPACE);
        this.state = 437;
        this.port();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ChitsBagContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_chitsBag;
    return this;
}

ChitsBagContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ChitsBagContext.prototype.constructor = ChitsBagContext;

ChitsBagContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.SPACE);
    } else {
        return this.getToken(jsettlersParser.SPACE, i);
    }
};


ChitsBagContext.prototype.NUMBER = function() {
    return this.getToken(jsettlersParser.NUMBER, 0);
};

ChitsBagContext.prototype.chit = function() {
    return this.getTypedRuleContext(ChitContext,0);
};

ChitsBagContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterChitsBag(this);
	}
};

ChitsBagContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitChitsBag(this);
	}
};




jsettlersParser.ChitsBagContext = ChitsBagContext;

jsettlersParser.prototype.chitsBag = function() {

    var localctx = new ChitsBagContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, jsettlersParser.RULE_chitsBag);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 439;
        this.match(jsettlersParser.T__15);
        this.state = 440;
        this.match(jsettlersParser.SPACE);
        this.state = 441;
        this.match(jsettlersParser.NUMBER);
        this.state = 442;
        this.match(jsettlersParser.SPACE);
        this.state = 443;
        this.match(jsettlersParser.T__2);
        this.state = 444;
        this.match(jsettlersParser.SPACE);
        this.state = 445;
        this.chit();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Layout2DContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_layout2D;
    return this;
}

Layout2DContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Layout2DContext.prototype.constructor = Layout2DContext;

Layout2DContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.SPACE);
    } else {
        return this.getToken(jsettlersParser.SPACE, i);
    }
};


Layout2DContext.prototype.orientation = function() {
    return this.getTypedRuleContext(OrientationContext,0);
};

Layout2DContext.prototype.oddEven = function() {
    return this.getTypedRuleContext(OddEvenContext,0);
};

Layout2DContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterLayout2D(this);
	}
};

Layout2DContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitLayout2D(this);
	}
};




jsettlersParser.Layout2DContext = Layout2DContext;

jsettlersParser.prototype.layout2D = function() {

    var localctx = new Layout2DContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, jsettlersParser.RULE_layout2D);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 447;
        this.match(jsettlersParser.T__16);
        this.state = 448;
        this.match(jsettlersParser.SPACE);
        this.state = 449;
        this.orientation();
        this.state = 450;
        this.match(jsettlersParser.SPACE);
        this.state = 451;
        this.oddEven();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CoordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_coord;
    return this;
}

CoordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CoordContext.prototype.constructor = CoordContext;

CoordContext.prototype.coord3D = function() {
    return this.getTypedRuleContext(Coord3DContext,0);
};

CoordContext.prototype.coord2D = function() {
    return this.getTypedRuleContext(Coord2DContext,0);
};

CoordContext.prototype.coord1D = function() {
    return this.getTypedRuleContext(Coord1DContext,0);
};

CoordContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterCoord(this);
	}
};

CoordContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitCoord(this);
	}
};




jsettlersParser.CoordContext = CoordContext;

jsettlersParser.prototype.coord = function() {

    var localctx = new CoordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, jsettlersParser.RULE_coord);
    try {
        this.state = 456;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 453;
            this.coord3D();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 454;
            this.coord2D();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 455;
            this.coord1D();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function XContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_x;
    return this;
}

XContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
XContext.prototype.constructor = XContext;

XContext.prototype.NUMBER = function() {
    return this.getToken(jsettlersParser.NUMBER, 0);
};

XContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterX(this);
	}
};

XContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitX(this);
	}
};




jsettlersParser.XContext = XContext;

jsettlersParser.prototype.x = function() {

    var localctx = new XContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, jsettlersParser.RULE_x);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 458;
        this.match(jsettlersParser.NUMBER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function YContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_y;
    return this;
}

YContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
YContext.prototype.constructor = YContext;

YContext.prototype.NUMBER = function() {
    return this.getToken(jsettlersParser.NUMBER, 0);
};

YContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterY(this);
	}
};

YContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitY(this);
	}
};




jsettlersParser.YContext = YContext;

jsettlersParser.prototype.y = function() {

    var localctx = new YContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, jsettlersParser.RULE_y);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 460;
        this.match(jsettlersParser.NUMBER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ZContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_z;
    return this;
}

ZContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ZContext.prototype.constructor = ZContext;

ZContext.prototype.NUMBER = function() {
    return this.getToken(jsettlersParser.NUMBER, 0);
};

ZContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterZ(this);
	}
};

ZContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitZ(this);
	}
};




jsettlersParser.ZContext = ZContext;

jsettlersParser.prototype.z = function() {

    var localctx = new ZContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, jsettlersParser.RULE_z);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 462;
        this.match(jsettlersParser.NUMBER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Coord3DContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_coord3D;
    return this;
}

Coord3DContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Coord3DContext.prototype.constructor = Coord3DContext;

Coord3DContext.prototype.x = function() {
    return this.getTypedRuleContext(XContext,0);
};

Coord3DContext.prototype.y = function() {
    return this.getTypedRuleContext(YContext,0);
};

Coord3DContext.prototype.z = function() {
    return this.getTypedRuleContext(ZContext,0);
};

Coord3DContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterCoord3D(this);
	}
};

Coord3DContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitCoord3D(this);
	}
};




jsettlersParser.Coord3DContext = Coord3DContext;

jsettlersParser.prototype.coord3D = function() {

    var localctx = new Coord3DContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, jsettlersParser.RULE_coord3D);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 464;
        this.x();
        this.state = 465;
        this.match(jsettlersParser.T__17);
        this.state = 466;
        this.y();
        this.state = 467;
        this.match(jsettlersParser.T__17);
        this.state = 468;
        this.z();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RowContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_row;
    return this;
}

RowContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RowContext.prototype.constructor = RowContext;

RowContext.prototype.NUMBER = function() {
    return this.getToken(jsettlersParser.NUMBER, 0);
};

RowContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterRow(this);
	}
};

RowContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitRow(this);
	}
};




jsettlersParser.RowContext = RowContext;

jsettlersParser.prototype.row = function() {

    var localctx = new RowContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, jsettlersParser.RULE_row);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 470;
        this.match(jsettlersParser.NUMBER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ColumnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_column;
    return this;
}

ColumnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnContext.prototype.constructor = ColumnContext;

ColumnContext.prototype.NUMBER = function() {
    return this.getToken(jsettlersParser.NUMBER, 0);
};

ColumnContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterColumn(this);
	}
};

ColumnContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitColumn(this);
	}
};




jsettlersParser.ColumnContext = ColumnContext;

jsettlersParser.prototype.column = function() {

    var localctx = new ColumnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, jsettlersParser.RULE_column);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 472;
        this.match(jsettlersParser.NUMBER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Coord2DContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_coord2D;
    return this;
}

Coord2DContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Coord2DContext.prototype.constructor = Coord2DContext;

Coord2DContext.prototype.row = function() {
    return this.getTypedRuleContext(RowContext,0);
};

Coord2DContext.prototype.column = function() {
    return this.getTypedRuleContext(ColumnContext,0);
};

Coord2DContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterCoord2D(this);
	}
};

Coord2DContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitCoord2D(this);
	}
};




jsettlersParser.Coord2DContext = Coord2DContext;

jsettlersParser.prototype.coord2D = function() {

    var localctx = new Coord2DContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, jsettlersParser.RULE_coord2D);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 474;
        this.row();
        this.state = 475;
        this.match(jsettlersParser.T__17);
        this.state = 476;
        this.column();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Coord1DContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_coord1D;
    return this;
}

Coord1DContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Coord1DContext.prototype.constructor = Coord1DContext;

Coord1DContext.prototype.NUMBER = function() {
    return this.getToken(jsettlersParser.NUMBER, 0);
};

Coord1DContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterCoord1D(this);
	}
};

Coord1DContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitCoord1D(this);
	}
};




jsettlersParser.Coord1DContext = Coord1DContext;

jsettlersParser.prototype.coord1D = function() {

    var localctx = new Coord1DContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, jsettlersParser.RULE_coord1D);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 478;
        this.match(jsettlersParser.NUMBER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OrientationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_orientation;
    return this;
}

OrientationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrientationContext.prototype.constructor = OrientationContext;

OrientationContext.prototype.pointy = function() {
    return this.getTypedRuleContext(PointyContext,0);
};

OrientationContext.prototype.flat = function() {
    return this.getTypedRuleContext(FlatContext,0);
};

OrientationContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterOrientation(this);
	}
};

OrientationContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitOrientation(this);
	}
};




jsettlersParser.OrientationContext = OrientationContext;

jsettlersParser.prototype.orientation = function() {

    var localctx = new OrientationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, jsettlersParser.RULE_orientation);
    try {
        this.state = 482;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case jsettlersParser.T__18:
        case jsettlersParser.U_POINTY:
            this.enterOuterAlt(localctx, 1);
            this.state = 480;
            this.pointy();
            break;
        case jsettlersParser.T__19:
        case jsettlersParser.U_FLAT:
            this.enterOuterAlt(localctx, 2);
            this.state = 481;
            this.flat();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PointyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_pointy;
    return this;
}

PointyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PointyContext.prototype.constructor = PointyContext;

PointyContext.prototype.U_POINTY = function() {
    return this.getToken(jsettlersParser.U_POINTY, 0);
};

PointyContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterPointy(this);
	}
};

PointyContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitPointy(this);
	}
};




jsettlersParser.PointyContext = PointyContext;

jsettlersParser.prototype.pointy = function() {

    var localctx = new PointyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, jsettlersParser.RULE_pointy);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 484;
        _la = this._input.LA(1);
        if(!(_la===jsettlersParser.T__18 || _la===jsettlersParser.U_POINTY)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FlatContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_flat;
    return this;
}

FlatContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FlatContext.prototype.constructor = FlatContext;

FlatContext.prototype.U_FLAT = function() {
    return this.getToken(jsettlersParser.U_FLAT, 0);
};

FlatContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterFlat(this);
	}
};

FlatContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitFlat(this);
	}
};




jsettlersParser.FlatContext = FlatContext;

jsettlersParser.prototype.flat = function() {

    var localctx = new FlatContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, jsettlersParser.RULE_flat);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 486;
        _la = this._input.LA(1);
        if(!(_la===jsettlersParser.T__19 || _la===jsettlersParser.U_FLAT)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OddContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_odd;
    return this;
}

OddContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OddContext.prototype.constructor = OddContext;


OddContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterOdd(this);
	}
};

OddContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitOdd(this);
	}
};




jsettlersParser.OddContext = OddContext;

jsettlersParser.prototype.odd = function() {

    var localctx = new OddContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, jsettlersParser.RULE_odd);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 488;
        this.match(jsettlersParser.T__20);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EvenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_even;
    return this;
}

EvenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EvenContext.prototype.constructor = EvenContext;


EvenContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterEven(this);
	}
};

EvenContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitEven(this);
	}
};




jsettlersParser.EvenContext = EvenContext;

jsettlersParser.prototype.even = function() {

    var localctx = new EvenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, jsettlersParser.RULE_even);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 490;
        this.match(jsettlersParser.T__21);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OddEvenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_oddEven;
    return this;
}

OddEvenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OddEvenContext.prototype.constructor = OddEvenContext;

OddEvenContext.prototype.odd = function() {
    return this.getTypedRuleContext(OddContext,0);
};

OddEvenContext.prototype.even = function() {
    return this.getTypedRuleContext(EvenContext,0);
};

OddEvenContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterOddEven(this);
	}
};

OddEvenContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitOddEven(this);
	}
};




jsettlersParser.OddEvenContext = OddEvenContext;

jsettlersParser.prototype.oddEven = function() {

    var localctx = new OddEvenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, jsettlersParser.RULE_oddEven);
    try {
        this.state = 494;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case jsettlersParser.T__20:
            this.enterOuterAlt(localctx, 1);
            this.state = 492;
            this.odd();
            break;
        case jsettlersParser.T__21:
            this.enterOuterAlt(localctx, 2);
            this.state = 493;
            this.even();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EdgeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_edge;
    return this;
}

EdgeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EdgeContext.prototype.constructor = EdgeContext;

EdgeContext.prototype.coord = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CoordContext);
    } else {
        return this.getTypedRuleContext(CoordContext,i);
    }
};

EdgeContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterEdge(this);
	}
};

EdgeContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitEdge(this);
	}
};




jsettlersParser.EdgeContext = EdgeContext;

jsettlersParser.prototype.edge = function() {

    var localctx = new EdgeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, jsettlersParser.RULE_edge);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 496;
        this.coord();
        this.state = 497;
        this.match(jsettlersParser.T__22);
        this.state = 498;
        this.coord();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NodeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_node;
    return this;
}

NodeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NodeContext.prototype.constructor = NodeContext;

NodeContext.prototype.coord = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CoordContext);
    } else {
        return this.getTypedRuleContext(CoordContext,i);
    }
};

NodeContext.prototype.NODEDOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.NODEDOT);
    } else {
        return this.getToken(jsettlersParser.NODEDOT, i);
    }
};


NodeContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterNode(this);
	}
};

NodeContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitNode(this);
	}
};




jsettlersParser.NodeContext = NodeContext;

jsettlersParser.prototype.node = function() {

    var localctx = new NodeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, jsettlersParser.RULE_node);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 500;
        this.coord();
        this.state = 501;
        this.match(jsettlersParser.NODEDOT);
        this.state = 502;
        this.coord();
        this.state = 503;
        this.match(jsettlersParser.NODEDOT);
        this.state = 504;
        this.coord();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HexSetupContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_hexSetup;
    return this;
}

HexSetupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HexSetupContext.prototype.constructor = HexSetupContext;

HexSetupContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.NL);
    } else {
        return this.getToken(jsettlersParser.NL, i);
    }
};


HexSetupContext.prototype.INDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.INDENT);
    } else {
        return this.getToken(jsettlersParser.INDENT, i);
    }
};


HexSetupContext.prototype.hexRow = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(HexRowContext);
    } else {
        return this.getTypedRuleContext(HexRowContext,i);
    }
};

HexSetupContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterHexSetup(this);
	}
};

HexSetupContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitHexSetup(this);
	}
};




jsettlersParser.HexSetupContext = HexSetupContext;

jsettlersParser.prototype.hexSetup = function() {

    var localctx = new HexSetupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, jsettlersParser.RULE_hexSetup);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 506;
        this.match(jsettlersParser.T__23);
        this.state = 507;
        this.match(jsettlersParser.NL);
        this.state = 516;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===jsettlersParser.INDENT) {
            this.state = 508;
            this.match(jsettlersParser.INDENT);
            this.state = 509;
            this.match(jsettlersParser.INDENT);
            this.state = 510;
            this.match(jsettlersParser.INDENT);
            this.state = 511;
            this.hexRow();
            this.state = 512;
            this.match(jsettlersParser.NL);
            this.state = 518;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HexRowContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_hexRow;
    return this;
}

HexRowContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HexRowContext.prototype.constructor = HexRowContext;

HexRowContext.prototype.evenHexRow = function() {
    return this.getTypedRuleContext(EvenHexRowContext,0);
};

HexRowContext.prototype.oddHexRow = function() {
    return this.getTypedRuleContext(OddHexRowContext,0);
};

HexRowContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterHexRow(this);
	}
};

HexRowContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitHexRow(this);
	}
};




jsettlersParser.HexRowContext = HexRowContext;

jsettlersParser.prototype.hexRow = function() {

    var localctx = new HexRowContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, jsettlersParser.RULE_hexRow);
    try {
        this.state = 521;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case jsettlersParser.T__32:
        case jsettlersParser.T__91:
        case jsettlersParser.T__132:
        case jsettlersParser.T__133:
        case jsettlersParser.T__134:
        case jsettlersParser.T__135:
        case jsettlersParser.T__136:
        case jsettlersParser.T__137:
        case jsettlersParser.T__138:
        case jsettlersParser.T__139:
        case jsettlersParser.T__140:
        case jsettlersParser.T__141:
        case jsettlersParser.T__142:
        case jsettlersParser.T__143:
        case jsettlersParser.T__144:
        case jsettlersParser.T__145:
            this.enterOuterAlt(localctx, 1);
            this.state = 519;
            this.evenHexRow();
            break;
        case jsettlersParser.SPACE:
            this.enterOuterAlt(localctx, 2);
            this.state = 520;
            this.oddHexRow();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EvenHexRowContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_evenHexRow;
    return this;
}

EvenHexRowContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EvenHexRowContext.prototype.constructor = EvenHexRowContext;

EvenHexRowContext.prototype.hex = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(HexContext);
    } else {
        return this.getTypedRuleContext(HexContext,i);
    }
};

EvenHexRowContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.SPACE);
    } else {
        return this.getToken(jsettlersParser.SPACE, i);
    }
};


EvenHexRowContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterEvenHexRow(this);
	}
};

EvenHexRowContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitEvenHexRow(this);
	}
};




jsettlersParser.EvenHexRowContext = EvenHexRowContext;

jsettlersParser.prototype.evenHexRow = function() {

    var localctx = new EvenHexRowContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, jsettlersParser.RULE_evenHexRow);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 523;
        this.hex();
        this.state = 526; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 524;
            this.match(jsettlersParser.SPACE);
            this.state = 525;
            this.hex();
            this.state = 528; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===jsettlersParser.SPACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OddHexRowContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_oddHexRow;
    return this;
}

OddHexRowContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OddHexRowContext.prototype.constructor = OddHexRowContext;

OddHexRowContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.SPACE);
    } else {
        return this.getToken(jsettlersParser.SPACE, i);
    }
};


OddHexRowContext.prototype.hex = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(HexContext);
    } else {
        return this.getTypedRuleContext(HexContext,i);
    }
};

OddHexRowContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterOddHexRow(this);
	}
};

OddHexRowContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitOddHexRow(this);
	}
};




jsettlersParser.OddHexRowContext = OddHexRowContext;

jsettlersParser.prototype.oddHexRow = function() {

    var localctx = new OddHexRowContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, jsettlersParser.RULE_oddHexRow);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 532; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 530;
            this.match(jsettlersParser.SPACE);
            this.state = 531;
            this.hex();
            this.state = 534; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===jsettlersParser.SPACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LocationSetupContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_locationSetup;
    return this;
}

LocationSetupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LocationSetupContext.prototype.constructor = LocationSetupContext;

LocationSetupContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.NL);
    } else {
        return this.getToken(jsettlersParser.NL, i);
    }
};


LocationSetupContext.prototype.INDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.INDENT);
    } else {
        return this.getToken(jsettlersParser.INDENT, i);
    }
};


LocationSetupContext.prototype.locationRow = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LocationRowContext);
    } else {
        return this.getTypedRuleContext(LocationRowContext,i);
    }
};

LocationSetupContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterLocationSetup(this);
	}
};

LocationSetupContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitLocationSetup(this);
	}
};




jsettlersParser.LocationSetupContext = LocationSetupContext;

jsettlersParser.prototype.locationSetup = function() {

    var localctx = new LocationSetupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, jsettlersParser.RULE_locationSetup);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 536;
        this.match(jsettlersParser.T__24);
        this.state = 537;
        this.match(jsettlersParser.NL);
        this.state = 546;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===jsettlersParser.INDENT) {
            this.state = 538;
            this.match(jsettlersParser.INDENT);
            this.state = 539;
            this.match(jsettlersParser.INDENT);
            this.state = 540;
            this.match(jsettlersParser.INDENT);
            this.state = 541;
            this.locationRow();
            this.state = 542;
            this.match(jsettlersParser.NL);
            this.state = 548;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LocationRowContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_locationRow;
    return this;
}

LocationRowContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LocationRowContext.prototype.constructor = LocationRowContext;

LocationRowContext.prototype.evenLocationRow = function() {
    return this.getTypedRuleContext(EvenLocationRowContext,0);
};

LocationRowContext.prototype.oddLocationRow = function() {
    return this.getTypedRuleContext(OddLocationRowContext,0);
};

LocationRowContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterLocationRow(this);
	}
};

LocationRowContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitLocationRow(this);
	}
};




jsettlersParser.LocationRowContext = LocationRowContext;

jsettlersParser.prototype.locationRow = function() {

    var localctx = new LocationRowContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, jsettlersParser.RULE_locationRow);
    try {
        this.state = 551;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case jsettlersParser.SPACE:
            this.enterOuterAlt(localctx, 1);
            this.state = 549;
            this.evenLocationRow();
            break;
        case jsettlersParser.T__25:
        case jsettlersParser.NUMBER:
            this.enterOuterAlt(localctx, 2);
            this.state = 550;
            this.oddLocationRow();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NoLocationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_noLocation;
    return this;
}

NoLocationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NoLocationContext.prototype.constructor = NoLocationContext;


NoLocationContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterNoLocation(this);
	}
};

NoLocationContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitNoLocation(this);
	}
};




jsettlersParser.NoLocationContext = NoLocationContext;

jsettlersParser.prototype.noLocation = function() {

    var localctx = new NoLocationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, jsettlersParser.RULE_noLocation);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 553;
        this.match(jsettlersParser.T__25);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LocationAssignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_locationAssignment;
    return this;
}

LocationAssignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LocationAssignmentContext.prototype.constructor = LocationAssignmentContext;

LocationAssignmentContext.prototype.NUMBER = function() {
    return this.getToken(jsettlersParser.NUMBER, 0);
};

LocationAssignmentContext.prototype.noLocation = function() {
    return this.getTypedRuleContext(NoLocationContext,0);
};

LocationAssignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterLocationAssignment(this);
	}
};

LocationAssignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitLocationAssignment(this);
	}
};




jsettlersParser.LocationAssignmentContext = LocationAssignmentContext;

jsettlersParser.prototype.locationAssignment = function() {

    var localctx = new LocationAssignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, jsettlersParser.RULE_locationAssignment);
    try {
        this.state = 557;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case jsettlersParser.NUMBER:
            this.enterOuterAlt(localctx, 1);
            this.state = 555;
            this.match(jsettlersParser.NUMBER);
            break;
        case jsettlersParser.T__25:
            this.enterOuterAlt(localctx, 2);
            this.state = 556;
            this.noLocation();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EvenLocationRowContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_evenLocationRow;
    return this;
}

EvenLocationRowContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EvenLocationRowContext.prototype.constructor = EvenLocationRowContext;

EvenLocationRowContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.SPACE);
    } else {
        return this.getToken(jsettlersParser.SPACE, i);
    }
};


EvenLocationRowContext.prototype.locationAssignment = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LocationAssignmentContext);
    } else {
        return this.getTypedRuleContext(LocationAssignmentContext,i);
    }
};

EvenLocationRowContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterEvenLocationRow(this);
	}
};

EvenLocationRowContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitEvenLocationRow(this);
	}
};




jsettlersParser.EvenLocationRowContext = EvenLocationRowContext;

jsettlersParser.prototype.evenLocationRow = function() {

    var localctx = new EvenLocationRowContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, jsettlersParser.RULE_evenLocationRow);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 559;
        this.match(jsettlersParser.SPACE);
        this.state = 560;
        this.match(jsettlersParser.SPACE);
        this.state = 571; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 561;
            this.locationAssignment();
            this.state = 563;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
            if(la_===1) {
                this.state = 562;
                this.match(jsettlersParser.SPACE);

            }
            this.state = 566;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
            if(la_===1) {
                this.state = 565;
                this.match(jsettlersParser.SPACE);

            }
            this.state = 569;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===jsettlersParser.SPACE) {
                this.state = 568;
                this.match(jsettlersParser.SPACE);
            }

            this.state = 573; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===jsettlersParser.T__25 || _la===jsettlersParser.NUMBER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OddLocationRowContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_oddLocationRow;
    return this;
}

OddLocationRowContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OddLocationRowContext.prototype.constructor = OddLocationRowContext;

OddLocationRowContext.prototype.locationAssignment = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LocationAssignmentContext);
    } else {
        return this.getTypedRuleContext(LocationAssignmentContext,i);
    }
};

OddLocationRowContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.SPACE);
    } else {
        return this.getToken(jsettlersParser.SPACE, i);
    }
};


OddLocationRowContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterOddLocationRow(this);
	}
};

OddLocationRowContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitOddLocationRow(this);
	}
};




jsettlersParser.OddLocationRowContext = OddLocationRowContext;

jsettlersParser.prototype.oddLocationRow = function() {

    var localctx = new OddLocationRowContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, jsettlersParser.RULE_oddLocationRow);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 575;
        this.locationAssignment();
        this.state = 586; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 577;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
            if(la_===1) {
                this.state = 576;
                this.match(jsettlersParser.SPACE);

            }
            this.state = 580;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
            if(la_===1) {
                this.state = 579;
                this.match(jsettlersParser.SPACE);

            }
            this.state = 583;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===jsettlersParser.SPACE) {
                this.state = 582;
                this.match(jsettlersParser.SPACE);
            }

            this.state = 585;
            this.locationAssignment();
            this.state = 588; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===jsettlersParser.T__25 || _la===jsettlersParser.NUMBER || _la===jsettlersParser.SPACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ChitSetupContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_chitSetup;
    return this;
}

ChitSetupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ChitSetupContext.prototype.constructor = ChitSetupContext;

ChitSetupContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.NL);
    } else {
        return this.getToken(jsettlersParser.NL, i);
    }
};


ChitSetupContext.prototype.INDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.INDENT);
    } else {
        return this.getToken(jsettlersParser.INDENT, i);
    }
};


ChitSetupContext.prototype.chitRow = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ChitRowContext);
    } else {
        return this.getTypedRuleContext(ChitRowContext,i);
    }
};

ChitSetupContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterChitSetup(this);
	}
};

ChitSetupContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitChitSetup(this);
	}
};




jsettlersParser.ChitSetupContext = ChitSetupContext;

jsettlersParser.prototype.chitSetup = function() {

    var localctx = new ChitSetupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, jsettlersParser.RULE_chitSetup);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 590;
        this.match(jsettlersParser.T__26);
        this.state = 591;
        this.match(jsettlersParser.NL);
        this.state = 600;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===jsettlersParser.INDENT) {
            this.state = 592;
            this.match(jsettlersParser.INDENT);
            this.state = 593;
            this.match(jsettlersParser.INDENT);
            this.state = 594;
            this.match(jsettlersParser.INDENT);
            this.state = 595;
            this.chitRow();
            this.state = 596;
            this.match(jsettlersParser.NL);
            this.state = 602;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ChitRowContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_chitRow;
    return this;
}

ChitRowContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ChitRowContext.prototype.constructor = ChitRowContext;

ChitRowContext.prototype.evenChitRow = function() {
    return this.getTypedRuleContext(EvenChitRowContext,0);
};

ChitRowContext.prototype.oddChitRow = function() {
    return this.getTypedRuleContext(OddChitRowContext,0);
};

ChitRowContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterChitRow(this);
	}
};

ChitRowContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitChitRow(this);
	}
};




jsettlersParser.ChitRowContext = ChitRowContext;

jsettlersParser.prototype.chitRow = function() {

    var localctx = new ChitRowContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, jsettlersParser.RULE_chitRow);
    try {
        this.state = 605;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case jsettlersParser.SPACE:
            this.enterOuterAlt(localctx, 1);
            this.state = 603;
            this.evenChitRow();
            break;
        case jsettlersParser.T__25:
        case jsettlersParser.NUMBER:
        case jsettlersParser.U_BAG:
            this.enterOuterAlt(localctx, 2);
            this.state = 604;
            this.oddChitRow();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NoChitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_noChit;
    return this;
}

NoChitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NoChitContext.prototype.constructor = NoChitContext;


NoChitContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterNoChit(this);
	}
};

NoChitContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitNoChit(this);
	}
};




jsettlersParser.NoChitContext = NoChitContext;

jsettlersParser.prototype.noChit = function() {

    var localctx = new NoChitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, jsettlersParser.RULE_noChit);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 607;
        this.match(jsettlersParser.T__25);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ChitFromBagContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_chitFromBag;
    return this;
}

ChitFromBagContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ChitFromBagContext.prototype.constructor = ChitFromBagContext;

ChitFromBagContext.prototype.U_BAG = function() {
    return this.getToken(jsettlersParser.U_BAG, 0);
};

ChitFromBagContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterChitFromBag(this);
	}
};

ChitFromBagContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitChitFromBag(this);
	}
};




jsettlersParser.ChitFromBagContext = ChitFromBagContext;

jsettlersParser.prototype.chitFromBag = function() {

    var localctx = new ChitFromBagContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, jsettlersParser.RULE_chitFromBag);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 609;
        this.match(jsettlersParser.U_BAG);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ChitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_chit;
    return this;
}

ChitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ChitContext.prototype.constructor = ChitContext;

ChitContext.prototype.NUMBER = function() {
    return this.getToken(jsettlersParser.NUMBER, 0);
};

ChitContext.prototype.noChit = function() {
    return this.getTypedRuleContext(NoChitContext,0);
};

ChitContext.prototype.chitFromBag = function() {
    return this.getTypedRuleContext(ChitFromBagContext,0);
};

ChitContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterChit(this);
	}
};

ChitContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitChit(this);
	}
};




jsettlersParser.ChitContext = ChitContext;

jsettlersParser.prototype.chit = function() {

    var localctx = new ChitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, jsettlersParser.RULE_chit);
    try {
        this.state = 614;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case jsettlersParser.NUMBER:
            this.enterOuterAlt(localctx, 1);
            this.state = 611;
            this.match(jsettlersParser.NUMBER);
            break;
        case jsettlersParser.T__25:
            this.enterOuterAlt(localctx, 2);
            this.state = 612;
            this.noChit();
            break;
        case jsettlersParser.U_BAG:
            this.enterOuterAlt(localctx, 3);
            this.state = 613;
            this.chitFromBag();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EvenChitRowContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_evenChitRow;
    return this;
}

EvenChitRowContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EvenChitRowContext.prototype.constructor = EvenChitRowContext;

EvenChitRowContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.SPACE);
    } else {
        return this.getToken(jsettlersParser.SPACE, i);
    }
};


EvenChitRowContext.prototype.chit = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ChitContext);
    } else {
        return this.getTypedRuleContext(ChitContext,i);
    }
};

EvenChitRowContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterEvenChitRow(this);
	}
};

EvenChitRowContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitEvenChitRow(this);
	}
};




jsettlersParser.EvenChitRowContext = EvenChitRowContext;

jsettlersParser.prototype.evenChitRow = function() {

    var localctx = new EvenChitRowContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, jsettlersParser.RULE_evenChitRow);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 616;
        this.match(jsettlersParser.SPACE);
        this.state = 617;
        this.match(jsettlersParser.SPACE);
        this.state = 628; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 618;
            this.chit();
            this.state = 620;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
            if(la_===1) {
                this.state = 619;
                this.match(jsettlersParser.SPACE);

            }
            this.state = 623;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
            if(la_===1) {
                this.state = 622;
                this.match(jsettlersParser.SPACE);

            }
            this.state = 626;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===jsettlersParser.SPACE) {
                this.state = 625;
                this.match(jsettlersParser.SPACE);
            }

            this.state = 630; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===jsettlersParser.T__25 || _la===jsettlersParser.NUMBER || _la===jsettlersParser.U_BAG);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OddChitRowContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_oddChitRow;
    return this;
}

OddChitRowContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OddChitRowContext.prototype.constructor = OddChitRowContext;

OddChitRowContext.prototype.chit = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ChitContext);
    } else {
        return this.getTypedRuleContext(ChitContext,i);
    }
};

OddChitRowContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.SPACE);
    } else {
        return this.getToken(jsettlersParser.SPACE, i);
    }
};


OddChitRowContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterOddChitRow(this);
	}
};

OddChitRowContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitOddChitRow(this);
	}
};




jsettlersParser.OddChitRowContext = OddChitRowContext;

jsettlersParser.prototype.oddChitRow = function() {

    var localctx = new OddChitRowContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, jsettlersParser.RULE_oddChitRow);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 632;
        this.chit();
        this.state = 643; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 634;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
            if(la_===1) {
                this.state = 633;
                this.match(jsettlersParser.SPACE);

            }
            this.state = 637;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
            if(la_===1) {
                this.state = 636;
                this.match(jsettlersParser.SPACE);

            }
            this.state = 640;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===jsettlersParser.SPACE) {
                this.state = 639;
                this.match(jsettlersParser.SPACE);
            }

            this.state = 642;
            this.chit();
            this.state = 645; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===jsettlersParser.T__25 || ((((_la - 153)) & ~0x1f) == 0 && ((1 << (_la - 153)) & ((1 << (jsettlersParser.NUMBER - 153)) | (1 << (jsettlersParser.SPACE - 153)) | (1 << (jsettlersParser.U_BAG - 153)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PortsSetupContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_portsSetup;
    return this;
}

PortsSetupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PortsSetupContext.prototype.constructor = PortsSetupContext;

PortsSetupContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.NL);
    } else {
        return this.getToken(jsettlersParser.NL, i);
    }
};


PortsSetupContext.prototype.INDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.INDENT);
    } else {
        return this.getToken(jsettlersParser.INDENT, i);
    }
};


PortsSetupContext.prototype.portAtEdge = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PortAtEdgeContext);
    } else {
        return this.getTypedRuleContext(PortAtEdgeContext,i);
    }
};

PortsSetupContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterPortsSetup(this);
	}
};

PortsSetupContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitPortsSetup(this);
	}
};




jsettlersParser.PortsSetupContext = PortsSetupContext;

jsettlersParser.prototype.portsSetup = function() {

    var localctx = new PortsSetupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, jsettlersParser.RULE_portsSetup);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 647;
        this.match(jsettlersParser.T__27);
        this.state = 648;
        this.match(jsettlersParser.NL);
        this.state = 657;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===jsettlersParser.INDENT) {
            this.state = 649;
            this.match(jsettlersParser.INDENT);
            this.state = 650;
            this.match(jsettlersParser.INDENT);
            this.state = 651;
            this.match(jsettlersParser.INDENT);
            this.state = 652;
            this.portAtEdge();
            this.state = 653;
            this.match(jsettlersParser.NL);
            this.state = 659;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PortAtEdgeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_portAtEdge;
    return this;
}

PortAtEdgeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PortAtEdgeContext.prototype.constructor = PortAtEdgeContext;

PortAtEdgeContext.prototype.port = function() {
    return this.getTypedRuleContext(PortContext,0);
};

PortAtEdgeContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.SPACE);
    } else {
        return this.getToken(jsettlersParser.SPACE, i);
    }
};


PortAtEdgeContext.prototype.at = function() {
    return this.getTypedRuleContext(AtContext,0);
};

PortAtEdgeContext.prototype.edge = function() {
    return this.getTypedRuleContext(EdgeContext,0);
};

PortAtEdgeContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterPortAtEdge(this);
	}
};

PortAtEdgeContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitPortAtEdge(this);
	}
};




jsettlersParser.PortAtEdgeContext = PortAtEdgeContext;

jsettlersParser.prototype.portAtEdge = function() {

    var localctx = new PortAtEdgeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, jsettlersParser.RULE_portAtEdge);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 660;
        this.port();
        this.state = 661;
        this.match(jsettlersParser.SPACE);
        this.state = 662;
        this.at();
        this.state = 663;
        this.match(jsettlersParser.SPACE);
        this.state = 664;
        this.edge();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PlayersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_players;
    return this;
}

PlayersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PlayersContext.prototype.constructor = PlayersContext;

PlayersContext.prototype.INDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.INDENT);
    } else {
        return this.getToken(jsettlersParser.INDENT, i);
    }
};


PlayersContext.prototype.player = function() {
    return this.getTypedRuleContext(PlayerContext,0);
};

PlayersContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.NL);
    } else {
        return this.getToken(jsettlersParser.NL, i);
    }
};


PlayersContext.prototype.setupPlayerOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SetupPlayerOptionContext);
    } else {
        return this.getTypedRuleContext(SetupPlayerOptionContext,i);
    }
};

PlayersContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterPlayers(this);
	}
};

PlayersContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitPlayers(this);
	}
};




jsettlersParser.PlayersContext = PlayersContext;

jsettlersParser.prototype.players = function() {

    var localctx = new PlayersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, jsettlersParser.RULE_players);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 666;
        this.match(jsettlersParser.INDENT);
        this.state = 667;
        this.player();
        this.state = 668;
        this.match(jsettlersParser.NL);
        this.state = 676;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===jsettlersParser.INDENT) {
            this.state = 669;
            this.match(jsettlersParser.INDENT);
            this.state = 670;
            this.match(jsettlersParser.INDENT);
            this.state = 671;
            this.setupPlayerOption();
            this.state = 672;
            this.match(jsettlersParser.NL);
            this.state = 678;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PlayerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_player;
    return this;
}

PlayerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PlayerContext.prototype.constructor = PlayerContext;

PlayerContext.prototype.NUMBER = function() {
    return this.getToken(jsettlersParser.NUMBER, 0);
};

PlayerContext.prototype.server = function() {
    return this.getTypedRuleContext(ServerContext,0);
};

PlayerContext.prototype.client = function() {
    return this.getTypedRuleContext(ClientContext,0);
};

PlayerContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterPlayer(this);
	}
};

PlayerContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitPlayer(this);
	}
};




jsettlersParser.PlayerContext = PlayerContext;

jsettlersParser.prototype.player = function() {

    var localctx = new PlayerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, jsettlersParser.RULE_player);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 681;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case jsettlersParser.T__30:
        case jsettlersParser.T__31:
        	this.state = 679;
        	this.server();
        	break;
        case jsettlersParser.T__33:
        case jsettlersParser.T__34:
        	this.state = 680;
        	this.client();
        	break;
        case jsettlersParser.T__28:
        case jsettlersParser.T__29:
        	break;
        default:
        	break;
        }
        this.state = 683;
        _la = this._input.LA(1);
        if(!(_la===jsettlersParser.T__28 || _la===jsettlersParser.T__29)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 684;
        this.match(jsettlersParser.NUMBER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ServerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_server;
    return this;
}

ServerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ServerContext.prototype.constructor = ServerContext;


ServerContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterServer(this);
	}
};

ServerContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitServer(this);
	}
};




jsettlersParser.ServerContext = ServerContext;

jsettlersParser.prototype.server = function() {

    var localctx = new ServerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, jsettlersParser.RULE_server);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 686;
        _la = this._input.LA(1);
        if(!(_la===jsettlersParser.T__30 || _la===jsettlersParser.T__31)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 687;
        this.match(jsettlersParser.T__32);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClientContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_client;
    return this;
}

ClientContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClientContext.prototype.constructor = ClientContext;


ClientContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterClient(this);
	}
};

ClientContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitClient(this);
	}
};




jsettlersParser.ClientContext = ClientContext;

jsettlersParser.prototype.client = function() {

    var localctx = new ClientContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, jsettlersParser.RULE_client);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 689;
        _la = this._input.LA(1);
        if(!(_la===jsettlersParser.T__33 || _la===jsettlersParser.T__34)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 690;
        this.match(jsettlersParser.T__32);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SetupPlayerOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_setupPlayerOption;
    return this;
}

SetupPlayerOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetupPlayerOptionContext.prototype.constructor = SetupPlayerOptionContext;

SetupPlayerOptionContext.prototype.hand = function() {
    return this.getTypedRuleContext(HandContext,0);
};

SetupPlayerOptionContext.prototype.stock = function() {
    return this.getTypedRuleContext(StockContext,0);
};

SetupPlayerOptionContext.prototype.devCards = function() {
    return this.getTypedRuleContext(DevCardsContext,0);
};

SetupPlayerOptionContext.prototype.ports = function() {
    return this.getTypedRuleContext(PortsContext,0);
};

SetupPlayerOptionContext.prototype.victoryPoints = function() {
    return this.getTypedRuleContext(VictoryPointsContext,0);
};

SetupPlayerOptionContext.prototype.towns = function() {
    return this.getTypedRuleContext(TownsContext,0);
};

SetupPlayerOptionContext.prototype.cities = function() {
    return this.getTypedRuleContext(CitiesContext,0);
};

SetupPlayerOptionContext.prototype.roads = function() {
    return this.getTypedRuleContext(RoadsContext,0);
};

SetupPlayerOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterSetupPlayerOption(this);
	}
};

SetupPlayerOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitSetupPlayerOption(this);
	}
};




jsettlersParser.SetupPlayerOptionContext = SetupPlayerOptionContext;

jsettlersParser.prototype.setupPlayerOption = function() {

    var localctx = new SetupPlayerOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, jsettlersParser.RULE_setupPlayerOption);
    try {
        this.state = 700;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case jsettlersParser.T__35:
            this.enterOuterAlt(localctx, 1);
            this.state = 692;
            this.hand();
            break;
        case jsettlersParser.T__36:
            this.enterOuterAlt(localctx, 2);
            this.state = 693;
            this.stock();
            break;
        case jsettlersParser.T__37:
            this.enterOuterAlt(localctx, 3);
            this.state = 694;
            this.devCards();
            break;
        case jsettlersParser.T__27:
            this.enterOuterAlt(localctx, 4);
            this.state = 695;
            this.ports();
            break;
        case jsettlersParser.T__38:
            this.enterOuterAlt(localctx, 5);
            this.state = 696;
            this.victoryPoints();
            break;
        case jsettlersParser.T__39:
            this.enterOuterAlt(localctx, 6);
            this.state = 697;
            this.towns();
            break;
        case jsettlersParser.T__40:
            this.enterOuterAlt(localctx, 7);
            this.state = 698;
            this.cities();
            break;
        case jsettlersParser.T__41:
            this.enterOuterAlt(localctx, 8);
            this.state = 699;
            this.roads();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HandContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_hand;
    return this;
}

HandContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HandContext.prototype.constructor = HandContext;

HandContext.prototype.SPACE = function() {
    return this.getToken(jsettlersParser.SPACE, 0);
};

HandContext.prototype.resourceSet = function() {
    return this.getTypedRuleContext(ResourceSetContext,0);
};

HandContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterHand(this);
	}
};

HandContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitHand(this);
	}
};




jsettlersParser.HandContext = HandContext;

jsettlersParser.prototype.hand = function() {

    var localctx = new HandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, jsettlersParser.RULE_hand);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 702;
        this.match(jsettlersParser.T__35);
        this.state = 703;
        this.match(jsettlersParser.SPACE);
        this.state = 704;
        this.resourceSet();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_stock;
    return this;
}

StockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StockContext.prototype.constructor = StockContext;

StockContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.SPACE);
    } else {
        return this.getToken(jsettlersParser.SPACE, i);
    }
};


StockContext.prototype.stockItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StockItemContext);
    } else {
        return this.getTypedRuleContext(StockItemContext,i);
    }
};

StockContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterStock(this);
	}
};

StockContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitStock(this);
	}
};




jsettlersParser.StockContext = StockContext;

jsettlersParser.prototype.stock = function() {

    var localctx = new StockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, jsettlersParser.RULE_stock);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 706;
        this.match(jsettlersParser.T__36);
        this.state = 707;
        this.match(jsettlersParser.SPACE);
        this.state = 708;
        this.match(jsettlersParser.T__12);
        this.state = 715;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (jsettlersParser.T__104 - 105)) | (1 << (jsettlersParser.T__105 - 105)) | (1 << (jsettlersParser.T__106 - 105)) | (1 << (jsettlersParser.T__107 - 105)) | (1 << (jsettlersParser.T__108 - 105)) | (1 << (jsettlersParser.T__109 - 105)) | (1 << (jsettlersParser.T__110 - 105)) | (1 << (jsettlersParser.T__111 - 105)))) !== 0)) {
            this.state = 709;
            this.stockItem();
            this.state = 711;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===jsettlersParser.SPACE) {
                this.state = 710;
                this.match(jsettlersParser.SPACE);
            }

            this.state = 717;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 718;
        this.match(jsettlersParser.T__13);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StockItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_stockItem;
    return this;
}

StockItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StockItemContext.prototype.constructor = StockItemContext;

StockItemContext.prototype.piece = function() {
    return this.getTypedRuleContext(PieceContext,0);
};

StockItemContext.prototype.times = function() {
    return this.getTypedRuleContext(TimesContext,0);
};

StockItemContext.prototype.NUMBER = function() {
    return this.getToken(jsettlersParser.NUMBER, 0);
};

StockItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterStockItem(this);
	}
};

StockItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitStockItem(this);
	}
};




jsettlersParser.StockItemContext = StockItemContext;

jsettlersParser.prototype.stockItem = function() {

    var localctx = new StockItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, jsettlersParser.RULE_stockItem);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 720;
        this.piece();
        this.state = 721;
        this.times();
        this.state = 722;
        this.match(jsettlersParser.NUMBER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DevCardsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_devCards;
    return this;
}

DevCardsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DevCardsContext.prototype.constructor = DevCardsContext;

DevCardsContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.SPACE);
    } else {
        return this.getToken(jsettlersParser.SPACE, i);
    }
};


DevCardsContext.prototype.devCard = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DevCardContext);
    } else {
        return this.getTypedRuleContext(DevCardContext,i);
    }
};

DevCardsContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterDevCards(this);
	}
};

DevCardsContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitDevCards(this);
	}
};




jsettlersParser.DevCardsContext = DevCardsContext;

jsettlersParser.prototype.devCards = function() {

    var localctx = new DevCardsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, jsettlersParser.RULE_devCards);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 724;
        this.match(jsettlersParser.T__37);
        this.state = 725;
        this.match(jsettlersParser.SPACE);
        this.state = 726;
        this.match(jsettlersParser.T__12);
        this.state = 733;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===jsettlersParser.T__31 || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (jsettlersParser.T__112 - 113)) | (1 << (jsettlersParser.T__113 - 113)) | (1 << (jsettlersParser.T__114 - 113)) | (1 << (jsettlersParser.T__115 - 113)) | (1 << (jsettlersParser.T__116 - 113)) | (1 << (jsettlersParser.T__117 - 113)) | (1 << (jsettlersParser.T__118 - 113)) | (1 << (jsettlersParser.T__119 - 113)) | (1 << (jsettlersParser.T__120 - 113)))) !== 0)) {
            this.state = 727;
            this.devCard();
            this.state = 729;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===jsettlersParser.SPACE) {
                this.state = 728;
                this.match(jsettlersParser.SPACE);
            }

            this.state = 735;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 736;
        this.match(jsettlersParser.T__13);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PortsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_ports;
    return this;
}

PortsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PortsContext.prototype.constructor = PortsContext;

PortsContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.SPACE);
    } else {
        return this.getToken(jsettlersParser.SPACE, i);
    }
};


PortsContext.prototype.port = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PortContext);
    } else {
        return this.getTypedRuleContext(PortContext,i);
    }
};

PortsContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterPorts(this);
	}
};

PortsContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitPorts(this);
	}
};




jsettlersParser.PortsContext = PortsContext;

jsettlersParser.prototype.ports = function() {

    var localctx = new PortsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, jsettlersParser.RULE_ports);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 738;
        this.match(jsettlersParser.T__27);
        this.state = 739;
        this.match(jsettlersParser.SPACE);
        this.state = 740;
        this.match(jsettlersParser.T__12);
        this.state = 747;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 122)) & ~0x1f) == 0 && ((1 << (_la - 122)) & ((1 << (jsettlersParser.T__121 - 122)) | (1 << (jsettlersParser.T__122 - 122)) | (1 << (jsettlersParser.T__124 - 122)) | (1 << (jsettlersParser.T__126 - 122)) | (1 << (jsettlersParser.T__127 - 122)) | (1 << (jsettlersParser.T__128 - 122)) | (1 << (jsettlersParser.T__129 - 122)) | (1 << (jsettlersParser.T__130 - 122)) | (1 << (jsettlersParser.T__131 - 122)))) !== 0) || _la===jsettlersParser.U_PORT) {
            this.state = 741;
            this.port();
            this.state = 743;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===jsettlersParser.SPACE) {
                this.state = 742;
                this.match(jsettlersParser.SPACE);
            }

            this.state = 749;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 750;
        this.match(jsettlersParser.T__13);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VictoryPointsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_victoryPoints;
    return this;
}

VictoryPointsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VictoryPointsContext.prototype.constructor = VictoryPointsContext;

VictoryPointsContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.SPACE);
    } else {
        return this.getToken(jsettlersParser.SPACE, i);
    }
};


VictoryPointsContext.prototype.victoryPointt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VictoryPointtContext);
    } else {
        return this.getTypedRuleContext(VictoryPointtContext,i);
    }
};

VictoryPointsContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterVictoryPoints(this);
	}
};

VictoryPointsContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitVictoryPoints(this);
	}
};




jsettlersParser.VictoryPointsContext = VictoryPointsContext;

jsettlersParser.prototype.victoryPoints = function() {

    var localctx = new VictoryPointsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, jsettlersParser.RULE_victoryPoints);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 752;
        this.match(jsettlersParser.T__38);
        this.state = 753;
        this.match(jsettlersParser.SPACE);
        this.state = 754;
        this.match(jsettlersParser.T__12);
        this.state = 761;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (jsettlersParser.T__104 - 105)) | (1 << (jsettlersParser.T__105 - 105)) | (1 << (jsettlersParser.T__106 - 105)) | (1 << (jsettlersParser.T__107 - 105)) | (1 << (jsettlersParser.T__117 - 105)) | (1 << (jsettlersParser.T__118 - 105)))) !== 0) || ((((_la - 147)) & ~0x1f) == 0 && ((1 << (_la - 147)) & ((1 << (jsettlersParser.T__146 - 147)) | (1 << (jsettlersParser.T__147 - 147)) | (1 << (jsettlersParser.T__148 - 147)) | (1 << (jsettlersParser.T__149 - 147)))) !== 0)) {
            this.state = 755;
            this.victoryPointt();
            this.state = 757;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===jsettlersParser.SPACE) {
                this.state = 756;
                this.match(jsettlersParser.SPACE);
            }

            this.state = 763;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 764;
        this.match(jsettlersParser.T__13);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TownsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_towns;
    return this;
}

TownsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TownsContext.prototype.constructor = TownsContext;

TownsContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.SPACE);
    } else {
        return this.getToken(jsettlersParser.SPACE, i);
    }
};


TownsContext.prototype.node = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NodeContext);
    } else {
        return this.getTypedRuleContext(NodeContext,i);
    }
};

TownsContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterTowns(this);
	}
};

TownsContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitTowns(this);
	}
};




jsettlersParser.TownsContext = TownsContext;

jsettlersParser.prototype.towns = function() {

    var localctx = new TownsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, jsettlersParser.RULE_towns);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 766;
        this.match(jsettlersParser.T__39);
        this.state = 767;
        this.match(jsettlersParser.SPACE);
        this.state = 768;
        this.match(jsettlersParser.T__12);
        this.state = 775;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===jsettlersParser.NUMBER) {
            this.state = 769;
            this.node();
            this.state = 771;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===jsettlersParser.SPACE) {
                this.state = 770;
                this.match(jsettlersParser.SPACE);
            }

            this.state = 777;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 778;
        this.match(jsettlersParser.T__13);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CitiesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_cities;
    return this;
}

CitiesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CitiesContext.prototype.constructor = CitiesContext;

CitiesContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.SPACE);
    } else {
        return this.getToken(jsettlersParser.SPACE, i);
    }
};


CitiesContext.prototype.node = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NodeContext);
    } else {
        return this.getTypedRuleContext(NodeContext,i);
    }
};

CitiesContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterCities(this);
	}
};

CitiesContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitCities(this);
	}
};




jsettlersParser.CitiesContext = CitiesContext;

jsettlersParser.prototype.cities = function() {

    var localctx = new CitiesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, jsettlersParser.RULE_cities);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 780;
        this.match(jsettlersParser.T__40);
        this.state = 781;
        this.match(jsettlersParser.SPACE);
        this.state = 782;
        this.match(jsettlersParser.T__12);
        this.state = 789;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===jsettlersParser.NUMBER) {
            this.state = 783;
            this.node();
            this.state = 785;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===jsettlersParser.SPACE) {
                this.state = 784;
                this.match(jsettlersParser.SPACE);
            }

            this.state = 791;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 792;
        this.match(jsettlersParser.T__13);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RoadsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_roads;
    return this;
}

RoadsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RoadsContext.prototype.constructor = RoadsContext;

RoadsContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.SPACE);
    } else {
        return this.getToken(jsettlersParser.SPACE, i);
    }
};


RoadsContext.prototype.edge = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EdgeContext);
    } else {
        return this.getTypedRuleContext(EdgeContext,i);
    }
};

RoadsContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterRoads(this);
	}
};

RoadsContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitRoads(this);
	}
};




jsettlersParser.RoadsContext = RoadsContext;

jsettlersParser.prototype.roads = function() {

    var localctx = new RoadsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, jsettlersParser.RULE_roads);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 794;
        this.match(jsettlersParser.T__41);
        this.state = 795;
        this.match(jsettlersParser.SPACE);
        this.state = 796;
        this.match(jsettlersParser.T__12);
        this.state = 803;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===jsettlersParser.NUMBER) {
            this.state = 797;
            this.edge();
            this.state = 799;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===jsettlersParser.SPACE) {
                this.state = 798;
                this.match(jsettlersParser.SPACE);
            }

            this.state = 805;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 806;
        this.match(jsettlersParser.T__13);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PlacementItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_placementItem;
    return this;
}

PlacementItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PlacementItemContext.prototype.constructor = PlacementItemContext;

PlacementItemContext.prototype.buildAction = function() {
    return this.getTypedRuleContext(BuildActionContext,0);
};

PlacementItemContext.prototype.checkItem = function() {
    return this.getTypedRuleContext(CheckItemContext,0);
};

PlacementItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterPlacementItem(this);
	}
};

PlacementItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitPlacementItem(this);
	}
};




jsettlersParser.PlacementItemContext = PlacementItemContext;

jsettlersParser.prototype.placementItem = function() {

    var localctx = new PlacementItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, jsettlersParser.RULE_placementItem);
    try {
        this.state = 810;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case jsettlersParser.T__28:
        case jsettlersParser.T__29:
        case jsettlersParser.T__30:
        case jsettlersParser.T__31:
        case jsettlersParser.T__33:
        case jsettlersParser.T__34:
            this.enterOuterAlt(localctx, 1);
            this.state = 808;
            this.buildAction();
            break;
        case jsettlersParser.INDENT:
            this.enterOuterAlt(localctx, 2);
            this.state = 809;
            this.checkItem();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PlacementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_placements;
    return this;
}

PlacementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PlacementsContext.prototype.constructor = PlacementsContext;

PlacementsContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.NL);
    } else {
        return this.getToken(jsettlersParser.NL, i);
    }
};


PlacementsContext.prototype.INDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.INDENT);
    } else {
        return this.getToken(jsettlersParser.INDENT, i);
    }
};


PlacementsContext.prototype.placementItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PlacementItemContext);
    } else {
        return this.getTypedRuleContext(PlacementItemContext,i);
    }
};

PlacementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterPlacements(this);
	}
};

PlacementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitPlacements(this);
	}
};




jsettlersParser.PlacementsContext = PlacementsContext;

jsettlersParser.prototype.placements = function() {

    var localctx = new PlacementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, jsettlersParser.RULE_placements);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 812;
        this.match(jsettlersParser.T__42);
        this.state = 813;
        this.match(jsettlersParser.NL);
        this.state = 820;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===jsettlersParser.INDENT) {
            this.state = 814;
            this.match(jsettlersParser.INDENT);
            this.state = 815;
            this.placementItem();
            this.state = 816;
            this.match(jsettlersParser.NL);
            this.state = 822;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BuildActionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_buildAction;
    return this;
}

BuildActionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BuildActionContext.prototype.constructor = BuildActionContext;

BuildActionContext.prototype.buildCity = function() {
    return this.getTypedRuleContext(BuildCityContext,0);
};

BuildActionContext.prototype.buildShip = function() {
    return this.getTypedRuleContext(BuildShipContext,0);
};

BuildActionContext.prototype.buildRoad = function() {
    return this.getTypedRuleContext(BuildRoadContext,0);
};

BuildActionContext.prototype.buildTown = function() {
    return this.getTypedRuleContext(BuildTownContext,0);
};

BuildActionContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.SPACE);
    } else {
        return this.getToken(jsettlersParser.SPACE, i);
    }
};


BuildActionContext.prototype.resourceSet = function() {
    return this.getTypedRuleContext(ResourceSetContext,0);
};

BuildActionContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterBuildAction(this);
	}
};

BuildActionContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitBuildAction(this);
	}
};




jsettlersParser.BuildActionContext = BuildActionContext;

jsettlersParser.prototype.buildAction = function() {

    var localctx = new BuildActionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, jsettlersParser.RULE_buildAction);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 827;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
        switch(la_) {
        case 1:
            this.state = 823;
            this.buildCity();
            break;

        case 2:
            this.state = 824;
            this.buildShip();
            break;

        case 3:
            this.state = 825;
            this.buildRoad();
            break;

        case 4:
            this.state = 826;
            this.buildTown();
            break;

        }
        this.state = 833;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===jsettlersParser.SPACE) {
            this.state = 829;
            this.match(jsettlersParser.SPACE);
            this.state = 830;
            this.match(jsettlersParser.T__43);
            this.state = 831;
            this.match(jsettlersParser.SPACE);
            this.state = 832;
            this.resourceSet();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TurnsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_turns;
    return this;
}

TurnsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TurnsContext.prototype.constructor = TurnsContext;

TurnsContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.NL);
    } else {
        return this.getToken(jsettlersParser.NL, i);
    }
};


TurnsContext.prototype.INDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.INDENT);
    } else {
        return this.getToken(jsettlersParser.INDENT, i);
    }
};


TurnsContext.prototype.turn = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TurnContext);
    } else {
        return this.getTypedRuleContext(TurnContext,i);
    }
};

TurnsContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterTurns(this);
	}
};

TurnsContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitTurns(this);
	}
};




jsettlersParser.TurnsContext = TurnsContext;

jsettlersParser.prototype.turns = function() {

    var localctx = new TurnsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, jsettlersParser.RULE_turns);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 835;
        this.match(jsettlersParser.T__44);
        this.state = 836;
        this.match(jsettlersParser.NL);
        this.state = 841; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 837;
            this.match(jsettlersParser.INDENT);
            this.state = 838;
            this.turn();
            this.state = 839;
            this.match(jsettlersParser.NL);
            this.state = 843; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===jsettlersParser.INDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TurnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_turn;
    return this;
}

TurnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TurnContext.prototype.constructor = TurnContext;

TurnContext.prototype.SPACE = function() {
    return this.getToken(jsettlersParser.SPACE, 0);
};

TurnContext.prototype.NUMBER = function() {
    return this.getToken(jsettlersParser.NUMBER, 0);
};

TurnContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.NL);
    } else {
        return this.getToken(jsettlersParser.NL, i);
    }
};


TurnContext.prototype.INDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.INDENT);
    } else {
        return this.getToken(jsettlersParser.INDENT, i);
    }
};


TurnContext.prototype.turnItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TurnItemContext);
    } else {
        return this.getTypedRuleContext(TurnItemContext,i);
    }
};

TurnContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterTurn(this);
	}
};

TurnContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitTurn(this);
	}
};




jsettlersParser.TurnContext = TurnContext;

jsettlersParser.prototype.turn = function() {

    var localctx = new TurnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, jsettlersParser.RULE_turn);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 845;
        this.match(jsettlersParser.T__45);
        this.state = 846;
        this.match(jsettlersParser.SPACE);
        this.state = 847;
        this.match(jsettlersParser.NUMBER);
        this.state = 848;
        this.match(jsettlersParser.NL);
        this.state = 856;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===jsettlersParser.INDENT) {
            this.state = 849;
            this.match(jsettlersParser.INDENT);
            this.state = 850;
            this.match(jsettlersParser.INDENT);
            this.state = 851;
            this.turnItem();
            this.state = 852;
            this.match(jsettlersParser.NL);
            this.state = 858;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TurnItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_turnItem;
    return this;
}

TurnItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TurnItemContext.prototype.constructor = TurnItemContext;

TurnItemContext.prototype.action = function() {
    return this.getTypedRuleContext(ActionContext,0);
};

TurnItemContext.prototype.checkItem = function() {
    return this.getTypedRuleContext(CheckItemContext,0);
};

TurnItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterTurnItem(this);
	}
};

TurnItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitTurnItem(this);
	}
};




jsettlersParser.TurnItemContext = TurnItemContext;

jsettlersParser.prototype.turnItem = function() {

    var localctx = new TurnItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, jsettlersParser.RULE_turnItem);
    try {
        this.state = 861;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case jsettlersParser.T__28:
        case jsettlersParser.T__29:
        case jsettlersParser.T__30:
        case jsettlersParser.T__31:
        case jsettlersParser.T__33:
        case jsettlersParser.T__34:
            this.enterOuterAlt(localctx, 1);
            this.state = 859;
            this.action();
            break;
        case jsettlersParser.INDENT:
            this.enterOuterAlt(localctx, 2);
            this.state = 860;
            this.checkItem();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ActionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_action;
    return this;
}

ActionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ActionContext.prototype.constructor = ActionContext;

ActionContext.prototype.buildRoad = function() {
    return this.getTypedRuleContext(BuildRoadContext,0);
};

ActionContext.prototype.buildTown = function() {
    return this.getTypedRuleContext(BuildTownContext,0);
};

ActionContext.prototype.buildShip = function() {
    return this.getTypedRuleContext(BuildShipContext,0);
};

ActionContext.prototype.buildCity = function() {
    return this.getTypedRuleContext(BuildCityContext,0);
};

ActionContext.prototype.endTurn = function() {
    return this.getTypedRuleContext(EndTurnContext,0);
};

ActionContext.prototype.moveRobber = function() {
    return this.getTypedRuleContext(MoveRobberContext,0);
};

ActionContext.prototype.rollDice = function() {
    return this.getTypedRuleContext(RollDiceContext,0);
};

ActionContext.prototype.moveShip = function() {
    return this.getTypedRuleContext(MoveShipContext,0);
};

ActionContext.prototype.offerTrade = function() {
    return this.getTypedRuleContext(OfferTradeContext,0);
};

ActionContext.prototype.acceptOffer = function() {
    return this.getTypedRuleContext(AcceptOfferContext,0);
};

ActionContext.prototype.rejectOffer = function() {
    return this.getTypedRuleContext(RejectOfferContext,0);
};

ActionContext.prototype.counterOffer = function() {
    return this.getTypedRuleContext(CounterOfferContext,0);
};

ActionContext.prototype.tradePlayer = function() {
    return this.getTypedRuleContext(TradePlayerContext,0);
};

ActionContext.prototype.looseResources = function() {
    return this.getTypedRuleContext(LooseResourcesContext,0);
};

ActionContext.prototype.robPlayer = function() {
    return this.getTypedRuleContext(RobPlayerContext,0);
};

ActionContext.prototype.buyDevelopmentCard = function() {
    return this.getTypedRuleContext(BuyDevelopmentCardContext,0);
};

ActionContext.prototype.playDevelopmentCard = function() {
    return this.getTypedRuleContext(PlayDevelopmentCardContext,0);
};

ActionContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterAction(this);
	}
};

ActionContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitAction(this);
	}
};




jsettlersParser.ActionContext = ActionContext;

jsettlersParser.prototype.action = function() {

    var localctx = new ActionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, jsettlersParser.RULE_action);
    try {
        this.state = 880;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 863;
            this.buildRoad();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 864;
            this.buildTown();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 865;
            this.buildShip();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 866;
            this.buildCity();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 867;
            this.endTurn();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 868;
            this.moveRobber();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 869;
            this.rollDice();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 870;
            this.moveShip();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 871;
            this.offerTrade();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 872;
            this.acceptOffer();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 873;
            this.rejectOffer();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 874;
            this.counterOffer();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 875;
            this.tradePlayer();
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 876;
            this.looseResources();
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 877;
            this.robPlayer();
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 878;
            this.buyDevelopmentCard();
            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 879;
            this.playDevelopmentCard();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BuildContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_build;
    return this;
}

BuildContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BuildContext.prototype.constructor = BuildContext;

BuildContext.prototype.U_BUILD = function() {
    return this.getToken(jsettlersParser.U_BUILD, 0);
};

BuildContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterBuild(this);
	}
};

BuildContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitBuild(this);
	}
};




jsettlersParser.BuildContext = BuildContext;

jsettlersParser.prototype.build = function() {

    var localctx = new BuildContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, jsettlersParser.RULE_build);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 882;
        _la = this._input.LA(1);
        if(!(_la===jsettlersParser.T__46 || _la===jsettlersParser.T__47 || _la===jsettlersParser.U_BUILD)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EndTurnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_endTurn;
    return this;
}

EndTurnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EndTurnContext.prototype.constructor = EndTurnContext;

EndTurnContext.prototype.player = function() {
    return this.getTypedRuleContext(PlayerContext,0);
};

EndTurnContext.prototype.SPACE = function() {
    return this.getToken(jsettlersParser.SPACE, 0);
};

EndTurnContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterEndTurn(this);
	}
};

EndTurnContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitEndTurn(this);
	}
};




jsettlersParser.EndTurnContext = EndTurnContext;

jsettlersParser.prototype.endTurn = function() {

    var localctx = new EndTurnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, jsettlersParser.RULE_endTurn);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 884;
        this.player();
        this.state = 885;
        this.match(jsettlersParser.SPACE);
        this.state = 886;
        this.match(jsettlersParser.T__48);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BuildCityContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_buildCity;
    return this;
}

BuildCityContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BuildCityContext.prototype.constructor = BuildCityContext;

BuildCityContext.prototype.player = function() {
    return this.getTypedRuleContext(PlayerContext,0);
};

BuildCityContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.SPACE);
    } else {
        return this.getToken(jsettlersParser.SPACE, i);
    }
};


BuildCityContext.prototype.build = function() {
    return this.getTypedRuleContext(BuildContext,0);
};

BuildCityContext.prototype.city = function() {
    return this.getTypedRuleContext(CityContext,0);
};

BuildCityContext.prototype.node = function() {
    return this.getTypedRuleContext(NodeContext,0);
};

BuildCityContext.prototype.at = function() {
    return this.getTypedRuleContext(AtContext,0);
};

BuildCityContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterBuildCity(this);
	}
};

BuildCityContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitBuildCity(this);
	}
};




jsettlersParser.BuildCityContext = BuildCityContext;

jsettlersParser.prototype.buildCity = function() {

    var localctx = new BuildCityContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, jsettlersParser.RULE_buildCity);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 888;
        this.player();
        this.state = 889;
        this.match(jsettlersParser.SPACE);
        this.state = 890;
        this.build();
        this.state = 892;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===jsettlersParser.SPACE) {
            this.state = 891;
            this.match(jsettlersParser.SPACE);
        }

        this.state = 894;
        this.city();
        this.state = 895;
        this.match(jsettlersParser.SPACE);
        this.state = 899;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===jsettlersParser.T__0 || _la===jsettlersParser.T__1) {
            this.state = 896;
            this.at();
            this.state = 897;
            this.match(jsettlersParser.SPACE);
        }

        this.state = 901;
        this.node();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BuildShipContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_buildShip;
    return this;
}

BuildShipContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BuildShipContext.prototype.constructor = BuildShipContext;

BuildShipContext.prototype.player = function() {
    return this.getTypedRuleContext(PlayerContext,0);
};

BuildShipContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.SPACE);
    } else {
        return this.getToken(jsettlersParser.SPACE, i);
    }
};


BuildShipContext.prototype.build = function() {
    return this.getTypedRuleContext(BuildContext,0);
};

BuildShipContext.prototype.ship = function() {
    return this.getTypedRuleContext(ShipContext,0);
};

BuildShipContext.prototype.edge = function() {
    return this.getTypedRuleContext(EdgeContext,0);
};

BuildShipContext.prototype.at = function() {
    return this.getTypedRuleContext(AtContext,0);
};

BuildShipContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterBuildShip(this);
	}
};

BuildShipContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitBuildShip(this);
	}
};




jsettlersParser.BuildShipContext = BuildShipContext;

jsettlersParser.prototype.buildShip = function() {

    var localctx = new BuildShipContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, jsettlersParser.RULE_buildShip);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 903;
        this.player();
        this.state = 904;
        this.match(jsettlersParser.SPACE);
        this.state = 905;
        this.build();
        this.state = 907;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===jsettlersParser.SPACE) {
            this.state = 906;
            this.match(jsettlersParser.SPACE);
        }

        this.state = 909;
        this.ship();
        this.state = 910;
        this.match(jsettlersParser.SPACE);
        this.state = 914;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===jsettlersParser.T__0 || _la===jsettlersParser.T__1) {
            this.state = 911;
            this.at();
            this.state = 912;
            this.match(jsettlersParser.SPACE);
        }

        this.state = 916;
        this.edge();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BuildRoadContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_buildRoad;
    return this;
}

BuildRoadContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BuildRoadContext.prototype.constructor = BuildRoadContext;

BuildRoadContext.prototype.player = function() {
    return this.getTypedRuleContext(PlayerContext,0);
};

BuildRoadContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.SPACE);
    } else {
        return this.getToken(jsettlersParser.SPACE, i);
    }
};


BuildRoadContext.prototype.build = function() {
    return this.getTypedRuleContext(BuildContext,0);
};

BuildRoadContext.prototype.road = function() {
    return this.getTypedRuleContext(RoadContext,0);
};

BuildRoadContext.prototype.edge = function() {
    return this.getTypedRuleContext(EdgeContext,0);
};

BuildRoadContext.prototype.at = function() {
    return this.getTypedRuleContext(AtContext,0);
};

BuildRoadContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterBuildRoad(this);
	}
};

BuildRoadContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitBuildRoad(this);
	}
};




jsettlersParser.BuildRoadContext = BuildRoadContext;

jsettlersParser.prototype.buildRoad = function() {

    var localctx = new BuildRoadContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, jsettlersParser.RULE_buildRoad);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 918;
        this.player();
        this.state = 919;
        this.match(jsettlersParser.SPACE);
        this.state = 920;
        this.build();
        this.state = 922;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===jsettlersParser.SPACE) {
            this.state = 921;
            this.match(jsettlersParser.SPACE);
        }

        this.state = 924;
        this.road();
        this.state = 925;
        this.match(jsettlersParser.SPACE);
        this.state = 929;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===jsettlersParser.T__0 || _la===jsettlersParser.T__1) {
            this.state = 926;
            this.at();
            this.state = 927;
            this.match(jsettlersParser.SPACE);
        }

        this.state = 931;
        this.edge();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BuildTownContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_buildTown;
    return this;
}

BuildTownContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BuildTownContext.prototype.constructor = BuildTownContext;

BuildTownContext.prototype.player = function() {
    return this.getTypedRuleContext(PlayerContext,0);
};

BuildTownContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.SPACE);
    } else {
        return this.getToken(jsettlersParser.SPACE, i);
    }
};


BuildTownContext.prototype.build = function() {
    return this.getTypedRuleContext(BuildContext,0);
};

BuildTownContext.prototype.town = function() {
    return this.getTypedRuleContext(TownContext,0);
};

BuildTownContext.prototype.node = function() {
    return this.getTypedRuleContext(NodeContext,0);
};

BuildTownContext.prototype.at = function() {
    return this.getTypedRuleContext(AtContext,0);
};

BuildTownContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterBuildTown(this);
	}
};

BuildTownContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitBuildTown(this);
	}
};




jsettlersParser.BuildTownContext = BuildTownContext;

jsettlersParser.prototype.buildTown = function() {

    var localctx = new BuildTownContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, jsettlersParser.RULE_buildTown);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 933;
        this.player();
        this.state = 934;
        this.match(jsettlersParser.SPACE);
        this.state = 935;
        this.build();
        this.state = 937;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===jsettlersParser.SPACE) {
            this.state = 936;
            this.match(jsettlersParser.SPACE);
        }

        this.state = 939;
        this.town();
        this.state = 940;
        this.match(jsettlersParser.SPACE);
        this.state = 944;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===jsettlersParser.T__0 || _la===jsettlersParser.T__1) {
            this.state = 941;
            this.at();
            this.state = 942;
            this.match(jsettlersParser.SPACE);
        }

        this.state = 946;
        this.node();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MoveRobberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_moveRobber;
    return this;
}

MoveRobberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MoveRobberContext.prototype.constructor = MoveRobberContext;

MoveRobberContext.prototype.player = function() {
    return this.getTypedRuleContext(PlayerContext,0);
};

MoveRobberContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.SPACE);
    } else {
        return this.getToken(jsettlersParser.SPACE, i);
    }
};


MoveRobberContext.prototype.robber = function() {
    return this.getTypedRuleContext(RobberContext,0);
};

MoveRobberContext.prototype.coord = function() {
    return this.getTypedRuleContext(CoordContext,0);
};

MoveRobberContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterMoveRobber(this);
	}
};

MoveRobberContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitMoveRobber(this);
	}
};




jsettlersParser.MoveRobberContext = MoveRobberContext;

jsettlersParser.prototype.moveRobber = function() {

    var localctx = new MoveRobberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, jsettlersParser.RULE_moveRobber);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 948;
        this.player();
        this.state = 949;
        this.match(jsettlersParser.SPACE);
        this.state = 950;
        this.match(jsettlersParser.T__49);
        this.state = 951;
        this.match(jsettlersParser.SPACE);
        this.state = 952;
        this.robber();
        this.state = 953;
        this.match(jsettlersParser.SPACE);
        this.state = 954;
        this.match(jsettlersParser.T__50);
        this.state = 955;
        this.match(jsettlersParser.SPACE);
        this.state = 956;
        this.coord();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RollDiceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_rollDice;
    return this;
}

RollDiceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RollDiceContext.prototype.constructor = RollDiceContext;

RollDiceContext.prototype.player = function() {
    return this.getTypedRuleContext(PlayerContext,0);
};

RollDiceContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.SPACE);
    } else {
        return this.getToken(jsettlersParser.SPACE, i);
    }
};


RollDiceContext.prototype.roll = function() {
    return this.getTypedRuleContext(RollContext,0);
};

RollDiceContext.prototype.production = function() {
    return this.getTypedRuleContext(ProductionContext,0);
};

RollDiceContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterRollDice(this);
	}
};

RollDiceContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitRollDice(this);
	}
};




jsettlersParser.RollDiceContext = RollDiceContext;

jsettlersParser.prototype.rollDice = function() {

    var localctx = new RollDiceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, jsettlersParser.RULE_rollDice);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 958;
        this.player();
        this.state = 959;
        this.match(jsettlersParser.SPACE);
        this.state = 960;
        this.roll();
        this.state = 961;
        this.match(jsettlersParser.SPACE);
        this.state = 962;
        this.production();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DiceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_dice;
    return this;
}

DiceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DiceContext.prototype.constructor = DiceContext;

DiceContext.prototype.U_DICE = function() {
    return this.getToken(jsettlersParser.U_DICE, 0);
};

DiceContext.prototype.SPACE = function() {
    return this.getToken(jsettlersParser.SPACE, 0);
};

DiceContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterDice(this);
	}
};

DiceContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitDice(this);
	}
};




jsettlersParser.DiceContext = DiceContext;

jsettlersParser.prototype.dice = function() {

    var localctx = new DiceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, jsettlersParser.RULE_dice);
    try {
        this.state = 967;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case jsettlersParser.U_DICE:
            this.enterOuterAlt(localctx, 1);
            this.state = 964;
            this.match(jsettlersParser.U_DICE);
            break;
        case jsettlersParser.T__51:
            this.enterOuterAlt(localctx, 2);
            this.state = 965;
            this.match(jsettlersParser.T__51);
            this.state = 966;
            this.match(jsettlersParser.SPACE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RollContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_roll;
    return this;
}

RollContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RollContext.prototype.constructor = RollContext;

RollContext.prototype.dice = function() {
    return this.getTypedRuleContext(DiceContext,0);
};

RollContext.prototype.NUMBER = function() {
    return this.getToken(jsettlersParser.NUMBER, 0);
};

RollContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterRoll(this);
	}
};

RollContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitRoll(this);
	}
};




jsettlersParser.RollContext = RollContext;

jsettlersParser.prototype.roll = function() {

    var localctx = new RollContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, jsettlersParser.RULE_roll);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 969;
        this.dice();
        this.state = 970;
        this.match(jsettlersParser.NUMBER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PlayerProductionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_playerProduction;
    return this;
}

PlayerProductionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PlayerProductionContext.prototype.constructor = PlayerProductionContext;

PlayerProductionContext.prototype.player = function() {
    return this.getTypedRuleContext(PlayerContext,0);
};

PlayerProductionContext.prototype.SPACE = function() {
    return this.getToken(jsettlersParser.SPACE, 0);
};

PlayerProductionContext.prototype.resourceSet = function() {
    return this.getTypedRuleContext(ResourceSetContext,0);
};

PlayerProductionContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterPlayerProduction(this);
	}
};

PlayerProductionContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitPlayerProduction(this);
	}
};




jsettlersParser.PlayerProductionContext = PlayerProductionContext;

jsettlersParser.prototype.playerProduction = function() {

    var localctx = new PlayerProductionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, jsettlersParser.RULE_playerProduction);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 972;
        this.player();
        this.state = 973;
        this.match(jsettlersParser.SPACE);
        this.state = 974;
        this.resourceSet();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ProductionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_production;
    return this;
}

ProductionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProductionContext.prototype.constructor = ProductionContext;

ProductionContext.prototype.playerProduction = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PlayerProductionContext);
    } else {
        return this.getTypedRuleContext(PlayerProductionContext,i);
    }
};

ProductionContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterProduction(this);
	}
};

ProductionContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitProduction(this);
	}
};




jsettlersParser.ProductionContext = ProductionContext;

jsettlersParser.prototype.production = function() {

    var localctx = new ProductionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, jsettlersParser.RULE_production);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 976;
        this.match(jsettlersParser.T__12);
        this.state = 985;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 29)) & ~0x1f) == 0 && ((1 << (_la - 29)) & ((1 << (jsettlersParser.T__28 - 29)) | (1 << (jsettlersParser.T__29 - 29)) | (1 << (jsettlersParser.T__30 - 29)) | (1 << (jsettlersParser.T__31 - 29)) | (1 << (jsettlersParser.T__33 - 29)) | (1 << (jsettlersParser.T__34 - 29)))) !== 0)) {
            this.state = 977;
            this.playerProduction();
            this.state = 982;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===jsettlersParser.T__17) {
                this.state = 978;
                this.match(jsettlersParser.T__17);
                this.state = 979;
                this.playerProduction();
                this.state = 984;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 987;
        this.match(jsettlersParser.T__13);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MoveShipContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_moveShip;
    return this;
}

MoveShipContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MoveShipContext.prototype.constructor = MoveShipContext;

MoveShipContext.prototype.player = function() {
    return this.getTypedRuleContext(PlayerContext,0);
};

MoveShipContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.SPACE);
    } else {
        return this.getToken(jsettlersParser.SPACE, i);
    }
};


MoveShipContext.prototype.edge = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EdgeContext);
    } else {
        return this.getTypedRuleContext(EdgeContext,i);
    }
};

MoveShipContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterMoveShip(this);
	}
};

MoveShipContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitMoveShip(this);
	}
};




jsettlersParser.MoveShipContext = MoveShipContext;

jsettlersParser.prototype.moveShip = function() {

    var localctx = new MoveShipContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, jsettlersParser.RULE_moveShip);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 989;
        this.player();
        this.state = 990;
        this.match(jsettlersParser.SPACE);
        this.state = 991;
        this.match(jsettlersParser.T__52);
        this.state = 992;
        this.match(jsettlersParser.SPACE);
        this.state = 993;
        this.edge();
        this.state = 994;
        this.match(jsettlersParser.SPACE);
        this.state = 995;
        this.match(jsettlersParser.T__50);
        this.state = 996;
        this.match(jsettlersParser.SPACE);
        this.state = 997;
        this.edge();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OfferTradeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_offerTrade;
    return this;
}

OfferTradeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OfferTradeContext.prototype.constructor = OfferTradeContext;

OfferTradeContext.prototype.player = function() {
    return this.getTypedRuleContext(PlayerContext,0);
};

OfferTradeContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.SPACE);
    } else {
        return this.getToken(jsettlersParser.SPACE, i);
    }
};


OfferTradeContext.prototype.resourceSet = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ResourceSetContext);
    } else {
        return this.getTypedRuleContext(ResourceSetContext,i);
    }
};

OfferTradeContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterOfferTrade(this);
	}
};

OfferTradeContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitOfferTrade(this);
	}
};




jsettlersParser.OfferTradeContext = OfferTradeContext;

jsettlersParser.prototype.offerTrade = function() {

    var localctx = new OfferTradeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, jsettlersParser.RULE_offerTrade);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 999;
        this.player();
        this.state = 1000;
        this.match(jsettlersParser.SPACE);
        this.state = 1001;
        this.match(jsettlersParser.T__53);
        this.state = 1002;
        this.match(jsettlersParser.SPACE);
        this.state = 1003;
        this.resourceSet();
        this.state = 1004;
        this.match(jsettlersParser.SPACE);
        this.state = 1005;
        this.match(jsettlersParser.T__54);
        this.state = 1006;
        this.match(jsettlersParser.SPACE);
        this.state = 1007;
        this.resourceSet();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AcceptOfferContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_acceptOffer;
    return this;
}

AcceptOfferContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AcceptOfferContext.prototype.constructor = AcceptOfferContext;

AcceptOfferContext.prototype.player = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PlayerContext);
    } else {
        return this.getTypedRuleContext(PlayerContext,i);
    }
};

AcceptOfferContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.SPACE);
    } else {
        return this.getToken(jsettlersParser.SPACE, i);
    }
};


AcceptOfferContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterAcceptOffer(this);
	}
};

AcceptOfferContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitAcceptOffer(this);
	}
};




jsettlersParser.AcceptOfferContext = AcceptOfferContext;

jsettlersParser.prototype.acceptOffer = function() {

    var localctx = new AcceptOfferContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, jsettlersParser.RULE_acceptOffer);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1009;
        this.player();
        this.state = 1010;
        this.match(jsettlersParser.SPACE);
        this.state = 1011;
        this.match(jsettlersParser.T__55);
        this.state = 1012;
        this.match(jsettlersParser.SPACE);
        this.state = 1013;
        this.player();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RejectOfferContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_rejectOffer;
    return this;
}

RejectOfferContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RejectOfferContext.prototype.constructor = RejectOfferContext;

RejectOfferContext.prototype.player = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PlayerContext);
    } else {
        return this.getTypedRuleContext(PlayerContext,i);
    }
};

RejectOfferContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.SPACE);
    } else {
        return this.getToken(jsettlersParser.SPACE, i);
    }
};


RejectOfferContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterRejectOffer(this);
	}
};

RejectOfferContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitRejectOffer(this);
	}
};




jsettlersParser.RejectOfferContext = RejectOfferContext;

jsettlersParser.prototype.rejectOffer = function() {

    var localctx = new RejectOfferContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, jsettlersParser.RULE_rejectOffer);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1015;
        this.player();
        this.state = 1016;
        this.match(jsettlersParser.SPACE);
        this.state = 1017;
        this.match(jsettlersParser.T__56);
        this.state = 1018;
        this.match(jsettlersParser.SPACE);
        this.state = 1019;
        this.player();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CounterOfferContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_counterOffer;
    return this;
}

CounterOfferContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CounterOfferContext.prototype.constructor = CounterOfferContext;

CounterOfferContext.prototype.player = function() {
    return this.getTypedRuleContext(PlayerContext,0);
};

CounterOfferContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.SPACE);
    } else {
        return this.getToken(jsettlersParser.SPACE, i);
    }
};


CounterOfferContext.prototype.resourceSet = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ResourceSetContext);
    } else {
        return this.getTypedRuleContext(ResourceSetContext,i);
    }
};

CounterOfferContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterCounterOffer(this);
	}
};

CounterOfferContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitCounterOffer(this);
	}
};




jsettlersParser.CounterOfferContext = CounterOfferContext;

jsettlersParser.prototype.counterOffer = function() {

    var localctx = new CounterOfferContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, jsettlersParser.RULE_counterOffer);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1021;
        this.player();
        this.state = 1022;
        this.match(jsettlersParser.SPACE);
        this.state = 1023;
        this.match(jsettlersParser.T__57);
        this.state = 1024;
        this.match(jsettlersParser.SPACE);
        this.state = 1025;
        this.resourceSet();
        this.state = 1026;
        this.match(jsettlersParser.SPACE);
        this.state = 1027;
        this.match(jsettlersParser.T__54);
        this.state = 1028;
        this.match(jsettlersParser.SPACE);
        this.state = 1029;
        this.resourceSet();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TradePlayerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_tradePlayer;
    return this;
}

TradePlayerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TradePlayerContext.prototype.constructor = TradePlayerContext;

TradePlayerContext.prototype.player = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PlayerContext);
    } else {
        return this.getTypedRuleContext(PlayerContext,i);
    }
};

TradePlayerContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.SPACE);
    } else {
        return this.getToken(jsettlersParser.SPACE, i);
    }
};


TradePlayerContext.prototype.resourceSet = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ResourceSetContext);
    } else {
        return this.getTypedRuleContext(ResourceSetContext,i);
    }
};

TradePlayerContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterTradePlayer(this);
	}
};

TradePlayerContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitTradePlayer(this);
	}
};




jsettlersParser.TradePlayerContext = TradePlayerContext;

jsettlersParser.prototype.tradePlayer = function() {

    var localctx = new TradePlayerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, jsettlersParser.RULE_tradePlayer);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1031;
        this.player();
        this.state = 1032;
        this.match(jsettlersParser.SPACE);
        this.state = 1033;
        this.match(jsettlersParser.T__58);
        this.state = 1034;
        this.match(jsettlersParser.SPACE);
        this.state = 1035;
        this.resourceSet();
        this.state = 1036;
        this.match(jsettlersParser.SPACE);
        this.state = 1037;
        this.match(jsettlersParser.T__54);
        this.state = 1038;
        this.match(jsettlersParser.SPACE);
        this.state = 1039;
        this.resourceSet();
        this.state = 1040;
        this.match(jsettlersParser.SPACE);
        this.state = 1041;
        this.match(jsettlersParser.T__59);
        this.state = 1042;
        this.match(jsettlersParser.SPACE);
        this.state = 1043;
        this.player();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LooseResourcesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_looseResources;
    return this;
}

LooseResourcesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LooseResourcesContext.prototype.constructor = LooseResourcesContext;

LooseResourcesContext.prototype.player = function() {
    return this.getTypedRuleContext(PlayerContext,0);
};

LooseResourcesContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.SPACE);
    } else {
        return this.getToken(jsettlersParser.SPACE, i);
    }
};


LooseResourcesContext.prototype.resourceSet = function() {
    return this.getTypedRuleContext(ResourceSetContext,0);
};

LooseResourcesContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterLooseResources(this);
	}
};

LooseResourcesContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitLooseResources(this);
	}
};




jsettlersParser.LooseResourcesContext = LooseResourcesContext;

jsettlersParser.prototype.looseResources = function() {

    var localctx = new LooseResourcesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, jsettlersParser.RULE_looseResources);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1045;
        this.player();
        this.state = 1046;
        this.match(jsettlersParser.SPACE);
        this.state = 1047;
        this.match(jsettlersParser.T__60);
        this.state = 1048;
        this.match(jsettlersParser.SPACE);
        this.state = 1049;
        this.resourceSet();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RobPlayerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_robPlayer;
    return this;
}

RobPlayerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RobPlayerContext.prototype.constructor = RobPlayerContext;

RobPlayerContext.prototype.player = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PlayerContext);
    } else {
        return this.getTypedRuleContext(PlayerContext,i);
    }
};

RobPlayerContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.SPACE);
    } else {
        return this.getToken(jsettlersParser.SPACE, i);
    }
};


RobPlayerContext.prototype.resource = function() {
    return this.getTypedRuleContext(ResourceContext,0);
};

RobPlayerContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterRobPlayer(this);
	}
};

RobPlayerContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitRobPlayer(this);
	}
};




jsettlersParser.RobPlayerContext = RobPlayerContext;

jsettlersParser.prototype.robPlayer = function() {

    var localctx = new RobPlayerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, jsettlersParser.RULE_robPlayer);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1051;
        this.player();
        this.state = 1052;
        this.match(jsettlersParser.SPACE);
        this.state = 1053;
        this.match(jsettlersParser.T__61);
        this.state = 1054;
        this.match(jsettlersParser.SPACE);
        this.state = 1055;
        this.player();
        this.state = 1056;
        this.match(jsettlersParser.SPACE);
        this.state = 1057;
        this.match(jsettlersParser.T__62);
        this.state = 1058;
        this.match(jsettlersParser.SPACE);
        this.state = 1059;
        this.resource();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BuyDevelopmentCardContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_buyDevelopmentCard;
    return this;
}

BuyDevelopmentCardContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BuyDevelopmentCardContext.prototype.constructor = BuyDevelopmentCardContext;

BuyDevelopmentCardContext.prototype.player = function() {
    return this.getTypedRuleContext(PlayerContext,0);
};

BuyDevelopmentCardContext.prototype.SPACE = function() {
    return this.getToken(jsettlersParser.SPACE, 0);
};

BuyDevelopmentCardContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterBuyDevelopmentCard(this);
	}
};

BuyDevelopmentCardContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitBuyDevelopmentCard(this);
	}
};




jsettlersParser.BuyDevelopmentCardContext = BuyDevelopmentCardContext;

jsettlersParser.prototype.buyDevelopmentCard = function() {

    var localctx = new BuyDevelopmentCardContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, jsettlersParser.RULE_buyDevelopmentCard);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1061;
        this.player();
        this.state = 1062;
        this.match(jsettlersParser.SPACE);
        this.state = 1063;
        this.match(jsettlersParser.T__63);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PlayDevelopmentCardContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_playDevelopmentCard;
    return this;
}

PlayDevelopmentCardContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PlayDevelopmentCardContext.prototype.constructor = PlayDevelopmentCardContext;

PlayDevelopmentCardContext.prototype.player = function() {
    return this.getTypedRuleContext(PlayerContext,0);
};

PlayDevelopmentCardContext.prototype.SPACE = function() {
    return this.getToken(jsettlersParser.SPACE, 0);
};

PlayDevelopmentCardContext.prototype.playDevelopmentCardExpression = function() {
    return this.getTypedRuleContext(PlayDevelopmentCardExpressionContext,0);
};

PlayDevelopmentCardContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterPlayDevelopmentCard(this);
	}
};

PlayDevelopmentCardContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitPlayDevelopmentCard(this);
	}
};




jsettlersParser.PlayDevelopmentCardContext = PlayDevelopmentCardContext;

jsettlersParser.prototype.playDevelopmentCard = function() {

    var localctx = new PlayDevelopmentCardContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, jsettlersParser.RULE_playDevelopmentCard);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1065;
        this.player();
        this.state = 1066;
        this.match(jsettlersParser.SPACE);
        this.state = 1067;
        this.match(jsettlersParser.T__64);
        this.state = 1068;
        this.playDevelopmentCardExpression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PlayDevelopmentCardExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_playDevelopmentCardExpression;
    return this;
}

PlayDevelopmentCardExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PlayDevelopmentCardExpressionContext.prototype.constructor = PlayDevelopmentCardExpressionContext;

PlayDevelopmentCardExpressionContext.prototype.playSoldier = function() {
    return this.getTypedRuleContext(PlaySoldierContext,0);
};

PlayDevelopmentCardExpressionContext.prototype.playVictoryPoint = function() {
    return this.getTypedRuleContext(PlayVictoryPointContext,0);
};

PlayDevelopmentCardExpressionContext.prototype.playRoadBuilding = function() {
    return this.getTypedRuleContext(PlayRoadBuildingContext,0);
};

PlayDevelopmentCardExpressionContext.prototype.playMonopoly = function() {
    return this.getTypedRuleContext(PlayMonopolyContext,0);
};

PlayDevelopmentCardExpressionContext.prototype.playYearOfPlenty = function() {
    return this.getTypedRuleContext(PlayYearOfPlentyContext,0);
};

PlayDevelopmentCardExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterPlayDevelopmentCardExpression(this);
	}
};

PlayDevelopmentCardExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitPlayDevelopmentCardExpression(this);
	}
};




jsettlersParser.PlayDevelopmentCardExpressionContext = PlayDevelopmentCardExpressionContext;

jsettlersParser.prototype.playDevelopmentCardExpression = function() {

    var localctx = new PlayDevelopmentCardExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, jsettlersParser.RULE_playDevelopmentCardExpression);
    try {
        this.state = 1075;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case jsettlersParser.T__31:
        case jsettlersParser.T__112:
            this.enterOuterAlt(localctx, 1);
            this.state = 1070;
            this.playSoldier();
            break;
        case jsettlersParser.T__117:
        case jsettlersParser.T__118:
            this.enterOuterAlt(localctx, 2);
            this.state = 1071;
            this.playVictoryPoint();
            break;
        case jsettlersParser.T__115:
        case jsettlersParser.T__116:
            this.enterOuterAlt(localctx, 3);
            this.state = 1072;
            this.playRoadBuilding();
            break;
        case jsettlersParser.T__113:
        case jsettlersParser.T__114:
            this.enterOuterAlt(localctx, 4);
            this.state = 1073;
            this.playMonopoly();
            break;
        case jsettlersParser.T__119:
        case jsettlersParser.T__120:
            this.enterOuterAlt(localctx, 5);
            this.state = 1074;
            this.playYearOfPlenty();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PlaySoldierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_playSoldier;
    return this;
}

PlaySoldierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PlaySoldierContext.prototype.constructor = PlaySoldierContext;

PlaySoldierContext.prototype.soldier = function() {
    return this.getTypedRuleContext(SoldierContext,0);
};

PlaySoldierContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterPlaySoldier(this);
	}
};

PlaySoldierContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitPlaySoldier(this);
	}
};




jsettlersParser.PlaySoldierContext = PlaySoldierContext;

jsettlersParser.prototype.playSoldier = function() {

    var localctx = new PlaySoldierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, jsettlersParser.RULE_playSoldier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1077;
        this.soldier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PlayVictoryPointContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_playVictoryPoint;
    return this;
}

PlayVictoryPointContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PlayVictoryPointContext.prototype.constructor = PlayVictoryPointContext;

PlayVictoryPointContext.prototype.victoryPoint = function() {
    return this.getTypedRuleContext(VictoryPointContext,0);
};

PlayVictoryPointContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterPlayVictoryPoint(this);
	}
};

PlayVictoryPointContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitPlayVictoryPoint(this);
	}
};




jsettlersParser.PlayVictoryPointContext = PlayVictoryPointContext;

jsettlersParser.prototype.playVictoryPoint = function() {

    var localctx = new PlayVictoryPointContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, jsettlersParser.RULE_playVictoryPoint);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1079;
        this.victoryPoint();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PlayRoadBuildingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_playRoadBuilding;
    return this;
}

PlayRoadBuildingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PlayRoadBuildingContext.prototype.constructor = PlayRoadBuildingContext;

PlayRoadBuildingContext.prototype.roadBuilding = function() {
    return this.getTypedRuleContext(RoadBuildingContext,0);
};

PlayRoadBuildingContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterPlayRoadBuilding(this);
	}
};

PlayRoadBuildingContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitPlayRoadBuilding(this);
	}
};




jsettlersParser.PlayRoadBuildingContext = PlayRoadBuildingContext;

jsettlersParser.prototype.playRoadBuilding = function() {

    var localctx = new PlayRoadBuildingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, jsettlersParser.RULE_playRoadBuilding);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1081;
        this.roadBuilding();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PlayMonopolyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_playMonopoly;
    return this;
}

PlayMonopolyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PlayMonopolyContext.prototype.constructor = PlayMonopolyContext;

PlayMonopolyContext.prototype.monopoly = function() {
    return this.getTypedRuleContext(MonopolyContext,0);
};

PlayMonopolyContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.SPACE);
    } else {
        return this.getToken(jsettlersParser.SPACE, i);
    }
};


PlayMonopolyContext.prototype.resource = function() {
    return this.getTypedRuleContext(ResourceContext,0);
};

PlayMonopolyContext.prototype.resourceSet = function() {
    return this.getTypedRuleContext(ResourceSetContext,0);
};

PlayMonopolyContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterPlayMonopoly(this);
	}
};

PlayMonopolyContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitPlayMonopoly(this);
	}
};




jsettlersParser.PlayMonopolyContext = PlayMonopolyContext;

jsettlersParser.prototype.playMonopoly = function() {

    var localctx = new PlayMonopolyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, jsettlersParser.RULE_playMonopoly);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1083;
        this.monopoly();
        this.state = 1084;
        this.match(jsettlersParser.SPACE);
        this.state = 1085;
        this.match(jsettlersParser.T__65);
        this.state = 1086;
        this.match(jsettlersParser.SPACE);
        this.state = 1087;
        this.resource();
        this.state = 1088;
        this.match(jsettlersParser.SPACE);
        this.state = 1089;
        this.match(jsettlersParser.T__43);
        this.state = 1090;
        this.match(jsettlersParser.SPACE);
        this.state = 1091;
        this.resourceSet();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PlayYearOfPlentyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_playYearOfPlenty;
    return this;
}

PlayYearOfPlentyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PlayYearOfPlentyContext.prototype.constructor = PlayYearOfPlentyContext;

PlayYearOfPlentyContext.prototype.yearOfPlenty = function() {
    return this.getTypedRuleContext(YearOfPlentyContext,0);
};

PlayYearOfPlentyContext.prototype.SPACE = function() {
    return this.getToken(jsettlersParser.SPACE, 0);
};

PlayYearOfPlentyContext.prototype.resource = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ResourceContext);
    } else {
        return this.getTypedRuleContext(ResourceContext,i);
    }
};

PlayYearOfPlentyContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterPlayYearOfPlenty(this);
	}
};

PlayYearOfPlentyContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitPlayYearOfPlenty(this);
	}
};




jsettlersParser.PlayYearOfPlentyContext = PlayYearOfPlentyContext;

jsettlersParser.prototype.playYearOfPlenty = function() {

    var localctx = new PlayYearOfPlentyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, jsettlersParser.RULE_playYearOfPlenty);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1093;
        this.yearOfPlenty();
        this.state = 1094;
        this.match(jsettlersParser.SPACE);
        this.state = 1095;
        this.match(jsettlersParser.T__43);
        this.state = 1096;
        this.resource();
        this.state = 1097;
        this.resource();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CheckItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_checkItem;
    return this;
}

CheckItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CheckItemContext.prototype.constructor = CheckItemContext;

CheckItemContext.prototype.INDENT = function() {
    return this.getToken(jsettlersParser.INDENT, 0);
};

CheckItemContext.prototype.checkPrefix = function() {
    return this.getTypedRuleContext(CheckPrefixContext,0);
};

CheckItemContext.prototype.SPACE = function() {
    return this.getToken(jsettlersParser.SPACE, 0);
};

CheckItemContext.prototype.check = function() {
    return this.getTypedRuleContext(CheckContext,0);
};

CheckItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterCheckItem(this);
	}
};

CheckItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitCheckItem(this);
	}
};




jsettlersParser.CheckItemContext = CheckItemContext;

jsettlersParser.prototype.checkItem = function() {

    var localctx = new CheckItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, jsettlersParser.RULE_checkItem);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1099;
        this.match(jsettlersParser.INDENT);
        this.state = 1100;
        this.checkPrefix();
        this.state = 1101;
        this.match(jsettlersParser.SPACE);
        this.state = 1102;
        this.check();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CheckPrefixContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_checkPrefix;
    return this;
}

CheckPrefixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CheckPrefixContext.prototype.constructor = CheckPrefixContext;

CheckPrefixContext.prototype.U_CHECK = function() {
    return this.getToken(jsettlersParser.U_CHECK, 0);
};

CheckPrefixContext.prototype.U_CHECK_GREEN = function() {
    return this.getToken(jsettlersParser.U_CHECK_GREEN, 0);
};

CheckPrefixContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterCheckPrefix(this);
	}
};

CheckPrefixContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitCheckPrefix(this);
	}
};




jsettlersParser.CheckPrefixContext = CheckPrefixContext;

jsettlersParser.prototype.checkPrefix = function() {

    var localctx = new CheckPrefixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, jsettlersParser.RULE_checkPrefix);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1104;
        _la = this._input.LA(1);
        if(!(_la===jsettlersParser.T__66 || _la===jsettlersParser.T__67 || _la===jsettlersParser.U_CHECK || _la===jsettlersParser.U_CHECK_GREEN)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PrecisionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_precision;
    return this;
}

PrecisionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrecisionContext.prototype.constructor = PrecisionContext;

PrecisionContext.prototype.atLeast = function() {
    return this.getTypedRuleContext(AtLeastContext,0);
};

PrecisionContext.prototype.moreThen = function() {
    return this.getTypedRuleContext(MoreThenContext,0);
};

PrecisionContext.prototype.moreThenOrEqual = function() {
    return this.getTypedRuleContext(MoreThenOrEqualContext,0);
};

PrecisionContext.prototype.exactly = function() {
    return this.getTypedRuleContext(ExactlyContext,0);
};

PrecisionContext.prototype.lessThen = function() {
    return this.getTypedRuleContext(LessThenContext,0);
};

PrecisionContext.prototype.lessThenOrEqual = function() {
    return this.getTypedRuleContext(LessThenOrEqualContext,0);
};

PrecisionContext.prototype.not = function() {
    return this.getTypedRuleContext(NotContext,0);
};

PrecisionContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterPrecision(this);
	}
};

PrecisionContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitPrecision(this);
	}
};




jsettlersParser.PrecisionContext = PrecisionContext;

jsettlersParser.prototype.precision = function() {

    var localctx = new PrecisionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, jsettlersParser.RULE_precision);
    try {
        this.state = 1113;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case jsettlersParser.T__68:
            this.enterOuterAlt(localctx, 1);
            this.state = 1106;
            this.atLeast();
            break;
        case jsettlersParser.T__69:
        case jsettlersParser.T__70:
            this.enterOuterAlt(localctx, 2);
            this.state = 1107;
            this.moreThen();
            break;
        case jsettlersParser.T__71:
        case jsettlersParser.T__72:
            this.enterOuterAlt(localctx, 3);
            this.state = 1108;
            this.moreThenOrEqual();
            break;
        case jsettlersParser.T__73:
        case jsettlersParser.T__74:
            this.enterOuterAlt(localctx, 4);
            this.state = 1109;
            this.exactly();
            break;
        case jsettlersParser.T__75:
        case jsettlersParser.T__76:
            this.enterOuterAlt(localctx, 5);
            this.state = 1110;
            this.lessThen();
            break;
        case jsettlersParser.T__77:
        case jsettlersParser.T__78:
            this.enterOuterAlt(localctx, 6);
            this.state = 1111;
            this.lessThenOrEqual();
            break;
        case jsettlersParser.T__79:
        case jsettlersParser.T__80:
            this.enterOuterAlt(localctx, 7);
            this.state = 1112;
            this.not();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AtLeastContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_atLeast;
    return this;
}

AtLeastContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AtLeastContext.prototype.constructor = AtLeastContext;


AtLeastContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterAtLeast(this);
	}
};

AtLeastContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitAtLeast(this);
	}
};




jsettlersParser.AtLeastContext = AtLeastContext;

jsettlersParser.prototype.atLeast = function() {

    var localctx = new AtLeastContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, jsettlersParser.RULE_atLeast);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1115;
        this.match(jsettlersParser.T__68);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MoreThenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_moreThen;
    return this;
}

MoreThenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MoreThenContext.prototype.constructor = MoreThenContext;


MoreThenContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterMoreThen(this);
	}
};

MoreThenContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitMoreThen(this);
	}
};




jsettlersParser.MoreThenContext = MoreThenContext;

jsettlersParser.prototype.moreThen = function() {

    var localctx = new MoreThenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, jsettlersParser.RULE_moreThen);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1117;
        _la = this._input.LA(1);
        if(!(_la===jsettlersParser.T__69 || _la===jsettlersParser.T__70)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MoreThenOrEqualContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_moreThenOrEqual;
    return this;
}

MoreThenOrEqualContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MoreThenOrEqualContext.prototype.constructor = MoreThenOrEqualContext;


MoreThenOrEqualContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterMoreThenOrEqual(this);
	}
};

MoreThenOrEqualContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitMoreThenOrEqual(this);
	}
};




jsettlersParser.MoreThenOrEqualContext = MoreThenOrEqualContext;

jsettlersParser.prototype.moreThenOrEqual = function() {

    var localctx = new MoreThenOrEqualContext(this, this._ctx, this.state);
    this.enterRule(localctx, 210, jsettlersParser.RULE_moreThenOrEqual);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1119;
        _la = this._input.LA(1);
        if(!(_la===jsettlersParser.T__71 || _la===jsettlersParser.T__72)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExactlyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_exactly;
    return this;
}

ExactlyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExactlyContext.prototype.constructor = ExactlyContext;


ExactlyContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterExactly(this);
	}
};

ExactlyContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitExactly(this);
	}
};




jsettlersParser.ExactlyContext = ExactlyContext;

jsettlersParser.prototype.exactly = function() {

    var localctx = new ExactlyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 212, jsettlersParser.RULE_exactly);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1121;
        _la = this._input.LA(1);
        if(!(_la===jsettlersParser.T__73 || _la===jsettlersParser.T__74)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LessThenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_lessThen;
    return this;
}

LessThenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LessThenContext.prototype.constructor = LessThenContext;


LessThenContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterLessThen(this);
	}
};

LessThenContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitLessThen(this);
	}
};




jsettlersParser.LessThenContext = LessThenContext;

jsettlersParser.prototype.lessThen = function() {

    var localctx = new LessThenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 214, jsettlersParser.RULE_lessThen);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1123;
        _la = this._input.LA(1);
        if(!(_la===jsettlersParser.T__75 || _la===jsettlersParser.T__76)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LessThenOrEqualContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_lessThenOrEqual;
    return this;
}

LessThenOrEqualContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LessThenOrEqualContext.prototype.constructor = LessThenOrEqualContext;


LessThenOrEqualContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterLessThenOrEqual(this);
	}
};

LessThenOrEqualContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitLessThenOrEqual(this);
	}
};




jsettlersParser.LessThenOrEqualContext = LessThenOrEqualContext;

jsettlersParser.prototype.lessThenOrEqual = function() {

    var localctx = new LessThenOrEqualContext(this, this._ctx, this.state);
    this.enterRule(localctx, 216, jsettlersParser.RULE_lessThenOrEqual);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1125;
        _la = this._input.LA(1);
        if(!(_la===jsettlersParser.T__77 || _la===jsettlersParser.T__78)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NotContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_not;
    return this;
}

NotContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NotContext.prototype.constructor = NotContext;


NotContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterNot(this);
	}
};

NotContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitNot(this);
	}
};




jsettlersParser.NotContext = NotContext;

jsettlersParser.prototype.not = function() {

    var localctx = new NotContext(this, this._ctx, this.state);
    this.enterRule(localctx, 218, jsettlersParser.RULE_not);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1127;
        _la = this._input.LA(1);
        if(!(_la===jsettlersParser.T__79 || _la===jsettlersParser.T__80)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CheckContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_check;
    return this;
}

CheckContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CheckContext.prototype.constructor = CheckContext;

CheckContext.prototype.hasResources = function() {
    return this.getTypedRuleContext(HasResourcesContext,0);
};

CheckContext.prototype.hasAmountPiecesInStock = function() {
    return this.getTypedRuleContext(HasAmountPiecesInStockContext,0);
};

CheckContext.prototype.isOnTurn = function() {
    return this.getTypedRuleContext(IsOnTurnContext,0);
};

CheckContext.prototype.isNotOnTurn = function() {
    return this.getTypedRuleContext(IsNotOnTurnContext,0);
};

CheckContext.prototype.hasRoadAt = function() {
    return this.getTypedRuleContext(HasRoadAtContext,0);
};

CheckContext.prototype.hasXRoads = function() {
    return this.getTypedRuleContext(HasXRoadsContext,0);
};

CheckContext.prototype.hasTownAt = function() {
    return this.getTypedRuleContext(HasTownAtContext,0);
};

CheckContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterCheck(this);
	}
};

CheckContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitCheck(this);
	}
};




jsettlersParser.CheckContext = CheckContext;

jsettlersParser.prototype.check = function() {

    var localctx = new CheckContext(this, this._ctx, this.state);
    this.enterRule(localctx, 220, jsettlersParser.RULE_check);
    try {
        this.state = 1136;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1129;
            this.hasResources();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1130;
            this.hasAmountPiecesInStock();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1131;
            this.isOnTurn();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1132;
            this.isNotOnTurn();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1133;
            this.hasRoadAt();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1134;
            this.hasXRoads();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1135;
            this.hasTownAt();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HasResourcesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_hasResources;
    return this;
}

HasResourcesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HasResourcesContext.prototype.constructor = HasResourcesContext;

HasResourcesContext.prototype.player = function() {
    return this.getTypedRuleContext(PlayerContext,0);
};

HasResourcesContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.SPACE);
    } else {
        return this.getToken(jsettlersParser.SPACE, i);
    }
};


HasResourcesContext.prototype.resourceSet = function() {
    return this.getTypedRuleContext(ResourceSetContext,0);
};

HasResourcesContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterHasResources(this);
	}
};

HasResourcesContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitHasResources(this);
	}
};




jsettlersParser.HasResourcesContext = HasResourcesContext;

jsettlersParser.prototype.hasResources = function() {

    var localctx = new HasResourcesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 222, jsettlersParser.RULE_hasResources);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1138;
        this.player();
        this.state = 1139;
        this.match(jsettlersParser.SPACE);
        this.state = 1140;
        this.match(jsettlersParser.T__81);
        this.state = 1141;
        this.match(jsettlersParser.SPACE);
        this.state = 1142;
        this.resourceSet();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HasAmountPiecesInStockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_hasAmountPiecesInStock;
    return this;
}

HasAmountPiecesInStockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HasAmountPiecesInStockContext.prototype.constructor = HasAmountPiecesInStockContext;

HasAmountPiecesInStockContext.prototype.player = function() {
    return this.getTypedRuleContext(PlayerContext,0);
};

HasAmountPiecesInStockContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.SPACE);
    } else {
        return this.getToken(jsettlersParser.SPACE, i);
    }
};


HasAmountPiecesInStockContext.prototype.precision = function() {
    return this.getTypedRuleContext(PrecisionContext,0);
};

HasAmountPiecesInStockContext.prototype.NUMBER = function() {
    return this.getToken(jsettlersParser.NUMBER, 0);
};

HasAmountPiecesInStockContext.prototype.piece = function() {
    return this.getTypedRuleContext(PieceContext,0);
};

HasAmountPiecesInStockContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterHasAmountPiecesInStock(this);
	}
};

HasAmountPiecesInStockContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitHasAmountPiecesInStock(this);
	}
};




jsettlersParser.HasAmountPiecesInStockContext = HasAmountPiecesInStockContext;

jsettlersParser.prototype.hasAmountPiecesInStock = function() {

    var localctx = new HasAmountPiecesInStockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 224, jsettlersParser.RULE_hasAmountPiecesInStock);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1144;
        this.player();
        this.state = 1145;
        this.match(jsettlersParser.SPACE);
        this.state = 1146;
        this.match(jsettlersParser.T__81);
        this.state = 1147;
        this.match(jsettlersParser.SPACE);
        this.state = 1148;
        this.precision();
        this.state = 1149;
        this.match(jsettlersParser.SPACE);
        this.state = 1150;
        this.match(jsettlersParser.NUMBER);
        this.state = 1151;
        this.match(jsettlersParser.SPACE);
        this.state = 1152;
        this.piece();
        this.state = 1153;
        this.match(jsettlersParser.SPACE);
        this.state = 1154;
        this.match(jsettlersParser.T__82);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IsNotOnTurnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_isNotOnTurn;
    return this;
}

IsNotOnTurnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IsNotOnTurnContext.prototype.constructor = IsNotOnTurnContext;

IsNotOnTurnContext.prototype.player = function() {
    return this.getTypedRuleContext(PlayerContext,0);
};

IsNotOnTurnContext.prototype.SPACE = function() {
    return this.getToken(jsettlersParser.SPACE, 0);
};

IsNotOnTurnContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterIsNotOnTurn(this);
	}
};

IsNotOnTurnContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitIsNotOnTurn(this);
	}
};




jsettlersParser.IsNotOnTurnContext = IsNotOnTurnContext;

jsettlersParser.prototype.isNotOnTurn = function() {

    var localctx = new IsNotOnTurnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 226, jsettlersParser.RULE_isNotOnTurn);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1156;
        this.player();
        this.state = 1157;
        this.match(jsettlersParser.SPACE);
        this.state = 1158;
        this.match(jsettlersParser.T__83);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IsOnTurnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_isOnTurn;
    return this;
}

IsOnTurnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IsOnTurnContext.prototype.constructor = IsOnTurnContext;

IsOnTurnContext.prototype.player = function() {
    return this.getTypedRuleContext(PlayerContext,0);
};

IsOnTurnContext.prototype.SPACE = function() {
    return this.getToken(jsettlersParser.SPACE, 0);
};

IsOnTurnContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterIsOnTurn(this);
	}
};

IsOnTurnContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitIsOnTurn(this);
	}
};




jsettlersParser.IsOnTurnContext = IsOnTurnContext;

jsettlersParser.prototype.isOnTurn = function() {

    var localctx = new IsOnTurnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 228, jsettlersParser.RULE_isOnTurn);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1160;
        this.player();
        this.state = 1161;
        this.match(jsettlersParser.SPACE);
        this.state = 1162;
        this.match(jsettlersParser.T__84);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HasRoadAtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_hasRoadAt;
    return this;
}

HasRoadAtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HasRoadAtContext.prototype.constructor = HasRoadAtContext;

HasRoadAtContext.prototype.player = function() {
    return this.getTypedRuleContext(PlayerContext,0);
};

HasRoadAtContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.SPACE);
    } else {
        return this.getToken(jsettlersParser.SPACE, i);
    }
};


HasRoadAtContext.prototype.edge = function() {
    return this.getTypedRuleContext(EdgeContext,0);
};

HasRoadAtContext.prototype.at = function() {
    return this.getTypedRuleContext(AtContext,0);
};

HasRoadAtContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterHasRoadAt(this);
	}
};

HasRoadAtContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitHasRoadAt(this);
	}
};




jsettlersParser.HasRoadAtContext = HasRoadAtContext;

jsettlersParser.prototype.hasRoadAt = function() {

    var localctx = new HasRoadAtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 230, jsettlersParser.RULE_hasRoadAt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1164;
        this.player();
        this.state = 1165;
        this.match(jsettlersParser.SPACE);
        this.state = 1166;
        this.match(jsettlersParser.T__85);
        this.state = 1169;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,83,this._ctx);
        if(la_===1) {
            this.state = 1167;
            this.match(jsettlersParser.SPACE);
            this.state = 1168;
            this.at();

        }
        this.state = 1171;
        this.match(jsettlersParser.SPACE);
        this.state = 1172;
        this.edge();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HasTownAtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_hasTownAt;
    return this;
}

HasTownAtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HasTownAtContext.prototype.constructor = HasTownAtContext;

HasTownAtContext.prototype.player = function() {
    return this.getTypedRuleContext(PlayerContext,0);
};

HasTownAtContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.SPACE);
    } else {
        return this.getToken(jsettlersParser.SPACE, i);
    }
};


HasTownAtContext.prototype.node = function() {
    return this.getTypedRuleContext(NodeContext,0);
};

HasTownAtContext.prototype.at = function() {
    return this.getTypedRuleContext(AtContext,0);
};

HasTownAtContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterHasTownAt(this);
	}
};

HasTownAtContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitHasTownAt(this);
	}
};




jsettlersParser.HasTownAtContext = HasTownAtContext;

jsettlersParser.prototype.hasTownAt = function() {

    var localctx = new HasTownAtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 232, jsettlersParser.RULE_hasTownAt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1174;
        this.player();
        this.state = 1175;
        this.match(jsettlersParser.SPACE);
        this.state = 1176;
        this.match(jsettlersParser.T__86);
        this.state = 1179;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,84,this._ctx);
        if(la_===1) {
            this.state = 1177;
            this.match(jsettlersParser.SPACE);
            this.state = 1178;
            this.at();

        }
        this.state = 1181;
        this.match(jsettlersParser.SPACE);
        this.state = 1182;
        this.node();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HasXRoadsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_hasXRoads;
    return this;
}

HasXRoadsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HasXRoadsContext.prototype.constructor = HasXRoadsContext;

HasXRoadsContext.prototype.player = function() {
    return this.getTypedRuleContext(PlayerContext,0);
};

HasXRoadsContext.prototype.NUMBER = function() {
    return this.getToken(jsettlersParser.NUMBER, 0);
};

HasXRoadsContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterHasXRoads(this);
	}
};

HasXRoadsContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitHasXRoads(this);
	}
};




jsettlersParser.HasXRoadsContext = HasXRoadsContext;

jsettlersParser.prototype.hasXRoads = function() {

    var localctx = new HasXRoadsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 234, jsettlersParser.RULE_hasXRoads);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1184;
        this.player();
        this.state = 1185;
        this.match(jsettlersParser.T__87);
        this.state = 1186;
        this.match(jsettlersParser.NUMBER);
        this.state = 1187;
        this.match(jsettlersParser.T__41);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ResourceSetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_resourceSet;
    return this;
}

ResourceSetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ResourceSetContext.prototype.constructor = ResourceSetContext;

ResourceSetContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(jsettlersParser.SPACE);
    } else {
        return this.getToken(jsettlersParser.SPACE, i);
    }
};


ResourceSetContext.prototype.resource = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ResourceContext);
    } else {
        return this.getTypedRuleContext(ResourceContext,i);
    }
};

ResourceSetContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterResourceSet(this);
	}
};

ResourceSetContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitResourceSet(this);
	}
};




jsettlersParser.ResourceSetContext = ResourceSetContext;

jsettlersParser.prototype.resourceSet = function() {

    var localctx = new ResourceSetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 236, jsettlersParser.RULE_resourceSet);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1189;
        this.match(jsettlersParser.T__12);
        this.state = 1193;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,85,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1190;
                this.match(jsettlersParser.SPACE); 
            }
            this.state = 1195;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,85,this._ctx);
        }

        this.state = 1202;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===jsettlersParser.T__31 || ((((_la - 89)) & ~0x1f) == 0 && ((1 << (_la - 89)) & ((1 << (jsettlersParser.T__88 - 89)) | (1 << (jsettlersParser.T__89 - 89)) | (1 << (jsettlersParser.T__90 - 89)) | (1 << (jsettlersParser.T__91 - 89)) | (1 << (jsettlersParser.T__92 - 89)) | (1 << (jsettlersParser.T__93 - 89)) | (1 << (jsettlersParser.T__94 - 89)) | (1 << (jsettlersParser.T__95 - 89)) | (1 << (jsettlersParser.T__96 - 89)) | (1 << (jsettlersParser.T__97 - 89)) | (1 << (jsettlersParser.T__98 - 89)) | (1 << (jsettlersParser.T__99 - 89)) | (1 << (jsettlersParser.T__100 - 89)) | (1 << (jsettlersParser.T__101 - 89)) | (1 << (jsettlersParser.T__102 - 89)) | (1 << (jsettlersParser.T__103 - 89)))) !== 0)) {
            this.state = 1196;
            this.resource();
            this.state = 1198;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,86,this._ctx);
            if(la_===1) {
                this.state = 1197;
                this.match(jsettlersParser.SPACE);

            }
            this.state = 1204;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1208;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===jsettlersParser.SPACE) {
            this.state = 1205;
            this.match(jsettlersParser.SPACE);
            this.state = 1210;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1211;
        this.match(jsettlersParser.T__13);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ResourceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_resource;
    return this;
}

ResourceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ResourceContext.prototype.constructor = ResourceContext;

ResourceContext.prototype.sheep = function() {
    return this.getTypedRuleContext(SheepContext,0);
};

ResourceContext.prototype.wheat = function() {
    return this.getTypedRuleContext(WheatContext,0);
};

ResourceContext.prototype.timber = function() {
    return this.getTypedRuleContext(TimberContext,0);
};

ResourceContext.prototype.ore = function() {
    return this.getTypedRuleContext(OreContext,0);
};

ResourceContext.prototype.brick = function() {
    return this.getTypedRuleContext(BrickContext,0);
};

ResourceContext.prototype.unknown = function() {
    return this.getTypedRuleContext(UnknownContext,0);
};

ResourceContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterResource(this);
	}
};

ResourceContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitResource(this);
	}
};




jsettlersParser.ResourceContext = ResourceContext;

jsettlersParser.prototype.resource = function() {

    var localctx = new ResourceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 238, jsettlersParser.RULE_resource);
    try {
        this.state = 1219;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case jsettlersParser.T__31:
        case jsettlersParser.T__88:
        case jsettlersParser.T__89:
            this.enterOuterAlt(localctx, 1);
            this.state = 1213;
            this.sheep();
            break;
        case jsettlersParser.T__93:
        case jsettlersParser.T__94:
        case jsettlersParser.T__95:
            this.enterOuterAlt(localctx, 2);
            this.state = 1214;
            this.wheat();
            break;
        case jsettlersParser.T__90:
        case jsettlersParser.T__91:
        case jsettlersParser.T__92:
            this.enterOuterAlt(localctx, 3);
            this.state = 1215;
            this.timber();
            break;
        case jsettlersParser.T__96:
        case jsettlersParser.T__97:
        case jsettlersParser.T__98:
            this.enterOuterAlt(localctx, 4);
            this.state = 1216;
            this.ore();
            break;
        case jsettlersParser.T__99:
        case jsettlersParser.T__100:
        case jsettlersParser.T__101:
            this.enterOuterAlt(localctx, 5);
            this.state = 1217;
            this.brick();
            break;
        case jsettlersParser.T__102:
        case jsettlersParser.T__103:
            this.enterOuterAlt(localctx, 6);
            this.state = 1218;
            this.unknown();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SheepContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_sheep;
    return this;
}

SheepContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SheepContext.prototype.constructor = SheepContext;


SheepContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterSheep(this);
	}
};

SheepContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitSheep(this);
	}
};




jsettlersParser.SheepContext = SheepContext;

jsettlersParser.prototype.sheep = function() {

    var localctx = new SheepContext(this, this._ctx, this.state);
    this.enterRule(localctx, 240, jsettlersParser.RULE_sheep);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1221;
        _la = this._input.LA(1);
        if(!(_la===jsettlersParser.T__31 || _la===jsettlersParser.T__88 || _la===jsettlersParser.T__89)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TimberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_timber;
    return this;
}

TimberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TimberContext.prototype.constructor = TimberContext;


TimberContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterTimber(this);
	}
};

TimberContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitTimber(this);
	}
};




jsettlersParser.TimberContext = TimberContext;

jsettlersParser.prototype.timber = function() {

    var localctx = new TimberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 242, jsettlersParser.RULE_timber);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1223;
        _la = this._input.LA(1);
        if(!(((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & ((1 << (jsettlersParser.T__90 - 91)) | (1 << (jsettlersParser.T__91 - 91)) | (1 << (jsettlersParser.T__92 - 91)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WheatContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_wheat;
    return this;
}

WheatContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WheatContext.prototype.constructor = WheatContext;


WheatContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterWheat(this);
	}
};

WheatContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitWheat(this);
	}
};




jsettlersParser.WheatContext = WheatContext;

jsettlersParser.prototype.wheat = function() {

    var localctx = new WheatContext(this, this._ctx, this.state);
    this.enterRule(localctx, 244, jsettlersParser.RULE_wheat);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1225;
        _la = this._input.LA(1);
        if(!(((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (jsettlersParser.T__93 - 94)) | (1 << (jsettlersParser.T__94 - 94)) | (1 << (jsettlersParser.T__95 - 94)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OreContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_ore;
    return this;
}

OreContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OreContext.prototype.constructor = OreContext;


OreContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterOre(this);
	}
};

OreContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitOre(this);
	}
};




jsettlersParser.OreContext = OreContext;

jsettlersParser.prototype.ore = function() {

    var localctx = new OreContext(this, this._ctx, this.state);
    this.enterRule(localctx, 246, jsettlersParser.RULE_ore);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1227;
        _la = this._input.LA(1);
        if(!(((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (jsettlersParser.T__96 - 97)) | (1 << (jsettlersParser.T__97 - 97)) | (1 << (jsettlersParser.T__98 - 97)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BrickContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_brick;
    return this;
}

BrickContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BrickContext.prototype.constructor = BrickContext;


BrickContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterBrick(this);
	}
};

BrickContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitBrick(this);
	}
};




jsettlersParser.BrickContext = BrickContext;

jsettlersParser.prototype.brick = function() {

    var localctx = new BrickContext(this, this._ctx, this.state);
    this.enterRule(localctx, 248, jsettlersParser.RULE_brick);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1229;
        _la = this._input.LA(1);
        if(!(((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (jsettlersParser.T__99 - 100)) | (1 << (jsettlersParser.T__100 - 100)) | (1 << (jsettlersParser.T__101 - 100)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UnknownContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_unknown;
    return this;
}

UnknownContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnknownContext.prototype.constructor = UnknownContext;


UnknownContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterUnknown(this);
	}
};

UnknownContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitUnknown(this);
	}
};




jsettlersParser.UnknownContext = UnknownContext;

jsettlersParser.prototype.unknown = function() {

    var localctx = new UnknownContext(this, this._ctx, this.state);
    this.enterRule(localctx, 250, jsettlersParser.RULE_unknown);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1231;
        _la = this._input.LA(1);
        if(!(_la===jsettlersParser.T__102 || _la===jsettlersParser.T__103)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PieceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_piece;
    return this;
}

PieceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PieceContext.prototype.constructor = PieceContext;

PieceContext.prototype.city = function() {
    return this.getTypedRuleContext(CityContext,0);
};

PieceContext.prototype.town = function() {
    return this.getTypedRuleContext(TownContext,0);
};

PieceContext.prototype.ship = function() {
    return this.getTypedRuleContext(ShipContext,0);
};

PieceContext.prototype.road = function() {
    return this.getTypedRuleContext(RoadContext,0);
};

PieceContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterPiece(this);
	}
};

PieceContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitPiece(this);
	}
};




jsettlersParser.PieceContext = PieceContext;

jsettlersParser.prototype.piece = function() {

    var localctx = new PieceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 252, jsettlersParser.RULE_piece);
    try {
        this.state = 1237;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case jsettlersParser.T__106:
        case jsettlersParser.T__107:
            this.enterOuterAlt(localctx, 1);
            this.state = 1233;
            this.city();
            break;
        case jsettlersParser.T__104:
        case jsettlersParser.T__105:
            this.enterOuterAlt(localctx, 2);
            this.state = 1234;
            this.town();
            break;
        case jsettlersParser.T__108:
        case jsettlersParser.T__109:
            this.enterOuterAlt(localctx, 3);
            this.state = 1235;
            this.ship();
            break;
        case jsettlersParser.T__110:
        case jsettlersParser.T__111:
            this.enterOuterAlt(localctx, 4);
            this.state = 1236;
            this.road();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TownContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_town;
    return this;
}

TownContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TownContext.prototype.constructor = TownContext;


TownContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterTown(this);
	}
};

TownContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitTown(this);
	}
};




jsettlersParser.TownContext = TownContext;

jsettlersParser.prototype.town = function() {

    var localctx = new TownContext(this, this._ctx, this.state);
    this.enterRule(localctx, 254, jsettlersParser.RULE_town);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1239;
        _la = this._input.LA(1);
        if(!(_la===jsettlersParser.T__104 || _la===jsettlersParser.T__105)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CityContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_city;
    return this;
}

CityContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CityContext.prototype.constructor = CityContext;


CityContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterCity(this);
	}
};

CityContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitCity(this);
	}
};




jsettlersParser.CityContext = CityContext;

jsettlersParser.prototype.city = function() {

    var localctx = new CityContext(this, this._ctx, this.state);
    this.enterRule(localctx, 256, jsettlersParser.RULE_city);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1241;
        _la = this._input.LA(1);
        if(!(_la===jsettlersParser.T__106 || _la===jsettlersParser.T__107)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ShipContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_ship;
    return this;
}

ShipContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ShipContext.prototype.constructor = ShipContext;


ShipContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterShip(this);
	}
};

ShipContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitShip(this);
	}
};




jsettlersParser.ShipContext = ShipContext;

jsettlersParser.prototype.ship = function() {

    var localctx = new ShipContext(this, this._ctx, this.state);
    this.enterRule(localctx, 258, jsettlersParser.RULE_ship);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1243;
        _la = this._input.LA(1);
        if(!(_la===jsettlersParser.T__108 || _la===jsettlersParser.T__109)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RoadContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_road;
    return this;
}

RoadContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RoadContext.prototype.constructor = RoadContext;


RoadContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterRoad(this);
	}
};

RoadContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitRoad(this);
	}
};




jsettlersParser.RoadContext = RoadContext;

jsettlersParser.prototype.road = function() {

    var localctx = new RoadContext(this, this._ctx, this.state);
    this.enterRule(localctx, 260, jsettlersParser.RULE_road);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1245;
        _la = this._input.LA(1);
        if(!(_la===jsettlersParser.T__110 || _la===jsettlersParser.T__111)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DevCardContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_devCard;
    return this;
}

DevCardContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DevCardContext.prototype.constructor = DevCardContext;

DevCardContext.prototype.soldier = function() {
    return this.getTypedRuleContext(SoldierContext,0);
};

DevCardContext.prototype.monopoly = function() {
    return this.getTypedRuleContext(MonopolyContext,0);
};

DevCardContext.prototype.roadBuilding = function() {
    return this.getTypedRuleContext(RoadBuildingContext,0);
};

DevCardContext.prototype.victoryPoint = function() {
    return this.getTypedRuleContext(VictoryPointContext,0);
};

DevCardContext.prototype.yearOfPlenty = function() {
    return this.getTypedRuleContext(YearOfPlentyContext,0);
};

DevCardContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterDevCard(this);
	}
};

DevCardContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitDevCard(this);
	}
};




jsettlersParser.DevCardContext = DevCardContext;

jsettlersParser.prototype.devCard = function() {

    var localctx = new DevCardContext(this, this._ctx, this.state);
    this.enterRule(localctx, 262, jsettlersParser.RULE_devCard);
    try {
        this.state = 1252;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case jsettlersParser.T__31:
        case jsettlersParser.T__112:
            this.enterOuterAlt(localctx, 1);
            this.state = 1247;
            this.soldier();
            break;
        case jsettlersParser.T__113:
        case jsettlersParser.T__114:
            this.enterOuterAlt(localctx, 2);
            this.state = 1248;
            this.monopoly();
            break;
        case jsettlersParser.T__115:
        case jsettlersParser.T__116:
            this.enterOuterAlt(localctx, 3);
            this.state = 1249;
            this.roadBuilding();
            break;
        case jsettlersParser.T__117:
        case jsettlersParser.T__118:
            this.enterOuterAlt(localctx, 4);
            this.state = 1250;
            this.victoryPoint();
            break;
        case jsettlersParser.T__119:
        case jsettlersParser.T__120:
            this.enterOuterAlt(localctx, 5);
            this.state = 1251;
            this.yearOfPlenty();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SoldierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_soldier;
    return this;
}

SoldierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SoldierContext.prototype.constructor = SoldierContext;


SoldierContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterSoldier(this);
	}
};

SoldierContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitSoldier(this);
	}
};




jsettlersParser.SoldierContext = SoldierContext;

jsettlersParser.prototype.soldier = function() {

    var localctx = new SoldierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 264, jsettlersParser.RULE_soldier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1254;
        _la = this._input.LA(1);
        if(!(_la===jsettlersParser.T__31 || _la===jsettlersParser.T__112)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MonopolyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_monopoly;
    return this;
}

MonopolyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MonopolyContext.prototype.constructor = MonopolyContext;


MonopolyContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterMonopoly(this);
	}
};

MonopolyContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitMonopoly(this);
	}
};




jsettlersParser.MonopolyContext = MonopolyContext;

jsettlersParser.prototype.monopoly = function() {

    var localctx = new MonopolyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 266, jsettlersParser.RULE_monopoly);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1256;
        _la = this._input.LA(1);
        if(!(_la===jsettlersParser.T__113 || _la===jsettlersParser.T__114)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RoadBuildingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_roadBuilding;
    return this;
}

RoadBuildingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RoadBuildingContext.prototype.constructor = RoadBuildingContext;


RoadBuildingContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterRoadBuilding(this);
	}
};

RoadBuildingContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitRoadBuilding(this);
	}
};




jsettlersParser.RoadBuildingContext = RoadBuildingContext;

jsettlersParser.prototype.roadBuilding = function() {

    var localctx = new RoadBuildingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 268, jsettlersParser.RULE_roadBuilding);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1258;
        _la = this._input.LA(1);
        if(!(_la===jsettlersParser.T__115 || _la===jsettlersParser.T__116)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VictoryPointContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_victoryPoint;
    return this;
}

VictoryPointContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VictoryPointContext.prototype.constructor = VictoryPointContext;


VictoryPointContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterVictoryPoint(this);
	}
};

VictoryPointContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitVictoryPoint(this);
	}
};




jsettlersParser.VictoryPointContext = VictoryPointContext;

jsettlersParser.prototype.victoryPoint = function() {

    var localctx = new VictoryPointContext(this, this._ctx, this.state);
    this.enterRule(localctx, 270, jsettlersParser.RULE_victoryPoint);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1260;
        _la = this._input.LA(1);
        if(!(_la===jsettlersParser.T__117 || _la===jsettlersParser.T__118)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function YearOfPlentyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_yearOfPlenty;
    return this;
}

YearOfPlentyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
YearOfPlentyContext.prototype.constructor = YearOfPlentyContext;


YearOfPlentyContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterYearOfPlenty(this);
	}
};

YearOfPlentyContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitYearOfPlenty(this);
	}
};




jsettlersParser.YearOfPlentyContext = YearOfPlentyContext;

jsettlersParser.prototype.yearOfPlenty = function() {

    var localctx = new YearOfPlentyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 272, jsettlersParser.RULE_yearOfPlenty);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1262;
        _la = this._input.LA(1);
        if(!(_la===jsettlersParser.T__119 || _la===jsettlersParser.T__120)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PortContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_port;
    return this;
}

PortContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PortContext.prototype.constructor = PortContext;

PortContext.prototype.any3To1Port = function() {
    return this.getTypedRuleContext(Any3To1PortContext,0);
};

PortContext.prototype.any4To1Port = function() {
    return this.getTypedRuleContext(Any4To1PortContext,0);
};

PortContext.prototype.brick2To1Port = function() {
    return this.getTypedRuleContext(Brick2To1PortContext,0);
};

PortContext.prototype.wheat2To1Port = function() {
    return this.getTypedRuleContext(Wheat2To1PortContext,0);
};

PortContext.prototype.timber2To1Port = function() {
    return this.getTypedRuleContext(Timber2To1PortContext,0);
};

PortContext.prototype.ore2To1Port = function() {
    return this.getTypedRuleContext(Ore2To1PortContext,0);
};

PortContext.prototype.sheep2To1Port = function() {
    return this.getTypedRuleContext(Sheep2To1PortContext,0);
};

PortContext.prototype.fromBagPort = function() {
    return this.getTypedRuleContext(FromBagPortContext,0);
};

PortContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterPort(this);
	}
};

PortContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitPort(this);
	}
};




jsettlersParser.PortContext = PortContext;

jsettlersParser.prototype.port = function() {

    var localctx = new PortContext(this, this._ctx, this.state);
    this.enterRule(localctx, 274, jsettlersParser.RULE_port);
    try {
        this.state = 1272;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,92,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1264;
            this.any3To1Port();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1265;
            this.any4To1Port();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1266;
            this.brick2To1Port();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1267;
            this.wheat2To1Port();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1268;
            this.timber2To1Port();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1269;
            this.ore2To1Port();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1270;
            this.sheep2To1Port();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1271;
            this.fromBagPort();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PortPrefixContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_portPrefix;
    return this;
}

PortPrefixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PortPrefixContext.prototype.constructor = PortPrefixContext;

PortPrefixContext.prototype.U_PORT = function() {
    return this.getToken(jsettlersParser.U_PORT, 0);
};

PortPrefixContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterPortPrefix(this);
	}
};

PortPrefixContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitPortPrefix(this);
	}
};




jsettlersParser.PortPrefixContext = PortPrefixContext;

jsettlersParser.prototype.portPrefix = function() {

    var localctx = new PortPrefixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 276, jsettlersParser.RULE_portPrefix);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1274;
        _la = this._input.LA(1);
        if(!(_la===jsettlersParser.T__121 || _la===jsettlersParser.U_PORT)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Any3To1PortContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_any3To1Port;
    return this;
}

Any3To1PortContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Any3To1PortContext.prototype.constructor = Any3To1PortContext;

Any3To1PortContext.prototype.portPrefix = function() {
    return this.getTypedRuleContext(PortPrefixContext,0);
};

Any3To1PortContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterAny3To1Port(this);
	}
};

Any3To1PortContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitAny3To1Port(this);
	}
};




jsettlersParser.Any3To1PortContext = Any3To1PortContext;

jsettlersParser.prototype.any3To1Port = function() {

    var localctx = new Any3To1PortContext(this, this._ctx, this.state);
    this.enterRule(localctx, 278, jsettlersParser.RULE_any3To1Port);
    try {
        this.state = 1280;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case jsettlersParser.T__122:
            this.enterOuterAlt(localctx, 1);
            this.state = 1276;
            this.match(jsettlersParser.T__122);
            break;
        case jsettlersParser.T__121:
        case jsettlersParser.U_PORT:
            this.enterOuterAlt(localctx, 2);
            this.state = 1277;
            this.portPrefix();
            this.state = 1278;
            this.match(jsettlersParser.T__123);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Any4To1PortContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_any4To1Port;
    return this;
}

Any4To1PortContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Any4To1PortContext.prototype.constructor = Any4To1PortContext;

Any4To1PortContext.prototype.portPrefix = function() {
    return this.getTypedRuleContext(PortPrefixContext,0);
};

Any4To1PortContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterAny4To1Port(this);
	}
};

Any4To1PortContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitAny4To1Port(this);
	}
};




jsettlersParser.Any4To1PortContext = Any4To1PortContext;

jsettlersParser.prototype.any4To1Port = function() {

    var localctx = new Any4To1PortContext(this, this._ctx, this.state);
    this.enterRule(localctx, 280, jsettlersParser.RULE_any4To1Port);
    try {
        this.state = 1286;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case jsettlersParser.T__124:
            this.enterOuterAlt(localctx, 1);
            this.state = 1282;
            this.match(jsettlersParser.T__124);
            break;
        case jsettlersParser.T__121:
        case jsettlersParser.U_PORT:
            this.enterOuterAlt(localctx, 2);
            this.state = 1283;
            this.portPrefix();
            this.state = 1284;
            this.match(jsettlersParser.T__125);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Brick2To1PortContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_brick2To1Port;
    return this;
}

Brick2To1PortContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Brick2To1PortContext.prototype.constructor = Brick2To1PortContext;

Brick2To1PortContext.prototype.portPrefix = function() {
    return this.getTypedRuleContext(PortPrefixContext,0);
};

Brick2To1PortContext.prototype.brick = function() {
    return this.getTypedRuleContext(BrickContext,0);
};

Brick2To1PortContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterBrick2To1Port(this);
	}
};

Brick2To1PortContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitBrick2To1Port(this);
	}
};




jsettlersParser.Brick2To1PortContext = Brick2To1PortContext;

jsettlersParser.prototype.brick2To1Port = function() {

    var localctx = new Brick2To1PortContext(this, this._ctx, this.state);
    this.enterRule(localctx, 282, jsettlersParser.RULE_brick2To1Port);
    try {
        this.state = 1292;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case jsettlersParser.T__126:
            this.enterOuterAlt(localctx, 1);
            this.state = 1288;
            this.match(jsettlersParser.T__126);
            break;
        case jsettlersParser.T__121:
        case jsettlersParser.U_PORT:
            this.enterOuterAlt(localctx, 2);
            this.state = 1289;
            this.portPrefix();
            this.state = 1290;
            this.brick();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Wheat2To1PortContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_wheat2To1Port;
    return this;
}

Wheat2To1PortContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Wheat2To1PortContext.prototype.constructor = Wheat2To1PortContext;

Wheat2To1PortContext.prototype.portPrefix = function() {
    return this.getTypedRuleContext(PortPrefixContext,0);
};

Wheat2To1PortContext.prototype.wheat = function() {
    return this.getTypedRuleContext(WheatContext,0);
};

Wheat2To1PortContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterWheat2To1Port(this);
	}
};

Wheat2To1PortContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitWheat2To1Port(this);
	}
};




jsettlersParser.Wheat2To1PortContext = Wheat2To1PortContext;

jsettlersParser.prototype.wheat2To1Port = function() {

    var localctx = new Wheat2To1PortContext(this, this._ctx, this.state);
    this.enterRule(localctx, 284, jsettlersParser.RULE_wheat2To1Port);
    try {
        this.state = 1298;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case jsettlersParser.T__127:
            this.enterOuterAlt(localctx, 1);
            this.state = 1294;
            this.match(jsettlersParser.T__127);
            break;
        case jsettlersParser.T__121:
        case jsettlersParser.U_PORT:
            this.enterOuterAlt(localctx, 2);
            this.state = 1295;
            this.portPrefix();
            this.state = 1296;
            this.wheat();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Timber2To1PortContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_timber2To1Port;
    return this;
}

Timber2To1PortContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Timber2To1PortContext.prototype.constructor = Timber2To1PortContext;

Timber2To1PortContext.prototype.portPrefix = function() {
    return this.getTypedRuleContext(PortPrefixContext,0);
};

Timber2To1PortContext.prototype.timber = function() {
    return this.getTypedRuleContext(TimberContext,0);
};

Timber2To1PortContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterTimber2To1Port(this);
	}
};

Timber2To1PortContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitTimber2To1Port(this);
	}
};




jsettlersParser.Timber2To1PortContext = Timber2To1PortContext;

jsettlersParser.prototype.timber2To1Port = function() {

    var localctx = new Timber2To1PortContext(this, this._ctx, this.state);
    this.enterRule(localctx, 286, jsettlersParser.RULE_timber2To1Port);
    try {
        this.state = 1304;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case jsettlersParser.T__128:
            this.enterOuterAlt(localctx, 1);
            this.state = 1300;
            this.match(jsettlersParser.T__128);
            break;
        case jsettlersParser.T__121:
        case jsettlersParser.U_PORT:
            this.enterOuterAlt(localctx, 2);
            this.state = 1301;
            this.portPrefix();
            this.state = 1302;
            this.timber();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Ore2To1PortContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_ore2To1Port;
    return this;
}

Ore2To1PortContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Ore2To1PortContext.prototype.constructor = Ore2To1PortContext;

Ore2To1PortContext.prototype.portPrefix = function() {
    return this.getTypedRuleContext(PortPrefixContext,0);
};

Ore2To1PortContext.prototype.ore = function() {
    return this.getTypedRuleContext(OreContext,0);
};

Ore2To1PortContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterOre2To1Port(this);
	}
};

Ore2To1PortContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitOre2To1Port(this);
	}
};




jsettlersParser.Ore2To1PortContext = Ore2To1PortContext;

jsettlersParser.prototype.ore2To1Port = function() {

    var localctx = new Ore2To1PortContext(this, this._ctx, this.state);
    this.enterRule(localctx, 288, jsettlersParser.RULE_ore2To1Port);
    try {
        this.state = 1310;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case jsettlersParser.T__129:
            this.enterOuterAlt(localctx, 1);
            this.state = 1306;
            this.match(jsettlersParser.T__129);
            break;
        case jsettlersParser.T__121:
        case jsettlersParser.U_PORT:
            this.enterOuterAlt(localctx, 2);
            this.state = 1307;
            this.portPrefix();
            this.state = 1308;
            this.ore();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Sheep2To1PortContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_sheep2To1Port;
    return this;
}

Sheep2To1PortContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sheep2To1PortContext.prototype.constructor = Sheep2To1PortContext;

Sheep2To1PortContext.prototype.portPrefix = function() {
    return this.getTypedRuleContext(PortPrefixContext,0);
};

Sheep2To1PortContext.prototype.sheep = function() {
    return this.getTypedRuleContext(SheepContext,0);
};

Sheep2To1PortContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterSheep2To1Port(this);
	}
};

Sheep2To1PortContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitSheep2To1Port(this);
	}
};




jsettlersParser.Sheep2To1PortContext = Sheep2To1PortContext;

jsettlersParser.prototype.sheep2To1Port = function() {

    var localctx = new Sheep2To1PortContext(this, this._ctx, this.state);
    this.enterRule(localctx, 290, jsettlersParser.RULE_sheep2To1Port);
    try {
        this.state = 1316;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case jsettlersParser.T__130:
            this.enterOuterAlt(localctx, 1);
            this.state = 1312;
            this.match(jsettlersParser.T__130);
            break;
        case jsettlersParser.T__121:
        case jsettlersParser.U_PORT:
            this.enterOuterAlt(localctx, 2);
            this.state = 1313;
            this.portPrefix();
            this.state = 1314;
            this.sheep();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FromBagPortContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_fromBagPort;
    return this;
}

FromBagPortContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FromBagPortContext.prototype.constructor = FromBagPortContext;

FromBagPortContext.prototype.portPrefix = function() {
    return this.getTypedRuleContext(PortPrefixContext,0);
};

FromBagPortContext.prototype.U_BAG = function() {
    return this.getToken(jsettlersParser.U_BAG, 0);
};

FromBagPortContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterFromBagPort(this);
	}
};

FromBagPortContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitFromBagPort(this);
	}
};




jsettlersParser.FromBagPortContext = FromBagPortContext;

jsettlersParser.prototype.fromBagPort = function() {

    var localctx = new FromBagPortContext(this, this._ctx, this.state);
    this.enterRule(localctx, 292, jsettlersParser.RULE_fromBagPort);
    try {
        this.state = 1322;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case jsettlersParser.T__131:
            this.enterOuterAlt(localctx, 1);
            this.state = 1318;
            this.match(jsettlersParser.T__131);
            break;
        case jsettlersParser.T__121:
        case jsettlersParser.U_PORT:
            this.enterOuterAlt(localctx, 2);
            this.state = 1319;
            this.portPrefix();
            this.state = 1320;
            this.match(jsettlersParser.U_BAG);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HexContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_hex;
    return this;
}

HexContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HexContext.prototype.constructor = HexContext;

HexContext.prototype.pasture = function() {
    return this.getTypedRuleContext(PastureContext,0);
};

HexContext.prototype.forest = function() {
    return this.getTypedRuleContext(ForestContext,0);
};

HexContext.prototype.mountain = function() {
    return this.getTypedRuleContext(MountainContext,0);
};

HexContext.prototype.river = function() {
    return this.getTypedRuleContext(RiverContext,0);
};

HexContext.prototype.wheatField = function() {
    return this.getTypedRuleContext(WheatFieldContext,0);
};

HexContext.prototype.sea = function() {
    return this.getTypedRuleContext(SeaContext,0);
};

HexContext.prototype.none = function() {
    return this.getTypedRuleContext(NoneContext,0);
};

HexContext.prototype.desert = function() {
    return this.getTypedRuleContext(DesertContext,0);
};

HexContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterHex(this);
	}
};

HexContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitHex(this);
	}
};




jsettlersParser.HexContext = HexContext;

jsettlersParser.prototype.hex = function() {

    var localctx = new HexContext(this, this._ctx, this.state);
    this.enterRule(localctx, 294, jsettlersParser.RULE_hex);
    try {
        this.state = 1332;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case jsettlersParser.T__132:
        case jsettlersParser.T__133:
            this.enterOuterAlt(localctx, 1);
            this.state = 1324;
            this.pasture();
            break;
        case jsettlersParser.T__91:
        case jsettlersParser.T__134:
            this.enterOuterAlt(localctx, 2);
            this.state = 1325;
            this.forest();
            break;
        case jsettlersParser.T__135:
        case jsettlersParser.T__136:
            this.enterOuterAlt(localctx, 3);
            this.state = 1326;
            this.mountain();
            break;
        case jsettlersParser.T__137:
        case jsettlersParser.T__138:
            this.enterOuterAlt(localctx, 4);
            this.state = 1327;
            this.river();
            break;
        case jsettlersParser.T__139:
        case jsettlersParser.T__140:
            this.enterOuterAlt(localctx, 5);
            this.state = 1328;
            this.wheatField();
            break;
        case jsettlersParser.T__141:
        case jsettlersParser.T__142:
            this.enterOuterAlt(localctx, 6);
            this.state = 1329;
            this.sea();
            break;
        case jsettlersParser.T__32:
        case jsettlersParser.T__143:
            this.enterOuterAlt(localctx, 7);
            this.state = 1330;
            this.none();
            break;
        case jsettlersParser.T__144:
        case jsettlersParser.T__145:
            this.enterOuterAlt(localctx, 8);
            this.state = 1331;
            this.desert();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PastureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_pasture;
    return this;
}

PastureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PastureContext.prototype.constructor = PastureContext;


PastureContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterPasture(this);
	}
};

PastureContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitPasture(this);
	}
};




jsettlersParser.PastureContext = PastureContext;

jsettlersParser.prototype.pasture = function() {

    var localctx = new PastureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 296, jsettlersParser.RULE_pasture);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1334;
        _la = this._input.LA(1);
        if(!(_la===jsettlersParser.T__132 || _la===jsettlersParser.T__133)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForestContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_forest;
    return this;
}

ForestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForestContext.prototype.constructor = ForestContext;


ForestContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterForest(this);
	}
};

ForestContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitForest(this);
	}
};




jsettlersParser.ForestContext = ForestContext;

jsettlersParser.prototype.forest = function() {

    var localctx = new ForestContext(this, this._ctx, this.state);
    this.enterRule(localctx, 298, jsettlersParser.RULE_forest);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1336;
        _la = this._input.LA(1);
        if(!(_la===jsettlersParser.T__91 || _la===jsettlersParser.T__134)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MountainContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_mountain;
    return this;
}

MountainContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MountainContext.prototype.constructor = MountainContext;


MountainContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterMountain(this);
	}
};

MountainContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitMountain(this);
	}
};




jsettlersParser.MountainContext = MountainContext;

jsettlersParser.prototype.mountain = function() {

    var localctx = new MountainContext(this, this._ctx, this.state);
    this.enterRule(localctx, 300, jsettlersParser.RULE_mountain);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1338;
        _la = this._input.LA(1);
        if(!(_la===jsettlersParser.T__135 || _la===jsettlersParser.T__136)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RiverContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_river;
    return this;
}

RiverContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RiverContext.prototype.constructor = RiverContext;


RiverContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterRiver(this);
	}
};

RiverContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitRiver(this);
	}
};




jsettlersParser.RiverContext = RiverContext;

jsettlersParser.prototype.river = function() {

    var localctx = new RiverContext(this, this._ctx, this.state);
    this.enterRule(localctx, 302, jsettlersParser.RULE_river);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1340;
        _la = this._input.LA(1);
        if(!(_la===jsettlersParser.T__137 || _la===jsettlersParser.T__138)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WheatFieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_wheatField;
    return this;
}

WheatFieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WheatFieldContext.prototype.constructor = WheatFieldContext;


WheatFieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterWheatField(this);
	}
};

WheatFieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitWheatField(this);
	}
};




jsettlersParser.WheatFieldContext = WheatFieldContext;

jsettlersParser.prototype.wheatField = function() {

    var localctx = new WheatFieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 304, jsettlersParser.RULE_wheatField);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1342;
        _la = this._input.LA(1);
        if(!(_la===jsettlersParser.T__139 || _la===jsettlersParser.T__140)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SeaContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_sea;
    return this;
}

SeaContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SeaContext.prototype.constructor = SeaContext;


SeaContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterSea(this);
	}
};

SeaContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitSea(this);
	}
};




jsettlersParser.SeaContext = SeaContext;

jsettlersParser.prototype.sea = function() {

    var localctx = new SeaContext(this, this._ctx, this.state);
    this.enterRule(localctx, 306, jsettlersParser.RULE_sea);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1344;
        _la = this._input.LA(1);
        if(!(_la===jsettlersParser.T__141 || _la===jsettlersParser.T__142)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NoneContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_none;
    return this;
}

NoneContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NoneContext.prototype.constructor = NoneContext;


NoneContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterNone(this);
	}
};

NoneContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitNone(this);
	}
};




jsettlersParser.NoneContext = NoneContext;

jsettlersParser.prototype.none = function() {

    var localctx = new NoneContext(this, this._ctx, this.state);
    this.enterRule(localctx, 308, jsettlersParser.RULE_none);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1346;
        _la = this._input.LA(1);
        if(!(_la===jsettlersParser.T__32 || _la===jsettlersParser.T__143)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DesertContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_desert;
    return this;
}

DesertContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DesertContext.prototype.constructor = DesertContext;


DesertContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterDesert(this);
	}
};

DesertContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitDesert(this);
	}
};




jsettlersParser.DesertContext = DesertContext;

jsettlersParser.prototype.desert = function() {

    var localctx = new DesertContext(this, this._ctx, this.state);
    this.enterRule(localctx, 310, jsettlersParser.RULE_desert);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1348;
        _la = this._input.LA(1);
        if(!(_la===jsettlersParser.T__144 || _la===jsettlersParser.T__145)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VictoryPointtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_victoryPointt;
    return this;
}

VictoryPointtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VictoryPointtContext.prototype.constructor = VictoryPointtContext;

VictoryPointtContext.prototype.city = function() {
    return this.getTypedRuleContext(CityContext,0);
};

VictoryPointtContext.prototype.town = function() {
    return this.getTypedRuleContext(TownContext,0);
};

VictoryPointtContext.prototype.victoryPoint = function() {
    return this.getTypedRuleContext(VictoryPointContext,0);
};

VictoryPointtContext.prototype.longestRoad = function() {
    return this.getTypedRuleContext(LongestRoadContext,0);
};

VictoryPointtContext.prototype.largestArmy = function() {
    return this.getTypedRuleContext(LargestArmyContext,0);
};

VictoryPointtContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterVictoryPointt(this);
	}
};

VictoryPointtContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitVictoryPointt(this);
	}
};




jsettlersParser.VictoryPointtContext = VictoryPointtContext;

jsettlersParser.prototype.victoryPointt = function() {

    var localctx = new VictoryPointtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 312, jsettlersParser.RULE_victoryPointt);
    try {
        this.state = 1355;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case jsettlersParser.T__106:
        case jsettlersParser.T__107:
            this.enterOuterAlt(localctx, 1);
            this.state = 1350;
            this.city();
            break;
        case jsettlersParser.T__104:
        case jsettlersParser.T__105:
            this.enterOuterAlt(localctx, 2);
            this.state = 1351;
            this.town();
            break;
        case jsettlersParser.T__117:
        case jsettlersParser.T__118:
            this.enterOuterAlt(localctx, 3);
            this.state = 1352;
            this.victoryPoint();
            break;
        case jsettlersParser.T__146:
        case jsettlersParser.T__147:
            this.enterOuterAlt(localctx, 4);
            this.state = 1353;
            this.longestRoad();
            break;
        case jsettlersParser.T__148:
        case jsettlersParser.T__149:
            this.enterOuterAlt(localctx, 5);
            this.state = 1354;
            this.largestArmy();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LongestRoadContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_longestRoad;
    return this;
}

LongestRoadContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LongestRoadContext.prototype.constructor = LongestRoadContext;


LongestRoadContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterLongestRoad(this);
	}
};

LongestRoadContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitLongestRoad(this);
	}
};




jsettlersParser.LongestRoadContext = LongestRoadContext;

jsettlersParser.prototype.longestRoad = function() {

    var localctx = new LongestRoadContext(this, this._ctx, this.state);
    this.enterRule(localctx, 314, jsettlersParser.RULE_longestRoad);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1357;
        _la = this._input.LA(1);
        if(!(_la===jsettlersParser.T__146 || _la===jsettlersParser.T__147)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LargestArmyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_largestArmy;
    return this;
}

LargestArmyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LargestArmyContext.prototype.constructor = LargestArmyContext;


LargestArmyContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterLargestArmy(this);
	}
};

LargestArmyContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitLargestArmy(this);
	}
};




jsettlersParser.LargestArmyContext = LargestArmyContext;

jsettlersParser.prototype.largestArmy = function() {

    var localctx = new LargestArmyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 316, jsettlersParser.RULE_largestArmy);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1359;
        _la = this._input.LA(1);
        if(!(_la===jsettlersParser.T__148 || _la===jsettlersParser.T__149)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RoadBuildingTokenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = jsettlersParser.RULE_roadBuildingToken;
    return this;
}

RoadBuildingTokenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RoadBuildingTokenContext.prototype.constructor = RoadBuildingTokenContext;


RoadBuildingTokenContext.prototype.enterRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.enterRoadBuildingToken(this);
	}
};

RoadBuildingTokenContext.prototype.exitRule = function(listener) {
    if(listener instanceof jsettlersListener ) {
        listener.exitRoadBuildingToken(this);
	}
};




jsettlersParser.RoadBuildingTokenContext = RoadBuildingTokenContext;

jsettlersParser.prototype.roadBuildingToken = function() {

    var localctx = new RoadBuildingTokenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 318, jsettlersParser.RULE_roadBuildingToken);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1361;
        _la = this._input.LA(1);
        if(!(_la===jsettlersParser.T__150 || _la===jsettlersParser.T__151)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


exports.jsettlersParser = jsettlersParser;
