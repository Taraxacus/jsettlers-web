/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.jsettlers.AcceptOffer', null, global);
goog.exportSymbol('proto.jsettlers.BuildCity', null, global);
goog.exportSymbol('proto.jsettlers.BuildRoad', null, global);
goog.exportSymbol('proto.jsettlers.BuildTown', null, global);
goog.exportSymbol('proto.jsettlers.BuyDevelopmentCard', null, global);
goog.exportSymbol('proto.jsettlers.ChitType', null, global);
goog.exportSymbol('proto.jsettlers.Coord', null, global);
goog.exportSymbol('proto.jsettlers.Coord1D', null, global);
goog.exportSymbol('proto.jsettlers.Coord2D', null, global);
goog.exportSymbol('proto.jsettlers.Coord3D', null, global);
goog.exportSymbol('proto.jsettlers.CounterOffer', null, global);
goog.exportSymbol('proto.jsettlers.DevelopmentCard', null, global);
goog.exportSymbol('proto.jsettlers.Edge', null, global);
goog.exportSymbol('proto.jsettlers.EndTurn', null, global);
goog.exportSymbol('proto.jsettlers.GameAction', null, global);
goog.exportSymbol('proto.jsettlers.GameActionRequest', null, global);
goog.exportSymbol('proto.jsettlers.Hex', null, global);
goog.exportSymbol('proto.jsettlers.HexType', null, global);
goog.exportSymbol('proto.jsettlers.LooseResources', null, global);
goog.exportSymbol('proto.jsettlers.Monopoly', null, global);
goog.exportSymbol('proto.jsettlers.MoveRobber', null, global);
goog.exportSymbol('proto.jsettlers.Node', null, global);
goog.exportSymbol('proto.jsettlers.OfferTrade', null, global);
goog.exportSymbol('proto.jsettlers.PlayDevelopmentCard', null, global);
goog.exportSymbol('proto.jsettlers.PortType', null, global);
goog.exportSymbol('proto.jsettlers.RejectOffer', null, global);
goog.exportSymbol('proto.jsettlers.RejectOffer.Reason', null, global);
goog.exportSymbol('proto.jsettlers.ResourceType', null, global);
goog.exportSymbol('proto.jsettlers.RoadBuilding', null, global);
goog.exportSymbol('proto.jsettlers.RobPlayer', null, global);
goog.exportSymbol('proto.jsettlers.RollDice', null, global);
goog.exportSymbol('proto.jsettlers.RollDice.Dice', null, global);
goog.exportSymbol('proto.jsettlers.RollDice.Production', null, global);
goog.exportSymbol('proto.jsettlers.Soldier', null, global);
goog.exportSymbol('proto.jsettlers.StartGame', null, global);
goog.exportSymbol('proto.jsettlers.TradeBank', null, global);
goog.exportSymbol('proto.jsettlers.TradePlayer', null, global);
goog.exportSymbol('proto.jsettlers.VictoryPoint', null, global);
goog.exportSymbol('proto.jsettlers.YearOfPlenty', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jsettlers.Coord = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.jsettlers.Coord.oneofGroups_);
};
goog.inherits(proto.jsettlers.Coord, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jsettlers.Coord.displayName = 'proto.jsettlers.Coord';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.jsettlers.Coord.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.jsettlers.Coord.CoordOneofCase = {
  COORD_ONEOF_NOT_SET: 0,
  COORD1_D: 1,
  COORD2_D: 2,
  COORD3_D: 3
};

/**
 * @return {proto.jsettlers.Coord.CoordOneofCase}
 */
proto.jsettlers.Coord.prototype.getCoordOneofCase = function() {
  return /** @type {proto.jsettlers.Coord.CoordOneofCase} */(jspb.Message.computeOneofCase(this, proto.jsettlers.Coord.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jsettlers.Coord.prototype.toObject = function(opt_includeInstance) {
  return proto.jsettlers.Coord.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jsettlers.Coord} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.Coord.toObject = function(includeInstance, msg) {
  var f, obj = {
    coord1D: (f = msg.getCoord1D()) && proto.jsettlers.Coord1D.toObject(includeInstance, f),
    coord2D: (f = msg.getCoord2D()) && proto.jsettlers.Coord2D.toObject(includeInstance, f),
    coord3D: (f = msg.getCoord3D()) && proto.jsettlers.Coord3D.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jsettlers.Coord}
 */
proto.jsettlers.Coord.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jsettlers.Coord;
  return proto.jsettlers.Coord.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jsettlers.Coord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jsettlers.Coord}
 */
proto.jsettlers.Coord.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.jsettlers.Coord1D;
      reader.readMessage(value,proto.jsettlers.Coord1D.deserializeBinaryFromReader);
      msg.setCoord1D(value);
      break;
    case 2:
      var value = new proto.jsettlers.Coord2D;
      reader.readMessage(value,proto.jsettlers.Coord2D.deserializeBinaryFromReader);
      msg.setCoord2D(value);
      break;
    case 3:
      var value = new proto.jsettlers.Coord3D;
      reader.readMessage(value,proto.jsettlers.Coord3D.deserializeBinaryFromReader);
      msg.setCoord3D(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jsettlers.Coord.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jsettlers.Coord.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jsettlers.Coord} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.Coord.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCoord1D();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.jsettlers.Coord1D.serializeBinaryToWriter
    );
  }
  f = message.getCoord2D();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.jsettlers.Coord2D.serializeBinaryToWriter
    );
  }
  f = message.getCoord3D();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.jsettlers.Coord3D.serializeBinaryToWriter
    );
  }
};


/**
 * optional Coord1D coord1_d = 1;
 * @return {?proto.jsettlers.Coord1D}
 */
proto.jsettlers.Coord.prototype.getCoord1D = function() {
  return /** @type{?proto.jsettlers.Coord1D} */ (
    jspb.Message.getWrapperField(this, proto.jsettlers.Coord1D, 1));
};


/** @param {?proto.jsettlers.Coord1D|undefined} value */
proto.jsettlers.Coord.prototype.setCoord1D = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.jsettlers.Coord.oneofGroups_[0], value);
};


proto.jsettlers.Coord.prototype.clearCoord1D = function() {
  this.setCoord1D(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jsettlers.Coord.prototype.hasCoord1D = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Coord2D coord2_d = 2;
 * @return {?proto.jsettlers.Coord2D}
 */
proto.jsettlers.Coord.prototype.getCoord2D = function() {
  return /** @type{?proto.jsettlers.Coord2D} */ (
    jspb.Message.getWrapperField(this, proto.jsettlers.Coord2D, 2));
};


/** @param {?proto.jsettlers.Coord2D|undefined} value */
proto.jsettlers.Coord.prototype.setCoord2D = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.jsettlers.Coord.oneofGroups_[0], value);
};


proto.jsettlers.Coord.prototype.clearCoord2D = function() {
  this.setCoord2D(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jsettlers.Coord.prototype.hasCoord2D = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Coord3D coord3_d = 3;
 * @return {?proto.jsettlers.Coord3D}
 */
proto.jsettlers.Coord.prototype.getCoord3D = function() {
  return /** @type{?proto.jsettlers.Coord3D} */ (
    jspb.Message.getWrapperField(this, proto.jsettlers.Coord3D, 3));
};


/** @param {?proto.jsettlers.Coord3D|undefined} value */
proto.jsettlers.Coord.prototype.setCoord3D = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.jsettlers.Coord.oneofGroups_[0], value);
};


proto.jsettlers.Coord.prototype.clearCoord3D = function() {
  this.setCoord3D(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jsettlers.Coord.prototype.hasCoord3D = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jsettlers.Coord1D = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jsettlers.Coord1D, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jsettlers.Coord1D.displayName = 'proto.jsettlers.Coord1D';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jsettlers.Coord1D.prototype.toObject = function(opt_includeInstance) {
  return proto.jsettlers.Coord1D.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jsettlers.Coord1D} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.Coord1D.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jsettlers.Coord1D}
 */
proto.jsettlers.Coord1D.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jsettlers.Coord1D;
  return proto.jsettlers.Coord1D.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jsettlers.Coord1D} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jsettlers.Coord1D}
 */
proto.jsettlers.Coord1D.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jsettlers.Coord1D.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jsettlers.Coord1D.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jsettlers.Coord1D} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.Coord1D.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.jsettlers.Coord1D.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.jsettlers.Coord1D.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jsettlers.Coord2D = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jsettlers.Coord2D, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jsettlers.Coord2D.displayName = 'proto.jsettlers.Coord2D';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jsettlers.Coord2D.prototype.toObject = function(opt_includeInstance) {
  return proto.jsettlers.Coord2D.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jsettlers.Coord2D} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.Coord2D.toObject = function(includeInstance, msg) {
  var f, obj = {
    row: jspb.Message.getFieldWithDefault(msg, 1, 0),
    column: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jsettlers.Coord2D}
 */
proto.jsettlers.Coord2D.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jsettlers.Coord2D;
  return proto.jsettlers.Coord2D.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jsettlers.Coord2D} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jsettlers.Coord2D}
 */
proto.jsettlers.Coord2D.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRow(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setColumn(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jsettlers.Coord2D.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jsettlers.Coord2D.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jsettlers.Coord2D} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.Coord2D.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRow();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getColumn();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 row = 1;
 * @return {number}
 */
proto.jsettlers.Coord2D.prototype.getRow = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.jsettlers.Coord2D.prototype.setRow = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 column = 2;
 * @return {number}
 */
proto.jsettlers.Coord2D.prototype.getColumn = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.jsettlers.Coord2D.prototype.setColumn = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jsettlers.Coord3D = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jsettlers.Coord3D, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jsettlers.Coord3D.displayName = 'proto.jsettlers.Coord3D';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jsettlers.Coord3D.prototype.toObject = function(opt_includeInstance) {
  return proto.jsettlers.Coord3D.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jsettlers.Coord3D} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.Coord3D.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFieldWithDefault(msg, 1, 0),
    y: jspb.Message.getFieldWithDefault(msg, 2, 0),
    z: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jsettlers.Coord3D}
 */
proto.jsettlers.Coord3D.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jsettlers.Coord3D;
  return proto.jsettlers.Coord3D.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jsettlers.Coord3D} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jsettlers.Coord3D}
 */
proto.jsettlers.Coord3D.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setZ(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jsettlers.Coord3D.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jsettlers.Coord3D.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jsettlers.Coord3D} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.Coord3D.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getZ();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 x = 1;
 * @return {number}
 */
proto.jsettlers.Coord3D.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.jsettlers.Coord3D.prototype.setX = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 y = 2;
 * @return {number}
 */
proto.jsettlers.Coord3D.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.jsettlers.Coord3D.prototype.setY = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 z = 3;
 * @return {number}
 */
proto.jsettlers.Coord3D.prototype.getZ = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.jsettlers.Coord3D.prototype.setZ = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jsettlers.Node = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jsettlers.Node, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jsettlers.Node.displayName = 'proto.jsettlers.Node';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jsettlers.Node.prototype.toObject = function(opt_includeInstance) {
  return proto.jsettlers.Node.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jsettlers.Node} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.Node.toObject = function(includeInstance, msg) {
  var f, obj = {
    coord1: (f = msg.getCoord1()) && proto.jsettlers.Coord.toObject(includeInstance, f),
    coord2: (f = msg.getCoord2()) && proto.jsettlers.Coord.toObject(includeInstance, f),
    coord3: (f = msg.getCoord3()) && proto.jsettlers.Coord.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jsettlers.Node}
 */
proto.jsettlers.Node.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jsettlers.Node;
  return proto.jsettlers.Node.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jsettlers.Node} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jsettlers.Node}
 */
proto.jsettlers.Node.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.jsettlers.Coord;
      reader.readMessage(value,proto.jsettlers.Coord.deserializeBinaryFromReader);
      msg.setCoord1(value);
      break;
    case 2:
      var value = new proto.jsettlers.Coord;
      reader.readMessage(value,proto.jsettlers.Coord.deserializeBinaryFromReader);
      msg.setCoord2(value);
      break;
    case 3:
      var value = new proto.jsettlers.Coord;
      reader.readMessage(value,proto.jsettlers.Coord.deserializeBinaryFromReader);
      msg.setCoord3(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jsettlers.Node.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jsettlers.Node.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jsettlers.Node} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.Node.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCoord1();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.jsettlers.Coord.serializeBinaryToWriter
    );
  }
  f = message.getCoord2();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.jsettlers.Coord.serializeBinaryToWriter
    );
  }
  f = message.getCoord3();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.jsettlers.Coord.serializeBinaryToWriter
    );
  }
};


/**
 * optional Coord coord1 = 1;
 * @return {?proto.jsettlers.Coord}
 */
proto.jsettlers.Node.prototype.getCoord1 = function() {
  return /** @type{?proto.jsettlers.Coord} */ (
    jspb.Message.getWrapperField(this, proto.jsettlers.Coord, 1));
};


/** @param {?proto.jsettlers.Coord|undefined} value */
proto.jsettlers.Node.prototype.setCoord1 = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.jsettlers.Node.prototype.clearCoord1 = function() {
  this.setCoord1(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jsettlers.Node.prototype.hasCoord1 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Coord coord2 = 2;
 * @return {?proto.jsettlers.Coord}
 */
proto.jsettlers.Node.prototype.getCoord2 = function() {
  return /** @type{?proto.jsettlers.Coord} */ (
    jspb.Message.getWrapperField(this, proto.jsettlers.Coord, 2));
};


/** @param {?proto.jsettlers.Coord|undefined} value */
proto.jsettlers.Node.prototype.setCoord2 = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.jsettlers.Node.prototype.clearCoord2 = function() {
  this.setCoord2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jsettlers.Node.prototype.hasCoord2 = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Coord coord3 = 3;
 * @return {?proto.jsettlers.Coord}
 */
proto.jsettlers.Node.prototype.getCoord3 = function() {
  return /** @type{?proto.jsettlers.Coord} */ (
    jspb.Message.getWrapperField(this, proto.jsettlers.Coord, 3));
};


/** @param {?proto.jsettlers.Coord|undefined} value */
proto.jsettlers.Node.prototype.setCoord3 = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.jsettlers.Node.prototype.clearCoord3 = function() {
  this.setCoord3(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jsettlers.Node.prototype.hasCoord3 = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jsettlers.Edge = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jsettlers.Edge, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jsettlers.Edge.displayName = 'proto.jsettlers.Edge';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jsettlers.Edge.prototype.toObject = function(opt_includeInstance) {
  return proto.jsettlers.Edge.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jsettlers.Edge} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.Edge.toObject = function(includeInstance, msg) {
  var f, obj = {
    coord1: (f = msg.getCoord1()) && proto.jsettlers.Coord.toObject(includeInstance, f),
    coord2: (f = msg.getCoord2()) && proto.jsettlers.Coord.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jsettlers.Edge}
 */
proto.jsettlers.Edge.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jsettlers.Edge;
  return proto.jsettlers.Edge.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jsettlers.Edge} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jsettlers.Edge}
 */
proto.jsettlers.Edge.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.jsettlers.Coord;
      reader.readMessage(value,proto.jsettlers.Coord.deserializeBinaryFromReader);
      msg.setCoord1(value);
      break;
    case 2:
      var value = new proto.jsettlers.Coord;
      reader.readMessage(value,proto.jsettlers.Coord.deserializeBinaryFromReader);
      msg.setCoord2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jsettlers.Edge.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jsettlers.Edge.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jsettlers.Edge} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.Edge.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCoord1();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.jsettlers.Coord.serializeBinaryToWriter
    );
  }
  f = message.getCoord2();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.jsettlers.Coord.serializeBinaryToWriter
    );
  }
};


/**
 * optional Coord coord1 = 1;
 * @return {?proto.jsettlers.Coord}
 */
proto.jsettlers.Edge.prototype.getCoord1 = function() {
  return /** @type{?proto.jsettlers.Coord} */ (
    jspb.Message.getWrapperField(this, proto.jsettlers.Coord, 1));
};


/** @param {?proto.jsettlers.Coord|undefined} value */
proto.jsettlers.Edge.prototype.setCoord1 = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.jsettlers.Edge.prototype.clearCoord1 = function() {
  this.setCoord1(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jsettlers.Edge.prototype.hasCoord1 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Coord coord2 = 2;
 * @return {?proto.jsettlers.Coord}
 */
proto.jsettlers.Edge.prototype.getCoord2 = function() {
  return /** @type{?proto.jsettlers.Coord} */ (
    jspb.Message.getWrapperField(this, proto.jsettlers.Coord, 2));
};


/** @param {?proto.jsettlers.Coord|undefined} value */
proto.jsettlers.Edge.prototype.setCoord2 = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.jsettlers.Edge.prototype.clearCoord2 = function() {
  this.setCoord2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jsettlers.Edge.prototype.hasCoord2 = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jsettlers.Hex = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jsettlers.Hex, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jsettlers.Hex.displayName = 'proto.jsettlers.Hex';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jsettlers.Hex.prototype.toObject = function(opt_includeInstance) {
  return proto.jsettlers.Hex.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jsettlers.Hex} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.Hex.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    coord: (f = msg.getCoord()) && proto.jsettlers.Coord.toObject(includeInstance, f),
    chit: jspb.Message.getFieldWithDefault(msg, 3, 0),
    port: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jsettlers.Hex}
 */
proto.jsettlers.Hex.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jsettlers.Hex;
  return proto.jsettlers.Hex.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jsettlers.Hex} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jsettlers.Hex}
 */
proto.jsettlers.Hex.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.jsettlers.HexType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.jsettlers.Coord;
      reader.readMessage(value,proto.jsettlers.Coord.deserializeBinaryFromReader);
      msg.setCoord(value);
      break;
    case 3:
      var value = /** @type {!proto.jsettlers.ChitType} */ (reader.readEnum());
      msg.setChit(value);
      break;
    case 4:
      var value = /** @type {!proto.jsettlers.PortType} */ (reader.readEnum());
      msg.setPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jsettlers.Hex.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jsettlers.Hex.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jsettlers.Hex} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.Hex.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCoord();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.jsettlers.Coord.serializeBinaryToWriter
    );
  }
  f = message.getChit();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getPort();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional HexType type = 1;
 * @return {!proto.jsettlers.HexType}
 */
proto.jsettlers.Hex.prototype.getType = function() {
  return /** @type {!proto.jsettlers.HexType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.jsettlers.HexType} value */
proto.jsettlers.Hex.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Coord coord = 2;
 * @return {?proto.jsettlers.Coord}
 */
proto.jsettlers.Hex.prototype.getCoord = function() {
  return /** @type{?proto.jsettlers.Coord} */ (
    jspb.Message.getWrapperField(this, proto.jsettlers.Coord, 2));
};


/** @param {?proto.jsettlers.Coord|undefined} value */
proto.jsettlers.Hex.prototype.setCoord = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.jsettlers.Hex.prototype.clearCoord = function() {
  this.setCoord(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jsettlers.Hex.prototype.hasCoord = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ChitType chit = 3;
 * @return {!proto.jsettlers.ChitType}
 */
proto.jsettlers.Hex.prototype.getChit = function() {
  return /** @type {!proto.jsettlers.ChitType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.jsettlers.ChitType} value */
proto.jsettlers.Hex.prototype.setChit = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional PortType port = 4;
 * @return {!proto.jsettlers.PortType}
 */
proto.jsettlers.Hex.prototype.getPort = function() {
  return /** @type {!proto.jsettlers.PortType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.jsettlers.PortType} value */
proto.jsettlers.Hex.prototype.setPort = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jsettlers.BuildTown = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jsettlers.BuildTown, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jsettlers.BuildTown.displayName = 'proto.jsettlers.BuildTown';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jsettlers.BuildTown.prototype.toObject = function(opt_includeInstance) {
  return proto.jsettlers.BuildTown.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jsettlers.BuildTown} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.BuildTown.toObject = function(includeInstance, msg) {
  var f, obj = {
    node: (f = msg.getNode()) && proto.jsettlers.Node.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jsettlers.BuildTown}
 */
proto.jsettlers.BuildTown.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jsettlers.BuildTown;
  return proto.jsettlers.BuildTown.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jsettlers.BuildTown} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jsettlers.BuildTown}
 */
proto.jsettlers.BuildTown.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.jsettlers.Node;
      reader.readMessage(value,proto.jsettlers.Node.deserializeBinaryFromReader);
      msg.setNode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jsettlers.BuildTown.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jsettlers.BuildTown.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jsettlers.BuildTown} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.BuildTown.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNode();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.jsettlers.Node.serializeBinaryToWriter
    );
  }
};


/**
 * optional Node node = 1;
 * @return {?proto.jsettlers.Node}
 */
proto.jsettlers.BuildTown.prototype.getNode = function() {
  return /** @type{?proto.jsettlers.Node} */ (
    jspb.Message.getWrapperField(this, proto.jsettlers.Node, 1));
};


/** @param {?proto.jsettlers.Node|undefined} value */
proto.jsettlers.BuildTown.prototype.setNode = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.jsettlers.BuildTown.prototype.clearNode = function() {
  this.setNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jsettlers.BuildTown.prototype.hasNode = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jsettlers.BuildRoad = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jsettlers.BuildRoad, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jsettlers.BuildRoad.displayName = 'proto.jsettlers.BuildRoad';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jsettlers.BuildRoad.prototype.toObject = function(opt_includeInstance) {
  return proto.jsettlers.BuildRoad.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jsettlers.BuildRoad} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.BuildRoad.toObject = function(includeInstance, msg) {
  var f, obj = {
    edge: (f = msg.getEdge()) && proto.jsettlers.Edge.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jsettlers.BuildRoad}
 */
proto.jsettlers.BuildRoad.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jsettlers.BuildRoad;
  return proto.jsettlers.BuildRoad.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jsettlers.BuildRoad} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jsettlers.BuildRoad}
 */
proto.jsettlers.BuildRoad.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.jsettlers.Edge;
      reader.readMessage(value,proto.jsettlers.Edge.deserializeBinaryFromReader);
      msg.setEdge(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jsettlers.BuildRoad.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jsettlers.BuildRoad.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jsettlers.BuildRoad} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.BuildRoad.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEdge();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.jsettlers.Edge.serializeBinaryToWriter
    );
  }
};


/**
 * optional Edge edge = 1;
 * @return {?proto.jsettlers.Edge}
 */
proto.jsettlers.BuildRoad.prototype.getEdge = function() {
  return /** @type{?proto.jsettlers.Edge} */ (
    jspb.Message.getWrapperField(this, proto.jsettlers.Edge, 1));
};


/** @param {?proto.jsettlers.Edge|undefined} value */
proto.jsettlers.BuildRoad.prototype.setEdge = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.jsettlers.BuildRoad.prototype.clearEdge = function() {
  this.setEdge(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jsettlers.BuildRoad.prototype.hasEdge = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jsettlers.BuildCity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jsettlers.BuildCity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jsettlers.BuildCity.displayName = 'proto.jsettlers.BuildCity';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jsettlers.BuildCity.prototype.toObject = function(opt_includeInstance) {
  return proto.jsettlers.BuildCity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jsettlers.BuildCity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.BuildCity.toObject = function(includeInstance, msg) {
  var f, obj = {
    node: (f = msg.getNode()) && proto.jsettlers.Node.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jsettlers.BuildCity}
 */
proto.jsettlers.BuildCity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jsettlers.BuildCity;
  return proto.jsettlers.BuildCity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jsettlers.BuildCity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jsettlers.BuildCity}
 */
proto.jsettlers.BuildCity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.jsettlers.Node;
      reader.readMessage(value,proto.jsettlers.Node.deserializeBinaryFromReader);
      msg.setNode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jsettlers.BuildCity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jsettlers.BuildCity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jsettlers.BuildCity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.BuildCity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNode();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.jsettlers.Node.serializeBinaryToWriter
    );
  }
};


/**
 * optional Node node = 1;
 * @return {?proto.jsettlers.Node}
 */
proto.jsettlers.BuildCity.prototype.getNode = function() {
  return /** @type{?proto.jsettlers.Node} */ (
    jspb.Message.getWrapperField(this, proto.jsettlers.Node, 1));
};


/** @param {?proto.jsettlers.Node|undefined} value */
proto.jsettlers.BuildCity.prototype.setNode = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.jsettlers.BuildCity.prototype.clearNode = function() {
  this.setNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jsettlers.BuildCity.prototype.hasNode = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jsettlers.BuyDevelopmentCard = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jsettlers.BuyDevelopmentCard, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jsettlers.BuyDevelopmentCard.displayName = 'proto.jsettlers.BuyDevelopmentCard';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jsettlers.BuyDevelopmentCard.prototype.toObject = function(opt_includeInstance) {
  return proto.jsettlers.BuyDevelopmentCard.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jsettlers.BuyDevelopmentCard} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.BuyDevelopmentCard.toObject = function(includeInstance, msg) {
  var f, obj = {
    developmentCard: (f = msg.getDevelopmentCard()) && proto.jsettlers.DevelopmentCard.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jsettlers.BuyDevelopmentCard}
 */
proto.jsettlers.BuyDevelopmentCard.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jsettlers.BuyDevelopmentCard;
  return proto.jsettlers.BuyDevelopmentCard.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jsettlers.BuyDevelopmentCard} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jsettlers.BuyDevelopmentCard}
 */
proto.jsettlers.BuyDevelopmentCard.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.jsettlers.DevelopmentCard;
      reader.readMessage(value,proto.jsettlers.DevelopmentCard.deserializeBinaryFromReader);
      msg.setDevelopmentCard(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jsettlers.BuyDevelopmentCard.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jsettlers.BuyDevelopmentCard.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jsettlers.BuyDevelopmentCard} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.BuyDevelopmentCard.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevelopmentCard();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.jsettlers.DevelopmentCard.serializeBinaryToWriter
    );
  }
};


/**
 * optional DevelopmentCard development_card = 1;
 * @return {?proto.jsettlers.DevelopmentCard}
 */
proto.jsettlers.BuyDevelopmentCard.prototype.getDevelopmentCard = function() {
  return /** @type{?proto.jsettlers.DevelopmentCard} */ (
    jspb.Message.getWrapperField(this, proto.jsettlers.DevelopmentCard, 1));
};


/** @param {?proto.jsettlers.DevelopmentCard|undefined} value */
proto.jsettlers.BuyDevelopmentCard.prototype.setDevelopmentCard = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.jsettlers.BuyDevelopmentCard.prototype.clearDevelopmentCard = function() {
  this.setDevelopmentCard(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jsettlers.BuyDevelopmentCard.prototype.hasDevelopmentCard = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jsettlers.PlayDevelopmentCard = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jsettlers.PlayDevelopmentCard, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jsettlers.PlayDevelopmentCard.displayName = 'proto.jsettlers.PlayDevelopmentCard';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jsettlers.PlayDevelopmentCard.prototype.toObject = function(opt_includeInstance) {
  return proto.jsettlers.PlayDevelopmentCard.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jsettlers.PlayDevelopmentCard} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.PlayDevelopmentCard.toObject = function(includeInstance, msg) {
  var f, obj = {
    developmentCard: (f = msg.getDevelopmentCard()) && proto.jsettlers.DevelopmentCard.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jsettlers.PlayDevelopmentCard}
 */
proto.jsettlers.PlayDevelopmentCard.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jsettlers.PlayDevelopmentCard;
  return proto.jsettlers.PlayDevelopmentCard.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jsettlers.PlayDevelopmentCard} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jsettlers.PlayDevelopmentCard}
 */
proto.jsettlers.PlayDevelopmentCard.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.jsettlers.DevelopmentCard;
      reader.readMessage(value,proto.jsettlers.DevelopmentCard.deserializeBinaryFromReader);
      msg.setDevelopmentCard(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jsettlers.PlayDevelopmentCard.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jsettlers.PlayDevelopmentCard.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jsettlers.PlayDevelopmentCard} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.PlayDevelopmentCard.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevelopmentCard();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.jsettlers.DevelopmentCard.serializeBinaryToWriter
    );
  }
};


/**
 * optional DevelopmentCard development_card = 1;
 * @return {?proto.jsettlers.DevelopmentCard}
 */
proto.jsettlers.PlayDevelopmentCard.prototype.getDevelopmentCard = function() {
  return /** @type{?proto.jsettlers.DevelopmentCard} */ (
    jspb.Message.getWrapperField(this, proto.jsettlers.DevelopmentCard, 1));
};


/** @param {?proto.jsettlers.DevelopmentCard|undefined} value */
proto.jsettlers.PlayDevelopmentCard.prototype.setDevelopmentCard = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.jsettlers.PlayDevelopmentCard.prototype.clearDevelopmentCard = function() {
  this.setDevelopmentCard(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jsettlers.PlayDevelopmentCard.prototype.hasDevelopmentCard = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jsettlers.TradeBank = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.jsettlers.TradeBank.repeatedFields_, null);
};
goog.inherits(proto.jsettlers.TradeBank, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jsettlers.TradeBank.displayName = 'proto.jsettlers.TradeBank';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.jsettlers.TradeBank.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jsettlers.TradeBank.prototype.toObject = function(opt_includeInstance) {
  return proto.jsettlers.TradeBank.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jsettlers.TradeBank} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.TradeBank.toObject = function(includeInstance, msg) {
  var f, obj = {
    offeredResourcesList: jspb.Message.getRepeatedField(msg, 1),
    requestedResourcesList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jsettlers.TradeBank}
 */
proto.jsettlers.TradeBank.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jsettlers.TradeBank;
  return proto.jsettlers.TradeBank.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jsettlers.TradeBank} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jsettlers.TradeBank}
 */
proto.jsettlers.TradeBank.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<!proto.jsettlers.ResourceType>} */ (reader.readPackedEnum());
      msg.setOfferedResourcesList(value);
      break;
    case 2:
      var value = /** @type {!Array.<!proto.jsettlers.ResourceType>} */ (reader.readPackedEnum());
      msg.setRequestedResourcesList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jsettlers.TradeBank.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jsettlers.TradeBank.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jsettlers.TradeBank} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.TradeBank.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOfferedResourcesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      1,
      f
    );
  }
  f = message.getRequestedResourcesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      2,
      f
    );
  }
};


/**
 * repeated ResourceType offered_resources = 1;
 * @return {!Array.<!proto.jsettlers.ResourceType>}
 */
proto.jsettlers.TradeBank.prototype.getOfferedResourcesList = function() {
  return /** @type {!Array.<!proto.jsettlers.ResourceType>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<!proto.jsettlers.ResourceType>} value */
proto.jsettlers.TradeBank.prototype.setOfferedResourcesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!proto.jsettlers.ResourceType} value
 * @param {number=} opt_index
 */
proto.jsettlers.TradeBank.prototype.addOfferedResources = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.jsettlers.TradeBank.prototype.clearOfferedResourcesList = function() {
  this.setOfferedResourcesList([]);
};


/**
 * repeated ResourceType requested_resources = 2;
 * @return {!Array.<!proto.jsettlers.ResourceType>}
 */
proto.jsettlers.TradeBank.prototype.getRequestedResourcesList = function() {
  return /** @type {!Array.<!proto.jsettlers.ResourceType>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<!proto.jsettlers.ResourceType>} value */
proto.jsettlers.TradeBank.prototype.setRequestedResourcesList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!proto.jsettlers.ResourceType} value
 * @param {number=} opt_index
 */
proto.jsettlers.TradeBank.prototype.addRequestedResources = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.jsettlers.TradeBank.prototype.clearRequestedResourcesList = function() {
  this.setRequestedResourcesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jsettlers.RollDice = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.jsettlers.RollDice.repeatedFields_, null);
};
goog.inherits(proto.jsettlers.RollDice, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jsettlers.RollDice.displayName = 'proto.jsettlers.RollDice';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.jsettlers.RollDice.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jsettlers.RollDice.prototype.toObject = function(opt_includeInstance) {
  return proto.jsettlers.RollDice.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jsettlers.RollDice} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.RollDice.toObject = function(includeInstance, msg) {
  var f, obj = {
    dice: (f = msg.getDice()) && proto.jsettlers.RollDice.Dice.toObject(includeInstance, f),
    productionsList: jspb.Message.toObjectList(msg.getProductionsList(),
    proto.jsettlers.RollDice.Production.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jsettlers.RollDice}
 */
proto.jsettlers.RollDice.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jsettlers.RollDice;
  return proto.jsettlers.RollDice.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jsettlers.RollDice} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jsettlers.RollDice}
 */
proto.jsettlers.RollDice.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.jsettlers.RollDice.Dice;
      reader.readMessage(value,proto.jsettlers.RollDice.Dice.deserializeBinaryFromReader);
      msg.setDice(value);
      break;
    case 3:
      var value = new proto.jsettlers.RollDice.Production;
      reader.readMessage(value,proto.jsettlers.RollDice.Production.deserializeBinaryFromReader);
      msg.addProductions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jsettlers.RollDice.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jsettlers.RollDice.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jsettlers.RollDice} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.RollDice.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDice();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.jsettlers.RollDice.Dice.serializeBinaryToWriter
    );
  }
  f = message.getProductionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.jsettlers.RollDice.Production.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jsettlers.RollDice.Production = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.jsettlers.RollDice.Production.repeatedFields_, null);
};
goog.inherits(proto.jsettlers.RollDice.Production, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jsettlers.RollDice.Production.displayName = 'proto.jsettlers.RollDice.Production';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.jsettlers.RollDice.Production.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jsettlers.RollDice.Production.prototype.toObject = function(opt_includeInstance) {
  return proto.jsettlers.RollDice.Production.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jsettlers.RollDice.Production} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.RollDice.Production.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    produceList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jsettlers.RollDice.Production}
 */
proto.jsettlers.RollDice.Production.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jsettlers.RollDice.Production;
  return proto.jsettlers.RollDice.Production.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jsettlers.RollDice.Production} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jsettlers.RollDice.Production}
 */
proto.jsettlers.RollDice.Production.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlayerId(value);
      break;
    case 2:
      var value = /** @type {!Array.<!proto.jsettlers.ResourceType>} */ (reader.readPackedEnum());
      msg.setProduceList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jsettlers.RollDice.Production.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jsettlers.RollDice.Production.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jsettlers.RollDice.Production} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.RollDice.Production.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getProduceList();
  if (f.length > 0) {
    writer.writePackedEnum(
      2,
      f
    );
  }
};


/**
 * optional int32 player_id = 1;
 * @return {number}
 */
proto.jsettlers.RollDice.Production.prototype.getPlayerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.jsettlers.RollDice.Production.prototype.setPlayerId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated ResourceType produce = 2;
 * @return {!Array.<!proto.jsettlers.ResourceType>}
 */
proto.jsettlers.RollDice.Production.prototype.getProduceList = function() {
  return /** @type {!Array.<!proto.jsettlers.ResourceType>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<!proto.jsettlers.ResourceType>} value */
proto.jsettlers.RollDice.Production.prototype.setProduceList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!proto.jsettlers.ResourceType} value
 * @param {number=} opt_index
 */
proto.jsettlers.RollDice.Production.prototype.addProduce = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.jsettlers.RollDice.Production.prototype.clearProduceList = function() {
  this.setProduceList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jsettlers.RollDice.Dice = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jsettlers.RollDice.Dice, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jsettlers.RollDice.Dice.displayName = 'proto.jsettlers.RollDice.Dice';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jsettlers.RollDice.Dice.prototype.toObject = function(opt_includeInstance) {
  return proto.jsettlers.RollDice.Dice.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jsettlers.RollDice.Dice} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.RollDice.Dice.toObject = function(includeInstance, msg) {
  var f, obj = {
    die1: jspb.Message.getFieldWithDefault(msg, 1, 0),
    die2: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jsettlers.RollDice.Dice}
 */
proto.jsettlers.RollDice.Dice.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jsettlers.RollDice.Dice;
  return proto.jsettlers.RollDice.Dice.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jsettlers.RollDice.Dice} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jsettlers.RollDice.Dice}
 */
proto.jsettlers.RollDice.Dice.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDie1(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDie2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jsettlers.RollDice.Dice.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jsettlers.RollDice.Dice.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jsettlers.RollDice.Dice} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.RollDice.Dice.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDie1();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getDie2();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 die1 = 1;
 * @return {number}
 */
proto.jsettlers.RollDice.Dice.prototype.getDie1 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.jsettlers.RollDice.Dice.prototype.setDie1 = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 die2 = 2;
 * @return {number}
 */
proto.jsettlers.RollDice.Dice.prototype.getDie2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.jsettlers.RollDice.Dice.prototype.setDie2 = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional Dice dice = 2;
 * @return {?proto.jsettlers.RollDice.Dice}
 */
proto.jsettlers.RollDice.prototype.getDice = function() {
  return /** @type{?proto.jsettlers.RollDice.Dice} */ (
    jspb.Message.getWrapperField(this, proto.jsettlers.RollDice.Dice, 2));
};


/** @param {?proto.jsettlers.RollDice.Dice|undefined} value */
proto.jsettlers.RollDice.prototype.setDice = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.jsettlers.RollDice.prototype.clearDice = function() {
  this.setDice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jsettlers.RollDice.prototype.hasDice = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Production productions = 3;
 * @return {!Array.<!proto.jsettlers.RollDice.Production>}
 */
proto.jsettlers.RollDice.prototype.getProductionsList = function() {
  return /** @type{!Array.<!proto.jsettlers.RollDice.Production>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.jsettlers.RollDice.Production, 3));
};


/** @param {!Array.<!proto.jsettlers.RollDice.Production>} value */
proto.jsettlers.RollDice.prototype.setProductionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.jsettlers.RollDice.Production=} opt_value
 * @param {number=} opt_index
 * @return {!proto.jsettlers.RollDice.Production}
 */
proto.jsettlers.RollDice.prototype.addProductions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.jsettlers.RollDice.Production, opt_index);
};


proto.jsettlers.RollDice.prototype.clearProductionsList = function() {
  this.setProductionsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jsettlers.OfferTrade = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.jsettlers.OfferTrade.repeatedFields_, null);
};
goog.inherits(proto.jsettlers.OfferTrade, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jsettlers.OfferTrade.displayName = 'proto.jsettlers.OfferTrade';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.jsettlers.OfferTrade.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jsettlers.OfferTrade.prototype.toObject = function(opt_includeInstance) {
  return proto.jsettlers.OfferTrade.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jsettlers.OfferTrade} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.OfferTrade.toObject = function(includeInstance, msg) {
  var f, obj = {
    offeredList: jspb.Message.getRepeatedField(msg, 1),
    wantedList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jsettlers.OfferTrade}
 */
proto.jsettlers.OfferTrade.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jsettlers.OfferTrade;
  return proto.jsettlers.OfferTrade.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jsettlers.OfferTrade} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jsettlers.OfferTrade}
 */
proto.jsettlers.OfferTrade.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<!proto.jsettlers.ResourceType>} */ (reader.readPackedEnum());
      msg.setOfferedList(value);
      break;
    case 2:
      var value = /** @type {!Array.<!proto.jsettlers.ResourceType>} */ (reader.readPackedEnum());
      msg.setWantedList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jsettlers.OfferTrade.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jsettlers.OfferTrade.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jsettlers.OfferTrade} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.OfferTrade.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOfferedList();
  if (f.length > 0) {
    writer.writePackedEnum(
      1,
      f
    );
  }
  f = message.getWantedList();
  if (f.length > 0) {
    writer.writePackedEnum(
      2,
      f
    );
  }
};


/**
 * repeated ResourceType offered = 1;
 * @return {!Array.<!proto.jsettlers.ResourceType>}
 */
proto.jsettlers.OfferTrade.prototype.getOfferedList = function() {
  return /** @type {!Array.<!proto.jsettlers.ResourceType>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<!proto.jsettlers.ResourceType>} value */
proto.jsettlers.OfferTrade.prototype.setOfferedList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!proto.jsettlers.ResourceType} value
 * @param {number=} opt_index
 */
proto.jsettlers.OfferTrade.prototype.addOffered = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.jsettlers.OfferTrade.prototype.clearOfferedList = function() {
  this.setOfferedList([]);
};


/**
 * repeated ResourceType wanted = 2;
 * @return {!Array.<!proto.jsettlers.ResourceType>}
 */
proto.jsettlers.OfferTrade.prototype.getWantedList = function() {
  return /** @type {!Array.<!proto.jsettlers.ResourceType>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<!proto.jsettlers.ResourceType>} value */
proto.jsettlers.OfferTrade.prototype.setWantedList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!proto.jsettlers.ResourceType} value
 * @param {number=} opt_index
 */
proto.jsettlers.OfferTrade.prototype.addWanted = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.jsettlers.OfferTrade.prototype.clearWantedList = function() {
  this.setWantedList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jsettlers.RejectOffer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jsettlers.RejectOffer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jsettlers.RejectOffer.displayName = 'proto.jsettlers.RejectOffer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jsettlers.RejectOffer.prototype.toObject = function(opt_includeInstance) {
  return proto.jsettlers.RejectOffer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jsettlers.RejectOffer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.RejectOffer.toObject = function(includeInstance, msg) {
  var f, obj = {
    tradeOfferId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    reason: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jsettlers.RejectOffer}
 */
proto.jsettlers.RejectOffer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jsettlers.RejectOffer;
  return proto.jsettlers.RejectOffer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jsettlers.RejectOffer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jsettlers.RejectOffer}
 */
proto.jsettlers.RejectOffer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTradeOfferId(value);
      break;
    case 2:
      var value = /** @type {!proto.jsettlers.RejectOffer.Reason} */ (reader.readEnum());
      msg.setReason(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jsettlers.RejectOffer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jsettlers.RejectOffer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jsettlers.RejectOffer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.RejectOffer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTradeOfferId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getReason();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.jsettlers.RejectOffer.Reason = {
  NOT_GIVEN: 0,
  DONT_HAVE: 1,
  NO_RESOURCES: 2,
  WANT_MORE: 3,
  TIME_OUT: 4
};

/**
 * optional int32 trade_offer_id = 1;
 * @return {number}
 */
proto.jsettlers.RejectOffer.prototype.getTradeOfferId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.jsettlers.RejectOffer.prototype.setTradeOfferId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Reason reason = 2;
 * @return {!proto.jsettlers.RejectOffer.Reason}
 */
proto.jsettlers.RejectOffer.prototype.getReason = function() {
  return /** @type {!proto.jsettlers.RejectOffer.Reason} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.jsettlers.RejectOffer.Reason} value */
proto.jsettlers.RejectOffer.prototype.setReason = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jsettlers.CounterOffer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.jsettlers.CounterOffer.repeatedFields_, null);
};
goog.inherits(proto.jsettlers.CounterOffer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jsettlers.CounterOffer.displayName = 'proto.jsettlers.CounterOffer';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.jsettlers.CounterOffer.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jsettlers.CounterOffer.prototype.toObject = function(opt_includeInstance) {
  return proto.jsettlers.CounterOffer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jsettlers.CounterOffer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.CounterOffer.toObject = function(includeInstance, msg) {
  var f, obj = {
    tradeOfferId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    offeredList: jspb.Message.getRepeatedField(msg, 2),
    wantedList: jspb.Message.getRepeatedField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jsettlers.CounterOffer}
 */
proto.jsettlers.CounterOffer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jsettlers.CounterOffer;
  return proto.jsettlers.CounterOffer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jsettlers.CounterOffer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jsettlers.CounterOffer}
 */
proto.jsettlers.CounterOffer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTradeOfferId(value);
      break;
    case 2:
      var value = /** @type {!Array.<!proto.jsettlers.ResourceType>} */ (reader.readPackedEnum());
      msg.setOfferedList(value);
      break;
    case 3:
      var value = /** @type {!Array.<!proto.jsettlers.ResourceType>} */ (reader.readPackedEnum());
      msg.setWantedList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jsettlers.CounterOffer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jsettlers.CounterOffer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jsettlers.CounterOffer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.CounterOffer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTradeOfferId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getOfferedList();
  if (f.length > 0) {
    writer.writePackedEnum(
      2,
      f
    );
  }
  f = message.getWantedList();
  if (f.length > 0) {
    writer.writePackedEnum(
      3,
      f
    );
  }
};


/**
 * optional int32 trade_offer_id = 1;
 * @return {number}
 */
proto.jsettlers.CounterOffer.prototype.getTradeOfferId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.jsettlers.CounterOffer.prototype.setTradeOfferId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated ResourceType offered = 2;
 * @return {!Array.<!proto.jsettlers.ResourceType>}
 */
proto.jsettlers.CounterOffer.prototype.getOfferedList = function() {
  return /** @type {!Array.<!proto.jsettlers.ResourceType>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<!proto.jsettlers.ResourceType>} value */
proto.jsettlers.CounterOffer.prototype.setOfferedList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!proto.jsettlers.ResourceType} value
 * @param {number=} opt_index
 */
proto.jsettlers.CounterOffer.prototype.addOffered = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.jsettlers.CounterOffer.prototype.clearOfferedList = function() {
  this.setOfferedList([]);
};


/**
 * repeated ResourceType wanted = 3;
 * @return {!Array.<!proto.jsettlers.ResourceType>}
 */
proto.jsettlers.CounterOffer.prototype.getWantedList = function() {
  return /** @type {!Array.<!proto.jsettlers.ResourceType>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array.<!proto.jsettlers.ResourceType>} value */
proto.jsettlers.CounterOffer.prototype.setWantedList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!proto.jsettlers.ResourceType} value
 * @param {number=} opt_index
 */
proto.jsettlers.CounterOffer.prototype.addWanted = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.jsettlers.CounterOffer.prototype.clearWantedList = function() {
  this.setWantedList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jsettlers.AcceptOffer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jsettlers.AcceptOffer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jsettlers.AcceptOffer.displayName = 'proto.jsettlers.AcceptOffer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jsettlers.AcceptOffer.prototype.toObject = function(opt_includeInstance) {
  return proto.jsettlers.AcceptOffer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jsettlers.AcceptOffer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.AcceptOffer.toObject = function(includeInstance, msg) {
  var f, obj = {
    tradeOfferId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jsettlers.AcceptOffer}
 */
proto.jsettlers.AcceptOffer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jsettlers.AcceptOffer;
  return proto.jsettlers.AcceptOffer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jsettlers.AcceptOffer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jsettlers.AcceptOffer}
 */
proto.jsettlers.AcceptOffer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTradeOfferId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jsettlers.AcceptOffer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jsettlers.AcceptOffer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jsettlers.AcceptOffer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.AcceptOffer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTradeOfferId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 trade_offer_id = 1;
 * @return {number}
 */
proto.jsettlers.AcceptOffer.prototype.getTradeOfferId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.jsettlers.AcceptOffer.prototype.setTradeOfferId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jsettlers.TradePlayer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jsettlers.TradePlayer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jsettlers.TradePlayer.displayName = 'proto.jsettlers.TradePlayer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jsettlers.TradePlayer.prototype.toObject = function(opt_includeInstance) {
  return proto.jsettlers.TradePlayer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jsettlers.TradePlayer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.TradePlayer.toObject = function(includeInstance, msg) {
  var f, obj = {
    tradeOfferId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tradeResponseId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jsettlers.TradePlayer}
 */
proto.jsettlers.TradePlayer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jsettlers.TradePlayer;
  return proto.jsettlers.TradePlayer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jsettlers.TradePlayer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jsettlers.TradePlayer}
 */
proto.jsettlers.TradePlayer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTradeOfferId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTradeResponseId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jsettlers.TradePlayer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jsettlers.TradePlayer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jsettlers.TradePlayer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.TradePlayer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTradeOfferId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTradeResponseId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 trade_offer_id = 1;
 * @return {number}
 */
proto.jsettlers.TradePlayer.prototype.getTradeOfferId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.jsettlers.TradePlayer.prototype.setTradeOfferId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 trade_response_id = 2;
 * @return {number}
 */
proto.jsettlers.TradePlayer.prototype.getTradeResponseId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.jsettlers.TradePlayer.prototype.setTradeResponseId = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jsettlers.LooseResources = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.jsettlers.LooseResources.repeatedFields_, null);
};
goog.inherits(proto.jsettlers.LooseResources, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jsettlers.LooseResources.displayName = 'proto.jsettlers.LooseResources';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.jsettlers.LooseResources.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jsettlers.LooseResources.prototype.toObject = function(opt_includeInstance) {
  return proto.jsettlers.LooseResources.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jsettlers.LooseResources} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.LooseResources.toObject = function(includeInstance, msg) {
  var f, obj = {
    resourcesList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jsettlers.LooseResources}
 */
proto.jsettlers.LooseResources.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jsettlers.LooseResources;
  return proto.jsettlers.LooseResources.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jsettlers.LooseResources} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jsettlers.LooseResources}
 */
proto.jsettlers.LooseResources.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<!proto.jsettlers.ResourceType>} */ (reader.readPackedEnum());
      msg.setResourcesList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jsettlers.LooseResources.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jsettlers.LooseResources.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jsettlers.LooseResources} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.LooseResources.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResourcesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      1,
      f
    );
  }
};


/**
 * repeated ResourceType resources = 1;
 * @return {!Array.<!proto.jsettlers.ResourceType>}
 */
proto.jsettlers.LooseResources.prototype.getResourcesList = function() {
  return /** @type {!Array.<!proto.jsettlers.ResourceType>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<!proto.jsettlers.ResourceType>} value */
proto.jsettlers.LooseResources.prototype.setResourcesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!proto.jsettlers.ResourceType} value
 * @param {number=} opt_index
 */
proto.jsettlers.LooseResources.prototype.addResources = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.jsettlers.LooseResources.prototype.clearResourcesList = function() {
  this.setResourcesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jsettlers.RobPlayer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.jsettlers.RobPlayer.oneofGroups_);
};
goog.inherits(proto.jsettlers.RobPlayer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jsettlers.RobPlayer.displayName = 'proto.jsettlers.RobPlayer';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.jsettlers.RobPlayer.oneofGroups_ = [[1],[2]];

/**
 * @enum {number}
 */
proto.jsettlers.RobPlayer.OpponentIdValueCase = {
  OPPONENT_ID_VALUE_NOT_SET: 0,
  OPPONENT_ID: 1
};

/**
 * @return {proto.jsettlers.RobPlayer.OpponentIdValueCase}
 */
proto.jsettlers.RobPlayer.prototype.getOpponentIdValueCase = function() {
  return /** @type {proto.jsettlers.RobPlayer.OpponentIdValueCase} */(jspb.Message.computeOneofCase(this, proto.jsettlers.RobPlayer.oneofGroups_[0]));
};

/**
 * @enum {number}
 */
proto.jsettlers.RobPlayer.ResourceTypeValueCase = {
  RESOURCE_TYPE_VALUE_NOT_SET: 0,
  RESOURCE_TYPE: 2
};

/**
 * @return {proto.jsettlers.RobPlayer.ResourceTypeValueCase}
 */
proto.jsettlers.RobPlayer.prototype.getResourceTypeValueCase = function() {
  return /** @type {proto.jsettlers.RobPlayer.ResourceTypeValueCase} */(jspb.Message.computeOneofCase(this, proto.jsettlers.RobPlayer.oneofGroups_[1]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jsettlers.RobPlayer.prototype.toObject = function(opt_includeInstance) {
  return proto.jsettlers.RobPlayer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jsettlers.RobPlayer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.RobPlayer.toObject = function(includeInstance, msg) {
  var f, obj = {
    opponentId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    resourceType: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jsettlers.RobPlayer}
 */
proto.jsettlers.RobPlayer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jsettlers.RobPlayer;
  return proto.jsettlers.RobPlayer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jsettlers.RobPlayer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jsettlers.RobPlayer}
 */
proto.jsettlers.RobPlayer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOpponentId(value);
      break;
    case 2:
      var value = /** @type {!proto.jsettlers.ResourceType} */ (reader.readEnum());
      msg.setResourceType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jsettlers.RobPlayer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jsettlers.RobPlayer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jsettlers.RobPlayer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.RobPlayer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {!proto.jsettlers.ResourceType} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional int32 opponent_id = 1;
 * @return {number}
 */
proto.jsettlers.RobPlayer.prototype.getOpponentId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.jsettlers.RobPlayer.prototype.setOpponentId = function(value) {
  jspb.Message.setOneofField(this, 1, proto.jsettlers.RobPlayer.oneofGroups_[0], value);
};


proto.jsettlers.RobPlayer.prototype.clearOpponentId = function() {
  jspb.Message.setOneofField(this, 1, proto.jsettlers.RobPlayer.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jsettlers.RobPlayer.prototype.hasOpponentId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ResourceType resource_type = 2;
 * @return {!proto.jsettlers.ResourceType}
 */
proto.jsettlers.RobPlayer.prototype.getResourceType = function() {
  return /** @type {!proto.jsettlers.ResourceType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.jsettlers.ResourceType} value */
proto.jsettlers.RobPlayer.prototype.setResourceType = function(value) {
  jspb.Message.setOneofField(this, 2, proto.jsettlers.RobPlayer.oneofGroups_[1], value);
};


proto.jsettlers.RobPlayer.prototype.clearResourceType = function() {
  jspb.Message.setOneofField(this, 2, proto.jsettlers.RobPlayer.oneofGroups_[1], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jsettlers.RobPlayer.prototype.hasResourceType = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jsettlers.MoveRobber = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jsettlers.MoveRobber, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jsettlers.MoveRobber.displayName = 'proto.jsettlers.MoveRobber';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jsettlers.MoveRobber.prototype.toObject = function(opt_includeInstance) {
  return proto.jsettlers.MoveRobber.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jsettlers.MoveRobber} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.MoveRobber.toObject = function(includeInstance, msg) {
  var f, obj = {
    coord: (f = msg.getCoord()) && proto.jsettlers.Coord.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jsettlers.MoveRobber}
 */
proto.jsettlers.MoveRobber.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jsettlers.MoveRobber;
  return proto.jsettlers.MoveRobber.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jsettlers.MoveRobber} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jsettlers.MoveRobber}
 */
proto.jsettlers.MoveRobber.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.jsettlers.Coord;
      reader.readMessage(value,proto.jsettlers.Coord.deserializeBinaryFromReader);
      msg.setCoord(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jsettlers.MoveRobber.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jsettlers.MoveRobber.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jsettlers.MoveRobber} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.MoveRobber.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCoord();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.jsettlers.Coord.serializeBinaryToWriter
    );
  }
};


/**
 * optional Coord coord = 1;
 * @return {?proto.jsettlers.Coord}
 */
proto.jsettlers.MoveRobber.prototype.getCoord = function() {
  return /** @type{?proto.jsettlers.Coord} */ (
    jspb.Message.getWrapperField(this, proto.jsettlers.Coord, 1));
};


/** @param {?proto.jsettlers.Coord|undefined} value */
proto.jsettlers.MoveRobber.prototype.setCoord = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.jsettlers.MoveRobber.prototype.clearCoord = function() {
  this.setCoord(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jsettlers.MoveRobber.prototype.hasCoord = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jsettlers.EndTurn = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jsettlers.EndTurn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jsettlers.EndTurn.displayName = 'proto.jsettlers.EndTurn';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jsettlers.EndTurn.prototype.toObject = function(opt_includeInstance) {
  return proto.jsettlers.EndTurn.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jsettlers.EndTurn} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.EndTurn.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jsettlers.EndTurn}
 */
proto.jsettlers.EndTurn.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jsettlers.EndTurn;
  return proto.jsettlers.EndTurn.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jsettlers.EndTurn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jsettlers.EndTurn}
 */
proto.jsettlers.EndTurn.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jsettlers.EndTurn.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jsettlers.EndTurn.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jsettlers.EndTurn} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.EndTurn.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jsettlers.StartGame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jsettlers.StartGame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jsettlers.StartGame.displayName = 'proto.jsettlers.StartGame';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jsettlers.StartGame.prototype.toObject = function(opt_includeInstance) {
  return proto.jsettlers.StartGame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jsettlers.StartGame} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.StartGame.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jsettlers.StartGame}
 */
proto.jsettlers.StartGame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jsettlers.StartGame;
  return proto.jsettlers.StartGame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jsettlers.StartGame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jsettlers.StartGame}
 */
proto.jsettlers.StartGame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jsettlers.StartGame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jsettlers.StartGame.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jsettlers.StartGame} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.StartGame.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jsettlers.GameActionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.jsettlers.GameActionRequest.oneofGroups_);
};
goog.inherits(proto.jsettlers.GameActionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jsettlers.GameActionRequest.displayName = 'proto.jsettlers.GameActionRequest';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.jsettlers.GameActionRequest.oneofGroups_ = [[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]];

/**
 * @enum {number}
 */
proto.jsettlers.GameActionRequest.ActionCase = {
  ACTION_NOT_SET: 0,
  BUILD_TOWN: 2,
  BUILD_ROAD: 3,
  BUILD_CITY: 4,
  BUY_DEVELOPMENT_CARD: 5,
  PLAY_DEVELOPMENT_CARD: 6,
  TRADE_BANK: 7,
  ROLL_DICE: 8,
  OFFER_TRADE: 9,
  REJECT_OFFER: 10,
  COUNTER_OFFER: 11,
  ACCEPT_OFFER: 12,
  TRADE_PLAYER: 13,
  LOOSE_RESOURCES: 14,
  ROB_PLAYER: 15,
  MOVE_ROBBER: 16,
  END_TURN: 17,
  START_GAME: 18
};

/**
 * @return {proto.jsettlers.GameActionRequest.ActionCase}
 */
proto.jsettlers.GameActionRequest.prototype.getActionCase = function() {
  return /** @type {proto.jsettlers.GameActionRequest.ActionCase} */(jspb.Message.computeOneofCase(this, proto.jsettlers.GameActionRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jsettlers.GameActionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.jsettlers.GameActionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jsettlers.GameActionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.GameActionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    buildTown: (f = msg.getBuildTown()) && proto.jsettlers.BuildTown.toObject(includeInstance, f),
    buildRoad: (f = msg.getBuildRoad()) && proto.jsettlers.BuildRoad.toObject(includeInstance, f),
    buildCity: (f = msg.getBuildCity()) && proto.jsettlers.BuildCity.toObject(includeInstance, f),
    buyDevelopmentCard: (f = msg.getBuyDevelopmentCard()) && proto.jsettlers.BuyDevelopmentCard.toObject(includeInstance, f),
    playDevelopmentCard: (f = msg.getPlayDevelopmentCard()) && proto.jsettlers.PlayDevelopmentCard.toObject(includeInstance, f),
    tradeBank: (f = msg.getTradeBank()) && proto.jsettlers.TradeBank.toObject(includeInstance, f),
    rollDice: (f = msg.getRollDice()) && proto.jsettlers.RollDice.toObject(includeInstance, f),
    offerTrade: (f = msg.getOfferTrade()) && proto.jsettlers.OfferTrade.toObject(includeInstance, f),
    rejectOffer: (f = msg.getRejectOffer()) && proto.jsettlers.RejectOffer.toObject(includeInstance, f),
    counterOffer: (f = msg.getCounterOffer()) && proto.jsettlers.CounterOffer.toObject(includeInstance, f),
    acceptOffer: (f = msg.getAcceptOffer()) && proto.jsettlers.AcceptOffer.toObject(includeInstance, f),
    tradePlayer: (f = msg.getTradePlayer()) && proto.jsettlers.TradePlayer.toObject(includeInstance, f),
    looseResources: (f = msg.getLooseResources()) && proto.jsettlers.LooseResources.toObject(includeInstance, f),
    robPlayer: (f = msg.getRobPlayer()) && proto.jsettlers.RobPlayer.toObject(includeInstance, f),
    moveRobber: (f = msg.getMoveRobber()) && proto.jsettlers.MoveRobber.toObject(includeInstance, f),
    endTurn: (f = msg.getEndTurn()) && proto.jsettlers.EndTurn.toObject(includeInstance, f),
    startGame: (f = msg.getStartGame()) && proto.jsettlers.StartGame.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jsettlers.GameActionRequest}
 */
proto.jsettlers.GameActionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jsettlers.GameActionRequest;
  return proto.jsettlers.GameActionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jsettlers.GameActionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jsettlers.GameActionRequest}
 */
proto.jsettlers.GameActionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new proto.jsettlers.BuildTown;
      reader.readMessage(value,proto.jsettlers.BuildTown.deserializeBinaryFromReader);
      msg.setBuildTown(value);
      break;
    case 3:
      var value = new proto.jsettlers.BuildRoad;
      reader.readMessage(value,proto.jsettlers.BuildRoad.deserializeBinaryFromReader);
      msg.setBuildRoad(value);
      break;
    case 4:
      var value = new proto.jsettlers.BuildCity;
      reader.readMessage(value,proto.jsettlers.BuildCity.deserializeBinaryFromReader);
      msg.setBuildCity(value);
      break;
    case 5:
      var value = new proto.jsettlers.BuyDevelopmentCard;
      reader.readMessage(value,proto.jsettlers.BuyDevelopmentCard.deserializeBinaryFromReader);
      msg.setBuyDevelopmentCard(value);
      break;
    case 6:
      var value = new proto.jsettlers.PlayDevelopmentCard;
      reader.readMessage(value,proto.jsettlers.PlayDevelopmentCard.deserializeBinaryFromReader);
      msg.setPlayDevelopmentCard(value);
      break;
    case 7:
      var value = new proto.jsettlers.TradeBank;
      reader.readMessage(value,proto.jsettlers.TradeBank.deserializeBinaryFromReader);
      msg.setTradeBank(value);
      break;
    case 8:
      var value = new proto.jsettlers.RollDice;
      reader.readMessage(value,proto.jsettlers.RollDice.deserializeBinaryFromReader);
      msg.setRollDice(value);
      break;
    case 9:
      var value = new proto.jsettlers.OfferTrade;
      reader.readMessage(value,proto.jsettlers.OfferTrade.deserializeBinaryFromReader);
      msg.setOfferTrade(value);
      break;
    case 10:
      var value = new proto.jsettlers.RejectOffer;
      reader.readMessage(value,proto.jsettlers.RejectOffer.deserializeBinaryFromReader);
      msg.setRejectOffer(value);
      break;
    case 11:
      var value = new proto.jsettlers.CounterOffer;
      reader.readMessage(value,proto.jsettlers.CounterOffer.deserializeBinaryFromReader);
      msg.setCounterOffer(value);
      break;
    case 12:
      var value = new proto.jsettlers.AcceptOffer;
      reader.readMessage(value,proto.jsettlers.AcceptOffer.deserializeBinaryFromReader);
      msg.setAcceptOffer(value);
      break;
    case 13:
      var value = new proto.jsettlers.TradePlayer;
      reader.readMessage(value,proto.jsettlers.TradePlayer.deserializeBinaryFromReader);
      msg.setTradePlayer(value);
      break;
    case 14:
      var value = new proto.jsettlers.LooseResources;
      reader.readMessage(value,proto.jsettlers.LooseResources.deserializeBinaryFromReader);
      msg.setLooseResources(value);
      break;
    case 15:
      var value = new proto.jsettlers.RobPlayer;
      reader.readMessage(value,proto.jsettlers.RobPlayer.deserializeBinaryFromReader);
      msg.setRobPlayer(value);
      break;
    case 16:
      var value = new proto.jsettlers.MoveRobber;
      reader.readMessage(value,proto.jsettlers.MoveRobber.deserializeBinaryFromReader);
      msg.setMoveRobber(value);
      break;
    case 17:
      var value = new proto.jsettlers.EndTurn;
      reader.readMessage(value,proto.jsettlers.EndTurn.deserializeBinaryFromReader);
      msg.setEndTurn(value);
      break;
    case 18:
      var value = new proto.jsettlers.StartGame;
      reader.readMessage(value,proto.jsettlers.StartGame.deserializeBinaryFromReader);
      msg.setStartGame(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jsettlers.GameActionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jsettlers.GameActionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jsettlers.GameActionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.GameActionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getBuildTown();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.jsettlers.BuildTown.serializeBinaryToWriter
    );
  }
  f = message.getBuildRoad();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.jsettlers.BuildRoad.serializeBinaryToWriter
    );
  }
  f = message.getBuildCity();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.jsettlers.BuildCity.serializeBinaryToWriter
    );
  }
  f = message.getBuyDevelopmentCard();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.jsettlers.BuyDevelopmentCard.serializeBinaryToWriter
    );
  }
  f = message.getPlayDevelopmentCard();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.jsettlers.PlayDevelopmentCard.serializeBinaryToWriter
    );
  }
  f = message.getTradeBank();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.jsettlers.TradeBank.serializeBinaryToWriter
    );
  }
  f = message.getRollDice();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.jsettlers.RollDice.serializeBinaryToWriter
    );
  }
  f = message.getOfferTrade();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.jsettlers.OfferTrade.serializeBinaryToWriter
    );
  }
  f = message.getRejectOffer();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.jsettlers.RejectOffer.serializeBinaryToWriter
    );
  }
  f = message.getCounterOffer();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.jsettlers.CounterOffer.serializeBinaryToWriter
    );
  }
  f = message.getAcceptOffer();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.jsettlers.AcceptOffer.serializeBinaryToWriter
    );
  }
  f = message.getTradePlayer();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.jsettlers.TradePlayer.serializeBinaryToWriter
    );
  }
  f = message.getLooseResources();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.jsettlers.LooseResources.serializeBinaryToWriter
    );
  }
  f = message.getRobPlayer();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.jsettlers.RobPlayer.serializeBinaryToWriter
    );
  }
  f = message.getMoveRobber();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.jsettlers.MoveRobber.serializeBinaryToWriter
    );
  }
  f = message.getEndTurn();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.jsettlers.EndTurn.serializeBinaryToWriter
    );
  }
  f = message.getStartGame();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.jsettlers.StartGame.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 request_id = 1;
 * @return {number}
 */
proto.jsettlers.GameActionRequest.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.jsettlers.GameActionRequest.prototype.setRequestId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional BuildTown build_town = 2;
 * @return {?proto.jsettlers.BuildTown}
 */
proto.jsettlers.GameActionRequest.prototype.getBuildTown = function() {
  return /** @type{?proto.jsettlers.BuildTown} */ (
    jspb.Message.getWrapperField(this, proto.jsettlers.BuildTown, 2));
};


/** @param {?proto.jsettlers.BuildTown|undefined} value */
proto.jsettlers.GameActionRequest.prototype.setBuildTown = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.jsettlers.GameActionRequest.oneofGroups_[0], value);
};


proto.jsettlers.GameActionRequest.prototype.clearBuildTown = function() {
  this.setBuildTown(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jsettlers.GameActionRequest.prototype.hasBuildTown = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional BuildRoad build_road = 3;
 * @return {?proto.jsettlers.BuildRoad}
 */
proto.jsettlers.GameActionRequest.prototype.getBuildRoad = function() {
  return /** @type{?proto.jsettlers.BuildRoad} */ (
    jspb.Message.getWrapperField(this, proto.jsettlers.BuildRoad, 3));
};


/** @param {?proto.jsettlers.BuildRoad|undefined} value */
proto.jsettlers.GameActionRequest.prototype.setBuildRoad = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.jsettlers.GameActionRequest.oneofGroups_[0], value);
};


proto.jsettlers.GameActionRequest.prototype.clearBuildRoad = function() {
  this.setBuildRoad(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jsettlers.GameActionRequest.prototype.hasBuildRoad = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional BuildCity build_city = 4;
 * @return {?proto.jsettlers.BuildCity}
 */
proto.jsettlers.GameActionRequest.prototype.getBuildCity = function() {
  return /** @type{?proto.jsettlers.BuildCity} */ (
    jspb.Message.getWrapperField(this, proto.jsettlers.BuildCity, 4));
};


/** @param {?proto.jsettlers.BuildCity|undefined} value */
proto.jsettlers.GameActionRequest.prototype.setBuildCity = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.jsettlers.GameActionRequest.oneofGroups_[0], value);
};


proto.jsettlers.GameActionRequest.prototype.clearBuildCity = function() {
  this.setBuildCity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jsettlers.GameActionRequest.prototype.hasBuildCity = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional BuyDevelopmentCard buy_development_card = 5;
 * @return {?proto.jsettlers.BuyDevelopmentCard}
 */
proto.jsettlers.GameActionRequest.prototype.getBuyDevelopmentCard = function() {
  return /** @type{?proto.jsettlers.BuyDevelopmentCard} */ (
    jspb.Message.getWrapperField(this, proto.jsettlers.BuyDevelopmentCard, 5));
};


/** @param {?proto.jsettlers.BuyDevelopmentCard|undefined} value */
proto.jsettlers.GameActionRequest.prototype.setBuyDevelopmentCard = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.jsettlers.GameActionRequest.oneofGroups_[0], value);
};


proto.jsettlers.GameActionRequest.prototype.clearBuyDevelopmentCard = function() {
  this.setBuyDevelopmentCard(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jsettlers.GameActionRequest.prototype.hasBuyDevelopmentCard = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional PlayDevelopmentCard play_development_card = 6;
 * @return {?proto.jsettlers.PlayDevelopmentCard}
 */
proto.jsettlers.GameActionRequest.prototype.getPlayDevelopmentCard = function() {
  return /** @type{?proto.jsettlers.PlayDevelopmentCard} */ (
    jspb.Message.getWrapperField(this, proto.jsettlers.PlayDevelopmentCard, 6));
};


/** @param {?proto.jsettlers.PlayDevelopmentCard|undefined} value */
proto.jsettlers.GameActionRequest.prototype.setPlayDevelopmentCard = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.jsettlers.GameActionRequest.oneofGroups_[0], value);
};


proto.jsettlers.GameActionRequest.prototype.clearPlayDevelopmentCard = function() {
  this.setPlayDevelopmentCard(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jsettlers.GameActionRequest.prototype.hasPlayDevelopmentCard = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional TradeBank trade_bank = 7;
 * @return {?proto.jsettlers.TradeBank}
 */
proto.jsettlers.GameActionRequest.prototype.getTradeBank = function() {
  return /** @type{?proto.jsettlers.TradeBank} */ (
    jspb.Message.getWrapperField(this, proto.jsettlers.TradeBank, 7));
};


/** @param {?proto.jsettlers.TradeBank|undefined} value */
proto.jsettlers.GameActionRequest.prototype.setTradeBank = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.jsettlers.GameActionRequest.oneofGroups_[0], value);
};


proto.jsettlers.GameActionRequest.prototype.clearTradeBank = function() {
  this.setTradeBank(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jsettlers.GameActionRequest.prototype.hasTradeBank = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional RollDice roll_dice = 8;
 * @return {?proto.jsettlers.RollDice}
 */
proto.jsettlers.GameActionRequest.prototype.getRollDice = function() {
  return /** @type{?proto.jsettlers.RollDice} */ (
    jspb.Message.getWrapperField(this, proto.jsettlers.RollDice, 8));
};


/** @param {?proto.jsettlers.RollDice|undefined} value */
proto.jsettlers.GameActionRequest.prototype.setRollDice = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.jsettlers.GameActionRequest.oneofGroups_[0], value);
};


proto.jsettlers.GameActionRequest.prototype.clearRollDice = function() {
  this.setRollDice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jsettlers.GameActionRequest.prototype.hasRollDice = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional OfferTrade offer_trade = 9;
 * @return {?proto.jsettlers.OfferTrade}
 */
proto.jsettlers.GameActionRequest.prototype.getOfferTrade = function() {
  return /** @type{?proto.jsettlers.OfferTrade} */ (
    jspb.Message.getWrapperField(this, proto.jsettlers.OfferTrade, 9));
};


/** @param {?proto.jsettlers.OfferTrade|undefined} value */
proto.jsettlers.GameActionRequest.prototype.setOfferTrade = function(value) {
  jspb.Message.setOneofWrapperField(this, 9, proto.jsettlers.GameActionRequest.oneofGroups_[0], value);
};


proto.jsettlers.GameActionRequest.prototype.clearOfferTrade = function() {
  this.setOfferTrade(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jsettlers.GameActionRequest.prototype.hasOfferTrade = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional RejectOffer reject_offer = 10;
 * @return {?proto.jsettlers.RejectOffer}
 */
proto.jsettlers.GameActionRequest.prototype.getRejectOffer = function() {
  return /** @type{?proto.jsettlers.RejectOffer} */ (
    jspb.Message.getWrapperField(this, proto.jsettlers.RejectOffer, 10));
};


/** @param {?proto.jsettlers.RejectOffer|undefined} value */
proto.jsettlers.GameActionRequest.prototype.setRejectOffer = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.jsettlers.GameActionRequest.oneofGroups_[0], value);
};


proto.jsettlers.GameActionRequest.prototype.clearRejectOffer = function() {
  this.setRejectOffer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jsettlers.GameActionRequest.prototype.hasRejectOffer = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional CounterOffer counter_offer = 11;
 * @return {?proto.jsettlers.CounterOffer}
 */
proto.jsettlers.GameActionRequest.prototype.getCounterOffer = function() {
  return /** @type{?proto.jsettlers.CounterOffer} */ (
    jspb.Message.getWrapperField(this, proto.jsettlers.CounterOffer, 11));
};


/** @param {?proto.jsettlers.CounterOffer|undefined} value */
proto.jsettlers.GameActionRequest.prototype.setCounterOffer = function(value) {
  jspb.Message.setOneofWrapperField(this, 11, proto.jsettlers.GameActionRequest.oneofGroups_[0], value);
};


proto.jsettlers.GameActionRequest.prototype.clearCounterOffer = function() {
  this.setCounterOffer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jsettlers.GameActionRequest.prototype.hasCounterOffer = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional AcceptOffer accept_offer = 12;
 * @return {?proto.jsettlers.AcceptOffer}
 */
proto.jsettlers.GameActionRequest.prototype.getAcceptOffer = function() {
  return /** @type{?proto.jsettlers.AcceptOffer} */ (
    jspb.Message.getWrapperField(this, proto.jsettlers.AcceptOffer, 12));
};


/** @param {?proto.jsettlers.AcceptOffer|undefined} value */
proto.jsettlers.GameActionRequest.prototype.setAcceptOffer = function(value) {
  jspb.Message.setOneofWrapperField(this, 12, proto.jsettlers.GameActionRequest.oneofGroups_[0], value);
};


proto.jsettlers.GameActionRequest.prototype.clearAcceptOffer = function() {
  this.setAcceptOffer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jsettlers.GameActionRequest.prototype.hasAcceptOffer = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional TradePlayer trade_player = 13;
 * @return {?proto.jsettlers.TradePlayer}
 */
proto.jsettlers.GameActionRequest.prototype.getTradePlayer = function() {
  return /** @type{?proto.jsettlers.TradePlayer} */ (
    jspb.Message.getWrapperField(this, proto.jsettlers.TradePlayer, 13));
};


/** @param {?proto.jsettlers.TradePlayer|undefined} value */
proto.jsettlers.GameActionRequest.prototype.setTradePlayer = function(value) {
  jspb.Message.setOneofWrapperField(this, 13, proto.jsettlers.GameActionRequest.oneofGroups_[0], value);
};


proto.jsettlers.GameActionRequest.prototype.clearTradePlayer = function() {
  this.setTradePlayer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jsettlers.GameActionRequest.prototype.hasTradePlayer = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional LooseResources loose_resources = 14;
 * @return {?proto.jsettlers.LooseResources}
 */
proto.jsettlers.GameActionRequest.prototype.getLooseResources = function() {
  return /** @type{?proto.jsettlers.LooseResources} */ (
    jspb.Message.getWrapperField(this, proto.jsettlers.LooseResources, 14));
};


/** @param {?proto.jsettlers.LooseResources|undefined} value */
proto.jsettlers.GameActionRequest.prototype.setLooseResources = function(value) {
  jspb.Message.setOneofWrapperField(this, 14, proto.jsettlers.GameActionRequest.oneofGroups_[0], value);
};


proto.jsettlers.GameActionRequest.prototype.clearLooseResources = function() {
  this.setLooseResources(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jsettlers.GameActionRequest.prototype.hasLooseResources = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional RobPlayer rob_player = 15;
 * @return {?proto.jsettlers.RobPlayer}
 */
proto.jsettlers.GameActionRequest.prototype.getRobPlayer = function() {
  return /** @type{?proto.jsettlers.RobPlayer} */ (
    jspb.Message.getWrapperField(this, proto.jsettlers.RobPlayer, 15));
};


/** @param {?proto.jsettlers.RobPlayer|undefined} value */
proto.jsettlers.GameActionRequest.prototype.setRobPlayer = function(value) {
  jspb.Message.setOneofWrapperField(this, 15, proto.jsettlers.GameActionRequest.oneofGroups_[0], value);
};


proto.jsettlers.GameActionRequest.prototype.clearRobPlayer = function() {
  this.setRobPlayer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jsettlers.GameActionRequest.prototype.hasRobPlayer = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional MoveRobber move_robber = 16;
 * @return {?proto.jsettlers.MoveRobber}
 */
proto.jsettlers.GameActionRequest.prototype.getMoveRobber = function() {
  return /** @type{?proto.jsettlers.MoveRobber} */ (
    jspb.Message.getWrapperField(this, proto.jsettlers.MoveRobber, 16));
};


/** @param {?proto.jsettlers.MoveRobber|undefined} value */
proto.jsettlers.GameActionRequest.prototype.setMoveRobber = function(value) {
  jspb.Message.setOneofWrapperField(this, 16, proto.jsettlers.GameActionRequest.oneofGroups_[0], value);
};


proto.jsettlers.GameActionRequest.prototype.clearMoveRobber = function() {
  this.setMoveRobber(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jsettlers.GameActionRequest.prototype.hasMoveRobber = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional EndTurn end_turn = 17;
 * @return {?proto.jsettlers.EndTurn}
 */
proto.jsettlers.GameActionRequest.prototype.getEndTurn = function() {
  return /** @type{?proto.jsettlers.EndTurn} */ (
    jspb.Message.getWrapperField(this, proto.jsettlers.EndTurn, 17));
};


/** @param {?proto.jsettlers.EndTurn|undefined} value */
proto.jsettlers.GameActionRequest.prototype.setEndTurn = function(value) {
  jspb.Message.setOneofWrapperField(this, 17, proto.jsettlers.GameActionRequest.oneofGroups_[0], value);
};


proto.jsettlers.GameActionRequest.prototype.clearEndTurn = function() {
  this.setEndTurn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jsettlers.GameActionRequest.prototype.hasEndTurn = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional StartGame start_game = 18;
 * @return {?proto.jsettlers.StartGame}
 */
proto.jsettlers.GameActionRequest.prototype.getStartGame = function() {
  return /** @type{?proto.jsettlers.StartGame} */ (
    jspb.Message.getWrapperField(this, proto.jsettlers.StartGame, 18));
};


/** @param {?proto.jsettlers.StartGame|undefined} value */
proto.jsettlers.GameActionRequest.prototype.setStartGame = function(value) {
  jspb.Message.setOneofWrapperField(this, 18, proto.jsettlers.GameActionRequest.oneofGroups_[0], value);
};


proto.jsettlers.GameActionRequest.prototype.clearStartGame = function() {
  this.setStartGame(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jsettlers.GameActionRequest.prototype.hasStartGame = function() {
  return jspb.Message.getField(this, 18) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jsettlers.GameAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.jsettlers.GameAction.oneofGroups_);
};
goog.inherits(proto.jsettlers.GameAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jsettlers.GameAction.displayName = 'proto.jsettlers.GameAction';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.jsettlers.GameAction.oneofGroups_ = [[8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]];

/**
 * @enum {number}
 */
proto.jsettlers.GameAction.ActionCase = {
  ACTION_NOT_SET: 0,
  BUILD_TOWN: 8,
  BUILD_ROAD: 9,
  BUILD_CITY: 10,
  BUY_DEVELOPMENT_CARD: 11,
  PLAY_DEVELOPMENT_CARD: 12,
  TRADE_BANK: 13,
  ROLL_DICE: 14,
  OFFER_TRADE: 15,
  REJECT_OFFER: 16,
  COUNTER_OFFER: 17,
  ACCEPT_OFFER: 18,
  TRADE_PLAYER: 19,
  LOOSE_RESOURCES: 20,
  ROB_PLAYER: 21,
  MOVE_ROBBER: 22,
  END_TURN: 23,
  START_GAME: 24
};

/**
 * @return {proto.jsettlers.GameAction.ActionCase}
 */
proto.jsettlers.GameAction.prototype.getActionCase = function() {
  return /** @type {proto.jsettlers.GameAction.ActionCase} */(jspb.Message.computeOneofCase(this, proto.jsettlers.GameAction.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jsettlers.GameAction.prototype.toObject = function(opt_includeInstance) {
  return proto.jsettlers.GameAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jsettlers.GameAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.GameAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    gameId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    playerId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    userId: jspb.Message.getFieldWithDefault(msg, 4, 0),
    turnId: jspb.Message.getFieldWithDefault(msg, 5, 0),
    gamePhaseId: jspb.Message.getFieldWithDefault(msg, 6, 0),
    turnPhaseId: jspb.Message.getFieldWithDefault(msg, 7, 0),
    buildTown: (f = msg.getBuildTown()) && proto.jsettlers.BuildTown.toObject(includeInstance, f),
    buildRoad: (f = msg.getBuildRoad()) && proto.jsettlers.BuildRoad.toObject(includeInstance, f),
    buildCity: (f = msg.getBuildCity()) && proto.jsettlers.BuildCity.toObject(includeInstance, f),
    buyDevelopmentCard: (f = msg.getBuyDevelopmentCard()) && proto.jsettlers.BuyDevelopmentCard.toObject(includeInstance, f),
    playDevelopmentCard: (f = msg.getPlayDevelopmentCard()) && proto.jsettlers.PlayDevelopmentCard.toObject(includeInstance, f),
    tradeBank: (f = msg.getTradeBank()) && proto.jsettlers.TradeBank.toObject(includeInstance, f),
    rollDice: (f = msg.getRollDice()) && proto.jsettlers.RollDice.toObject(includeInstance, f),
    offerTrade: (f = msg.getOfferTrade()) && proto.jsettlers.OfferTrade.toObject(includeInstance, f),
    rejectOffer: (f = msg.getRejectOffer()) && proto.jsettlers.RejectOffer.toObject(includeInstance, f),
    counterOffer: (f = msg.getCounterOffer()) && proto.jsettlers.CounterOffer.toObject(includeInstance, f),
    acceptOffer: (f = msg.getAcceptOffer()) && proto.jsettlers.AcceptOffer.toObject(includeInstance, f),
    tradePlayer: (f = msg.getTradePlayer()) && proto.jsettlers.TradePlayer.toObject(includeInstance, f),
    looseResources: (f = msg.getLooseResources()) && proto.jsettlers.LooseResources.toObject(includeInstance, f),
    robPlayer: (f = msg.getRobPlayer()) && proto.jsettlers.RobPlayer.toObject(includeInstance, f),
    moveRobber: (f = msg.getMoveRobber()) && proto.jsettlers.MoveRobber.toObject(includeInstance, f),
    endTurn: (f = msg.getEndTurn()) && proto.jsettlers.EndTurn.toObject(includeInstance, f),
    startGame: (f = msg.getStartGame()) && proto.jsettlers.StartGame.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jsettlers.GameAction}
 */
proto.jsettlers.GameAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jsettlers.GameAction;
  return proto.jsettlers.GameAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jsettlers.GameAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jsettlers.GameAction}
 */
proto.jsettlers.GameAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGameId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlayerId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUserId(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTurnId(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGamePhaseId(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTurnPhaseId(value);
      break;
    case 8:
      var value = new proto.jsettlers.BuildTown;
      reader.readMessage(value,proto.jsettlers.BuildTown.deserializeBinaryFromReader);
      msg.setBuildTown(value);
      break;
    case 9:
      var value = new proto.jsettlers.BuildRoad;
      reader.readMessage(value,proto.jsettlers.BuildRoad.deserializeBinaryFromReader);
      msg.setBuildRoad(value);
      break;
    case 10:
      var value = new proto.jsettlers.BuildCity;
      reader.readMessage(value,proto.jsettlers.BuildCity.deserializeBinaryFromReader);
      msg.setBuildCity(value);
      break;
    case 11:
      var value = new proto.jsettlers.BuyDevelopmentCard;
      reader.readMessage(value,proto.jsettlers.BuyDevelopmentCard.deserializeBinaryFromReader);
      msg.setBuyDevelopmentCard(value);
      break;
    case 12:
      var value = new proto.jsettlers.PlayDevelopmentCard;
      reader.readMessage(value,proto.jsettlers.PlayDevelopmentCard.deserializeBinaryFromReader);
      msg.setPlayDevelopmentCard(value);
      break;
    case 13:
      var value = new proto.jsettlers.TradeBank;
      reader.readMessage(value,proto.jsettlers.TradeBank.deserializeBinaryFromReader);
      msg.setTradeBank(value);
      break;
    case 14:
      var value = new proto.jsettlers.RollDice;
      reader.readMessage(value,proto.jsettlers.RollDice.deserializeBinaryFromReader);
      msg.setRollDice(value);
      break;
    case 15:
      var value = new proto.jsettlers.OfferTrade;
      reader.readMessage(value,proto.jsettlers.OfferTrade.deserializeBinaryFromReader);
      msg.setOfferTrade(value);
      break;
    case 16:
      var value = new proto.jsettlers.RejectOffer;
      reader.readMessage(value,proto.jsettlers.RejectOffer.deserializeBinaryFromReader);
      msg.setRejectOffer(value);
      break;
    case 17:
      var value = new proto.jsettlers.CounterOffer;
      reader.readMessage(value,proto.jsettlers.CounterOffer.deserializeBinaryFromReader);
      msg.setCounterOffer(value);
      break;
    case 18:
      var value = new proto.jsettlers.AcceptOffer;
      reader.readMessage(value,proto.jsettlers.AcceptOffer.deserializeBinaryFromReader);
      msg.setAcceptOffer(value);
      break;
    case 19:
      var value = new proto.jsettlers.TradePlayer;
      reader.readMessage(value,proto.jsettlers.TradePlayer.deserializeBinaryFromReader);
      msg.setTradePlayer(value);
      break;
    case 20:
      var value = new proto.jsettlers.LooseResources;
      reader.readMessage(value,proto.jsettlers.LooseResources.deserializeBinaryFromReader);
      msg.setLooseResources(value);
      break;
    case 21:
      var value = new proto.jsettlers.RobPlayer;
      reader.readMessage(value,proto.jsettlers.RobPlayer.deserializeBinaryFromReader);
      msg.setRobPlayer(value);
      break;
    case 22:
      var value = new proto.jsettlers.MoveRobber;
      reader.readMessage(value,proto.jsettlers.MoveRobber.deserializeBinaryFromReader);
      msg.setMoveRobber(value);
      break;
    case 23:
      var value = new proto.jsettlers.EndTurn;
      reader.readMessage(value,proto.jsettlers.EndTurn.deserializeBinaryFromReader);
      msg.setEndTurn(value);
      break;
    case 24:
      var value = new proto.jsettlers.StartGame;
      reader.readMessage(value,proto.jsettlers.StartGame.deserializeBinaryFromReader);
      msg.setStartGame(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jsettlers.GameAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jsettlers.GameAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jsettlers.GameAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.GameAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getGameId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPlayerId();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getUserId();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getTurnId();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getGamePhaseId();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getTurnPhaseId();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getBuildTown();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.jsettlers.BuildTown.serializeBinaryToWriter
    );
  }
  f = message.getBuildRoad();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.jsettlers.BuildRoad.serializeBinaryToWriter
    );
  }
  f = message.getBuildCity();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.jsettlers.BuildCity.serializeBinaryToWriter
    );
  }
  f = message.getBuyDevelopmentCard();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.jsettlers.BuyDevelopmentCard.serializeBinaryToWriter
    );
  }
  f = message.getPlayDevelopmentCard();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.jsettlers.PlayDevelopmentCard.serializeBinaryToWriter
    );
  }
  f = message.getTradeBank();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.jsettlers.TradeBank.serializeBinaryToWriter
    );
  }
  f = message.getRollDice();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.jsettlers.RollDice.serializeBinaryToWriter
    );
  }
  f = message.getOfferTrade();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.jsettlers.OfferTrade.serializeBinaryToWriter
    );
  }
  f = message.getRejectOffer();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.jsettlers.RejectOffer.serializeBinaryToWriter
    );
  }
  f = message.getCounterOffer();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.jsettlers.CounterOffer.serializeBinaryToWriter
    );
  }
  f = message.getAcceptOffer();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.jsettlers.AcceptOffer.serializeBinaryToWriter
    );
  }
  f = message.getTradePlayer();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.jsettlers.TradePlayer.serializeBinaryToWriter
    );
  }
  f = message.getLooseResources();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.jsettlers.LooseResources.serializeBinaryToWriter
    );
  }
  f = message.getRobPlayer();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.jsettlers.RobPlayer.serializeBinaryToWriter
    );
  }
  f = message.getMoveRobber();
  if (f != null) {
    writer.writeMessage(
      22,
      f,
      proto.jsettlers.MoveRobber.serializeBinaryToWriter
    );
  }
  f = message.getEndTurn();
  if (f != null) {
    writer.writeMessage(
      23,
      f,
      proto.jsettlers.EndTurn.serializeBinaryToWriter
    );
  }
  f = message.getStartGame();
  if (f != null) {
    writer.writeMessage(
      24,
      f,
      proto.jsettlers.StartGame.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.jsettlers.GameAction.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.jsettlers.GameAction.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 game_id = 2;
 * @return {number}
 */
proto.jsettlers.GameAction.prototype.getGameId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.jsettlers.GameAction.prototype.setGameId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 player_id = 3;
 * @return {number}
 */
proto.jsettlers.GameAction.prototype.getPlayerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.jsettlers.GameAction.prototype.setPlayerId = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 user_id = 4;
 * @return {number}
 */
proto.jsettlers.GameAction.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.jsettlers.GameAction.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int32 turn_id = 5;
 * @return {number}
 */
proto.jsettlers.GameAction.prototype.getTurnId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.jsettlers.GameAction.prototype.setTurnId = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int32 game_phase_id = 6;
 * @return {number}
 */
proto.jsettlers.GameAction.prototype.getGamePhaseId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.jsettlers.GameAction.prototype.setGamePhaseId = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional int32 turn_phase_id = 7;
 * @return {number}
 */
proto.jsettlers.GameAction.prototype.getTurnPhaseId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.jsettlers.GameAction.prototype.setTurnPhaseId = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional BuildTown build_town = 8;
 * @return {?proto.jsettlers.BuildTown}
 */
proto.jsettlers.GameAction.prototype.getBuildTown = function() {
  return /** @type{?proto.jsettlers.BuildTown} */ (
    jspb.Message.getWrapperField(this, proto.jsettlers.BuildTown, 8));
};


/** @param {?proto.jsettlers.BuildTown|undefined} value */
proto.jsettlers.GameAction.prototype.setBuildTown = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.jsettlers.GameAction.oneofGroups_[0], value);
};


proto.jsettlers.GameAction.prototype.clearBuildTown = function() {
  this.setBuildTown(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jsettlers.GameAction.prototype.hasBuildTown = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional BuildRoad build_road = 9;
 * @return {?proto.jsettlers.BuildRoad}
 */
proto.jsettlers.GameAction.prototype.getBuildRoad = function() {
  return /** @type{?proto.jsettlers.BuildRoad} */ (
    jspb.Message.getWrapperField(this, proto.jsettlers.BuildRoad, 9));
};


/** @param {?proto.jsettlers.BuildRoad|undefined} value */
proto.jsettlers.GameAction.prototype.setBuildRoad = function(value) {
  jspb.Message.setOneofWrapperField(this, 9, proto.jsettlers.GameAction.oneofGroups_[0], value);
};


proto.jsettlers.GameAction.prototype.clearBuildRoad = function() {
  this.setBuildRoad(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jsettlers.GameAction.prototype.hasBuildRoad = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional BuildCity build_city = 10;
 * @return {?proto.jsettlers.BuildCity}
 */
proto.jsettlers.GameAction.prototype.getBuildCity = function() {
  return /** @type{?proto.jsettlers.BuildCity} */ (
    jspb.Message.getWrapperField(this, proto.jsettlers.BuildCity, 10));
};


/** @param {?proto.jsettlers.BuildCity|undefined} value */
proto.jsettlers.GameAction.prototype.setBuildCity = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.jsettlers.GameAction.oneofGroups_[0], value);
};


proto.jsettlers.GameAction.prototype.clearBuildCity = function() {
  this.setBuildCity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jsettlers.GameAction.prototype.hasBuildCity = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional BuyDevelopmentCard buy_development_card = 11;
 * @return {?proto.jsettlers.BuyDevelopmentCard}
 */
proto.jsettlers.GameAction.prototype.getBuyDevelopmentCard = function() {
  return /** @type{?proto.jsettlers.BuyDevelopmentCard} */ (
    jspb.Message.getWrapperField(this, proto.jsettlers.BuyDevelopmentCard, 11));
};


/** @param {?proto.jsettlers.BuyDevelopmentCard|undefined} value */
proto.jsettlers.GameAction.prototype.setBuyDevelopmentCard = function(value) {
  jspb.Message.setOneofWrapperField(this, 11, proto.jsettlers.GameAction.oneofGroups_[0], value);
};


proto.jsettlers.GameAction.prototype.clearBuyDevelopmentCard = function() {
  this.setBuyDevelopmentCard(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jsettlers.GameAction.prototype.hasBuyDevelopmentCard = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional PlayDevelopmentCard play_development_card = 12;
 * @return {?proto.jsettlers.PlayDevelopmentCard}
 */
proto.jsettlers.GameAction.prototype.getPlayDevelopmentCard = function() {
  return /** @type{?proto.jsettlers.PlayDevelopmentCard} */ (
    jspb.Message.getWrapperField(this, proto.jsettlers.PlayDevelopmentCard, 12));
};


/** @param {?proto.jsettlers.PlayDevelopmentCard|undefined} value */
proto.jsettlers.GameAction.prototype.setPlayDevelopmentCard = function(value) {
  jspb.Message.setOneofWrapperField(this, 12, proto.jsettlers.GameAction.oneofGroups_[0], value);
};


proto.jsettlers.GameAction.prototype.clearPlayDevelopmentCard = function() {
  this.setPlayDevelopmentCard(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jsettlers.GameAction.prototype.hasPlayDevelopmentCard = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional TradeBank trade_bank = 13;
 * @return {?proto.jsettlers.TradeBank}
 */
proto.jsettlers.GameAction.prototype.getTradeBank = function() {
  return /** @type{?proto.jsettlers.TradeBank} */ (
    jspb.Message.getWrapperField(this, proto.jsettlers.TradeBank, 13));
};


/** @param {?proto.jsettlers.TradeBank|undefined} value */
proto.jsettlers.GameAction.prototype.setTradeBank = function(value) {
  jspb.Message.setOneofWrapperField(this, 13, proto.jsettlers.GameAction.oneofGroups_[0], value);
};


proto.jsettlers.GameAction.prototype.clearTradeBank = function() {
  this.setTradeBank(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jsettlers.GameAction.prototype.hasTradeBank = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional RollDice roll_dice = 14;
 * @return {?proto.jsettlers.RollDice}
 */
proto.jsettlers.GameAction.prototype.getRollDice = function() {
  return /** @type{?proto.jsettlers.RollDice} */ (
    jspb.Message.getWrapperField(this, proto.jsettlers.RollDice, 14));
};


/** @param {?proto.jsettlers.RollDice|undefined} value */
proto.jsettlers.GameAction.prototype.setRollDice = function(value) {
  jspb.Message.setOneofWrapperField(this, 14, proto.jsettlers.GameAction.oneofGroups_[0], value);
};


proto.jsettlers.GameAction.prototype.clearRollDice = function() {
  this.setRollDice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jsettlers.GameAction.prototype.hasRollDice = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional OfferTrade offer_trade = 15;
 * @return {?proto.jsettlers.OfferTrade}
 */
proto.jsettlers.GameAction.prototype.getOfferTrade = function() {
  return /** @type{?proto.jsettlers.OfferTrade} */ (
    jspb.Message.getWrapperField(this, proto.jsettlers.OfferTrade, 15));
};


/** @param {?proto.jsettlers.OfferTrade|undefined} value */
proto.jsettlers.GameAction.prototype.setOfferTrade = function(value) {
  jspb.Message.setOneofWrapperField(this, 15, proto.jsettlers.GameAction.oneofGroups_[0], value);
};


proto.jsettlers.GameAction.prototype.clearOfferTrade = function() {
  this.setOfferTrade(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jsettlers.GameAction.prototype.hasOfferTrade = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional RejectOffer reject_offer = 16;
 * @return {?proto.jsettlers.RejectOffer}
 */
proto.jsettlers.GameAction.prototype.getRejectOffer = function() {
  return /** @type{?proto.jsettlers.RejectOffer} */ (
    jspb.Message.getWrapperField(this, proto.jsettlers.RejectOffer, 16));
};


/** @param {?proto.jsettlers.RejectOffer|undefined} value */
proto.jsettlers.GameAction.prototype.setRejectOffer = function(value) {
  jspb.Message.setOneofWrapperField(this, 16, proto.jsettlers.GameAction.oneofGroups_[0], value);
};


proto.jsettlers.GameAction.prototype.clearRejectOffer = function() {
  this.setRejectOffer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jsettlers.GameAction.prototype.hasRejectOffer = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional CounterOffer counter_offer = 17;
 * @return {?proto.jsettlers.CounterOffer}
 */
proto.jsettlers.GameAction.prototype.getCounterOffer = function() {
  return /** @type{?proto.jsettlers.CounterOffer} */ (
    jspb.Message.getWrapperField(this, proto.jsettlers.CounterOffer, 17));
};


/** @param {?proto.jsettlers.CounterOffer|undefined} value */
proto.jsettlers.GameAction.prototype.setCounterOffer = function(value) {
  jspb.Message.setOneofWrapperField(this, 17, proto.jsettlers.GameAction.oneofGroups_[0], value);
};


proto.jsettlers.GameAction.prototype.clearCounterOffer = function() {
  this.setCounterOffer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jsettlers.GameAction.prototype.hasCounterOffer = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional AcceptOffer accept_offer = 18;
 * @return {?proto.jsettlers.AcceptOffer}
 */
proto.jsettlers.GameAction.prototype.getAcceptOffer = function() {
  return /** @type{?proto.jsettlers.AcceptOffer} */ (
    jspb.Message.getWrapperField(this, proto.jsettlers.AcceptOffer, 18));
};


/** @param {?proto.jsettlers.AcceptOffer|undefined} value */
proto.jsettlers.GameAction.prototype.setAcceptOffer = function(value) {
  jspb.Message.setOneofWrapperField(this, 18, proto.jsettlers.GameAction.oneofGroups_[0], value);
};


proto.jsettlers.GameAction.prototype.clearAcceptOffer = function() {
  this.setAcceptOffer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jsettlers.GameAction.prototype.hasAcceptOffer = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional TradePlayer trade_player = 19;
 * @return {?proto.jsettlers.TradePlayer}
 */
proto.jsettlers.GameAction.prototype.getTradePlayer = function() {
  return /** @type{?proto.jsettlers.TradePlayer} */ (
    jspb.Message.getWrapperField(this, proto.jsettlers.TradePlayer, 19));
};


/** @param {?proto.jsettlers.TradePlayer|undefined} value */
proto.jsettlers.GameAction.prototype.setTradePlayer = function(value) {
  jspb.Message.setOneofWrapperField(this, 19, proto.jsettlers.GameAction.oneofGroups_[0], value);
};


proto.jsettlers.GameAction.prototype.clearTradePlayer = function() {
  this.setTradePlayer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jsettlers.GameAction.prototype.hasTradePlayer = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional LooseResources loose_resources = 20;
 * @return {?proto.jsettlers.LooseResources}
 */
proto.jsettlers.GameAction.prototype.getLooseResources = function() {
  return /** @type{?proto.jsettlers.LooseResources} */ (
    jspb.Message.getWrapperField(this, proto.jsettlers.LooseResources, 20));
};


/** @param {?proto.jsettlers.LooseResources|undefined} value */
proto.jsettlers.GameAction.prototype.setLooseResources = function(value) {
  jspb.Message.setOneofWrapperField(this, 20, proto.jsettlers.GameAction.oneofGroups_[0], value);
};


proto.jsettlers.GameAction.prototype.clearLooseResources = function() {
  this.setLooseResources(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jsettlers.GameAction.prototype.hasLooseResources = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional RobPlayer rob_player = 21;
 * @return {?proto.jsettlers.RobPlayer}
 */
proto.jsettlers.GameAction.prototype.getRobPlayer = function() {
  return /** @type{?proto.jsettlers.RobPlayer} */ (
    jspb.Message.getWrapperField(this, proto.jsettlers.RobPlayer, 21));
};


/** @param {?proto.jsettlers.RobPlayer|undefined} value */
proto.jsettlers.GameAction.prototype.setRobPlayer = function(value) {
  jspb.Message.setOneofWrapperField(this, 21, proto.jsettlers.GameAction.oneofGroups_[0], value);
};


proto.jsettlers.GameAction.prototype.clearRobPlayer = function() {
  this.setRobPlayer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jsettlers.GameAction.prototype.hasRobPlayer = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional MoveRobber move_robber = 22;
 * @return {?proto.jsettlers.MoveRobber}
 */
proto.jsettlers.GameAction.prototype.getMoveRobber = function() {
  return /** @type{?proto.jsettlers.MoveRobber} */ (
    jspb.Message.getWrapperField(this, proto.jsettlers.MoveRobber, 22));
};


/** @param {?proto.jsettlers.MoveRobber|undefined} value */
proto.jsettlers.GameAction.prototype.setMoveRobber = function(value) {
  jspb.Message.setOneofWrapperField(this, 22, proto.jsettlers.GameAction.oneofGroups_[0], value);
};


proto.jsettlers.GameAction.prototype.clearMoveRobber = function() {
  this.setMoveRobber(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jsettlers.GameAction.prototype.hasMoveRobber = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional EndTurn end_turn = 23;
 * @return {?proto.jsettlers.EndTurn}
 */
proto.jsettlers.GameAction.prototype.getEndTurn = function() {
  return /** @type{?proto.jsettlers.EndTurn} */ (
    jspb.Message.getWrapperField(this, proto.jsettlers.EndTurn, 23));
};


/** @param {?proto.jsettlers.EndTurn|undefined} value */
proto.jsettlers.GameAction.prototype.setEndTurn = function(value) {
  jspb.Message.setOneofWrapperField(this, 23, proto.jsettlers.GameAction.oneofGroups_[0], value);
};


proto.jsettlers.GameAction.prototype.clearEndTurn = function() {
  this.setEndTurn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jsettlers.GameAction.prototype.hasEndTurn = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional StartGame start_game = 24;
 * @return {?proto.jsettlers.StartGame}
 */
proto.jsettlers.GameAction.prototype.getStartGame = function() {
  return /** @type{?proto.jsettlers.StartGame} */ (
    jspb.Message.getWrapperField(this, proto.jsettlers.StartGame, 24));
};


/** @param {?proto.jsettlers.StartGame|undefined} value */
proto.jsettlers.GameAction.prototype.setStartGame = function(value) {
  jspb.Message.setOneofWrapperField(this, 24, proto.jsettlers.GameAction.oneofGroups_[0], value);
};


proto.jsettlers.GameAction.prototype.clearStartGame = function() {
  this.setStartGame(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jsettlers.GameAction.prototype.hasStartGame = function() {
  return jspb.Message.getField(this, 24) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jsettlers.DevelopmentCard = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.jsettlers.DevelopmentCard.oneofGroups_);
};
goog.inherits(proto.jsettlers.DevelopmentCard, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jsettlers.DevelopmentCard.displayName = 'proto.jsettlers.DevelopmentCard';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.jsettlers.DevelopmentCard.oneofGroups_ = [[4,5,6,7,8]];

/**
 * @enum {number}
 */
proto.jsettlers.DevelopmentCard.DevelopmentCardCase = {
  DEVELOPMENT_CARD_NOT_SET: 0,
  VICTORY_POINT: 4,
  YEAR_OF_PLENTY: 5,
  SOLDIER: 6,
  MONOPOLY: 7,
  ROAD_BUILDING: 8
};

/**
 * @return {proto.jsettlers.DevelopmentCard.DevelopmentCardCase}
 */
proto.jsettlers.DevelopmentCard.prototype.getDevelopmentCardCase = function() {
  return /** @type {proto.jsettlers.DevelopmentCard.DevelopmentCardCase} */(jspb.Message.computeOneofCase(this, proto.jsettlers.DevelopmentCard.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jsettlers.DevelopmentCard.prototype.toObject = function(opt_includeInstance) {
  return proto.jsettlers.DevelopmentCard.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jsettlers.DevelopmentCard} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.DevelopmentCard.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    turnBoughtIndex: jspb.Message.getFieldWithDefault(msg, 2, 0),
    turnPlayedIndex: jspb.Message.getFieldWithDefault(msg, 3, 0),
    victoryPoint: (f = msg.getVictoryPoint()) && proto.jsettlers.VictoryPoint.toObject(includeInstance, f),
    yearOfPlenty: (f = msg.getYearOfPlenty()) && proto.jsettlers.YearOfPlenty.toObject(includeInstance, f),
    soldier: (f = msg.getSoldier()) && proto.jsettlers.Soldier.toObject(includeInstance, f),
    monopoly: (f = msg.getMonopoly()) && proto.jsettlers.Monopoly.toObject(includeInstance, f),
    roadBuilding: (f = msg.getRoadBuilding()) && proto.jsettlers.RoadBuilding.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jsettlers.DevelopmentCard}
 */
proto.jsettlers.DevelopmentCard.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jsettlers.DevelopmentCard;
  return proto.jsettlers.DevelopmentCard.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jsettlers.DevelopmentCard} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jsettlers.DevelopmentCard}
 */
proto.jsettlers.DevelopmentCard.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlayerId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTurnBoughtIndex(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTurnPlayedIndex(value);
      break;
    case 4:
      var value = new proto.jsettlers.VictoryPoint;
      reader.readMessage(value,proto.jsettlers.VictoryPoint.deserializeBinaryFromReader);
      msg.setVictoryPoint(value);
      break;
    case 5:
      var value = new proto.jsettlers.YearOfPlenty;
      reader.readMessage(value,proto.jsettlers.YearOfPlenty.deserializeBinaryFromReader);
      msg.setYearOfPlenty(value);
      break;
    case 6:
      var value = new proto.jsettlers.Soldier;
      reader.readMessage(value,proto.jsettlers.Soldier.deserializeBinaryFromReader);
      msg.setSoldier(value);
      break;
    case 7:
      var value = new proto.jsettlers.Monopoly;
      reader.readMessage(value,proto.jsettlers.Monopoly.deserializeBinaryFromReader);
      msg.setMonopoly(value);
      break;
    case 8:
      var value = new proto.jsettlers.RoadBuilding;
      reader.readMessage(value,proto.jsettlers.RoadBuilding.deserializeBinaryFromReader);
      msg.setRoadBuilding(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jsettlers.DevelopmentCard.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jsettlers.DevelopmentCard.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jsettlers.DevelopmentCard} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.DevelopmentCard.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTurnBoughtIndex();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getTurnPlayedIndex();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getVictoryPoint();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.jsettlers.VictoryPoint.serializeBinaryToWriter
    );
  }
  f = message.getYearOfPlenty();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.jsettlers.YearOfPlenty.serializeBinaryToWriter
    );
  }
  f = message.getSoldier();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.jsettlers.Soldier.serializeBinaryToWriter
    );
  }
  f = message.getMonopoly();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.jsettlers.Monopoly.serializeBinaryToWriter
    );
  }
  f = message.getRoadBuilding();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.jsettlers.RoadBuilding.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 player_id = 1;
 * @return {number}
 */
proto.jsettlers.DevelopmentCard.prototype.getPlayerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.jsettlers.DevelopmentCard.prototype.setPlayerId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 turn_bought_index = 2;
 * @return {number}
 */
proto.jsettlers.DevelopmentCard.prototype.getTurnBoughtIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.jsettlers.DevelopmentCard.prototype.setTurnBoughtIndex = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 turn_played_index = 3;
 * @return {number}
 */
proto.jsettlers.DevelopmentCard.prototype.getTurnPlayedIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.jsettlers.DevelopmentCard.prototype.setTurnPlayedIndex = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional VictoryPoint victory_point = 4;
 * @return {?proto.jsettlers.VictoryPoint}
 */
proto.jsettlers.DevelopmentCard.prototype.getVictoryPoint = function() {
  return /** @type{?proto.jsettlers.VictoryPoint} */ (
    jspb.Message.getWrapperField(this, proto.jsettlers.VictoryPoint, 4));
};


/** @param {?proto.jsettlers.VictoryPoint|undefined} value */
proto.jsettlers.DevelopmentCard.prototype.setVictoryPoint = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.jsettlers.DevelopmentCard.oneofGroups_[0], value);
};


proto.jsettlers.DevelopmentCard.prototype.clearVictoryPoint = function() {
  this.setVictoryPoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jsettlers.DevelopmentCard.prototype.hasVictoryPoint = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional YearOfPlenty year_of_plenty = 5;
 * @return {?proto.jsettlers.YearOfPlenty}
 */
proto.jsettlers.DevelopmentCard.prototype.getYearOfPlenty = function() {
  return /** @type{?proto.jsettlers.YearOfPlenty} */ (
    jspb.Message.getWrapperField(this, proto.jsettlers.YearOfPlenty, 5));
};


/** @param {?proto.jsettlers.YearOfPlenty|undefined} value */
proto.jsettlers.DevelopmentCard.prototype.setYearOfPlenty = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.jsettlers.DevelopmentCard.oneofGroups_[0], value);
};


proto.jsettlers.DevelopmentCard.prototype.clearYearOfPlenty = function() {
  this.setYearOfPlenty(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jsettlers.DevelopmentCard.prototype.hasYearOfPlenty = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Soldier soldier = 6;
 * @return {?proto.jsettlers.Soldier}
 */
proto.jsettlers.DevelopmentCard.prototype.getSoldier = function() {
  return /** @type{?proto.jsettlers.Soldier} */ (
    jspb.Message.getWrapperField(this, proto.jsettlers.Soldier, 6));
};


/** @param {?proto.jsettlers.Soldier|undefined} value */
proto.jsettlers.DevelopmentCard.prototype.setSoldier = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.jsettlers.DevelopmentCard.oneofGroups_[0], value);
};


proto.jsettlers.DevelopmentCard.prototype.clearSoldier = function() {
  this.setSoldier(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jsettlers.DevelopmentCard.prototype.hasSoldier = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Monopoly monopoly = 7;
 * @return {?proto.jsettlers.Monopoly}
 */
proto.jsettlers.DevelopmentCard.prototype.getMonopoly = function() {
  return /** @type{?proto.jsettlers.Monopoly} */ (
    jspb.Message.getWrapperField(this, proto.jsettlers.Monopoly, 7));
};


/** @param {?proto.jsettlers.Monopoly|undefined} value */
proto.jsettlers.DevelopmentCard.prototype.setMonopoly = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.jsettlers.DevelopmentCard.oneofGroups_[0], value);
};


proto.jsettlers.DevelopmentCard.prototype.clearMonopoly = function() {
  this.setMonopoly(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jsettlers.DevelopmentCard.prototype.hasMonopoly = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional RoadBuilding road_building = 8;
 * @return {?proto.jsettlers.RoadBuilding}
 */
proto.jsettlers.DevelopmentCard.prototype.getRoadBuilding = function() {
  return /** @type{?proto.jsettlers.RoadBuilding} */ (
    jspb.Message.getWrapperField(this, proto.jsettlers.RoadBuilding, 8));
};


/** @param {?proto.jsettlers.RoadBuilding|undefined} value */
proto.jsettlers.DevelopmentCard.prototype.setRoadBuilding = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.jsettlers.DevelopmentCard.oneofGroups_[0], value);
};


proto.jsettlers.DevelopmentCard.prototype.clearRoadBuilding = function() {
  this.setRoadBuilding(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jsettlers.DevelopmentCard.prototype.hasRoadBuilding = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jsettlers.VictoryPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jsettlers.VictoryPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jsettlers.VictoryPoint.displayName = 'proto.jsettlers.VictoryPoint';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jsettlers.VictoryPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.jsettlers.VictoryPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jsettlers.VictoryPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.VictoryPoint.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jsettlers.VictoryPoint}
 */
proto.jsettlers.VictoryPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jsettlers.VictoryPoint;
  return proto.jsettlers.VictoryPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jsettlers.VictoryPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jsettlers.VictoryPoint}
 */
proto.jsettlers.VictoryPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jsettlers.VictoryPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jsettlers.VictoryPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jsettlers.VictoryPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.VictoryPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jsettlers.YearOfPlenty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jsettlers.YearOfPlenty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jsettlers.YearOfPlenty.displayName = 'proto.jsettlers.YearOfPlenty';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jsettlers.YearOfPlenty.prototype.toObject = function(opt_includeInstance) {
  return proto.jsettlers.YearOfPlenty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jsettlers.YearOfPlenty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.YearOfPlenty.toObject = function(includeInstance, msg) {
  var f, obj = {
    resourceType1: jspb.Message.getFieldWithDefault(msg, 1, 0),
    resourceType2: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jsettlers.YearOfPlenty}
 */
proto.jsettlers.YearOfPlenty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jsettlers.YearOfPlenty;
  return proto.jsettlers.YearOfPlenty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jsettlers.YearOfPlenty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jsettlers.YearOfPlenty}
 */
proto.jsettlers.YearOfPlenty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.jsettlers.ResourceType} */ (reader.readEnum());
      msg.setResourceType1(value);
      break;
    case 2:
      var value = /** @type {!proto.jsettlers.ResourceType} */ (reader.readEnum());
      msg.setResourceType2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jsettlers.YearOfPlenty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jsettlers.YearOfPlenty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jsettlers.YearOfPlenty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.YearOfPlenty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResourceType1();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getResourceType2();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional ResourceType resource_type1 = 1;
 * @return {!proto.jsettlers.ResourceType}
 */
proto.jsettlers.YearOfPlenty.prototype.getResourceType1 = function() {
  return /** @type {!proto.jsettlers.ResourceType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.jsettlers.ResourceType} value */
proto.jsettlers.YearOfPlenty.prototype.setResourceType1 = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional ResourceType resource_type2 = 2;
 * @return {!proto.jsettlers.ResourceType}
 */
proto.jsettlers.YearOfPlenty.prototype.getResourceType2 = function() {
  return /** @type {!proto.jsettlers.ResourceType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.jsettlers.ResourceType} value */
proto.jsettlers.YearOfPlenty.prototype.setResourceType2 = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jsettlers.Soldier = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jsettlers.Soldier, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jsettlers.Soldier.displayName = 'proto.jsettlers.Soldier';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jsettlers.Soldier.prototype.toObject = function(opt_includeInstance) {
  return proto.jsettlers.Soldier.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jsettlers.Soldier} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.Soldier.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jsettlers.Soldier}
 */
proto.jsettlers.Soldier.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jsettlers.Soldier;
  return proto.jsettlers.Soldier.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jsettlers.Soldier} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jsettlers.Soldier}
 */
proto.jsettlers.Soldier.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jsettlers.Soldier.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jsettlers.Soldier.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jsettlers.Soldier} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.Soldier.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jsettlers.Monopoly = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jsettlers.Monopoly, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jsettlers.Monopoly.displayName = 'proto.jsettlers.Monopoly';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jsettlers.Monopoly.prototype.toObject = function(opt_includeInstance) {
  return proto.jsettlers.Monopoly.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jsettlers.Monopoly} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.Monopoly.toObject = function(includeInstance, msg) {
  var f, obj = {
    resourceType: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jsettlers.Monopoly}
 */
proto.jsettlers.Monopoly.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jsettlers.Monopoly;
  return proto.jsettlers.Monopoly.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jsettlers.Monopoly} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jsettlers.Monopoly}
 */
proto.jsettlers.Monopoly.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.jsettlers.ResourceType} */ (reader.readEnum());
      msg.setResourceType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jsettlers.Monopoly.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jsettlers.Monopoly.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jsettlers.Monopoly} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.Monopoly.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResourceType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional ResourceType resource_type = 1;
 * @return {!proto.jsettlers.ResourceType}
 */
proto.jsettlers.Monopoly.prototype.getResourceType = function() {
  return /** @type {!proto.jsettlers.ResourceType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.jsettlers.ResourceType} value */
proto.jsettlers.Monopoly.prototype.setResourceType = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jsettlers.RoadBuilding = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jsettlers.RoadBuilding, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jsettlers.RoadBuilding.displayName = 'proto.jsettlers.RoadBuilding';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jsettlers.RoadBuilding.prototype.toObject = function(opt_includeInstance) {
  return proto.jsettlers.RoadBuilding.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jsettlers.RoadBuilding} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.RoadBuilding.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jsettlers.RoadBuilding}
 */
proto.jsettlers.RoadBuilding.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jsettlers.RoadBuilding;
  return proto.jsettlers.RoadBuilding.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jsettlers.RoadBuilding} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jsettlers.RoadBuilding}
 */
proto.jsettlers.RoadBuilding.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jsettlers.RoadBuilding.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jsettlers.RoadBuilding.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jsettlers.RoadBuilding} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jsettlers.RoadBuilding.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.jsettlers.HexType = {
  NONEHEX: 0,
  RIVER: 1,
  MOUNTAIN: 2,
  PASTURE: 3,
  WHEATFIELD: 4,
  FOREST: 5,
  SEA: 6,
  DESERT: 7,
  HEXFROMBAG: 8
};

/**
 * @enum {number}
 */
proto.jsettlers.ChitType = {
  CHITNONE: 0,
  CHIT2: 1,
  CHIT3: 2,
  CHIT4: 3,
  CHIT5: 4,
  CHIT6: 5,
  CHIT8: 6,
  CHIT9: 7,
  CHIT10: 8,
  CHIT11: 9,
  CHIT12: 10,
  CHITFROMBAG: 11
};

/**
 * @enum {number}
 */
proto.jsettlers.PortType = {
  CLAY2TO1: 0,
  ORE2TO1: 1,
  SHEEP2TO1: 2,
  WHEAT2TO1: 3,
  TIMBER2TO1: 4,
  ANY3TO1: 5,
  ANY4TO1: 6,
  FROMBAG: 7
};

/**
 * @enum {number}
 */
proto.jsettlers.ResourceType = {
  TIMBER: 0,
  WHEAT: 1,
  ORE: 2,
  SHEEP: 3,
  BRICK: 4,
  GOLD: 5,
  UNKNOWN: 6
};

goog.object.extend(exports, proto.jsettlers);
