/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.carcattonne_data.ChitType', null, global);
goog.exportSymbol('proto.carcattonne_data.Coord', null, global);
goog.exportSymbol('proto.carcattonne_data.Coord1D', null, global);
goog.exportSymbol('proto.carcattonne_data.Coord2D', null, global);
goog.exportSymbol('proto.carcattonne_data.Coord3D', null, global);
goog.exportSymbol('proto.carcattonne_data.Edge', null, global);
goog.exportSymbol('proto.carcattonne_data.Hex', null, global);
goog.exportSymbol('proto.carcattonne_data.HexType', null, global);
goog.exportSymbol('proto.carcattonne_data.Node', null, global);
goog.exportSymbol('proto.carcattonne_data.PortType', null, global);
goog.exportSymbol('proto.carcattonne_data.ResourceType', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.carcattonne_data.Coord = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.carcattonne_data.Coord.oneofGroups_);
};
goog.inherits(proto.carcattonne_data.Coord, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.carcattonne_data.Coord.displayName = 'proto.carcattonne_data.Coord';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.carcattonne_data.Coord.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.carcattonne_data.Coord.CoordOneofCase = {
  COORD_ONEOF_NOT_SET: 0,
  COORD1D: 1,
  COORD2D: 2,
  COORD3D: 3
};

/**
 * @return {proto.carcattonne_data.Coord.CoordOneofCase}
 */
proto.carcattonne_data.Coord.prototype.getCoordOneofCase = function() {
  return /** @type {proto.carcattonne_data.Coord.CoordOneofCase} */(jspb.Message.computeOneofCase(this, proto.carcattonne_data.Coord.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.carcattonne_data.Coord.prototype.toObject = function(opt_includeInstance) {
  return proto.carcattonne_data.Coord.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.carcattonne_data.Coord} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.carcattonne_data.Coord.toObject = function(includeInstance, msg) {
  var f, obj = {
    coord1d: (f = msg.getCoord1d()) && proto.carcattonne_data.Coord1D.toObject(includeInstance, f),
    coord2d: (f = msg.getCoord2d()) && proto.carcattonne_data.Coord2D.toObject(includeInstance, f),
    coord3d: (f = msg.getCoord3d()) && proto.carcattonne_data.Coord3D.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.carcattonne_data.Coord}
 */
proto.carcattonne_data.Coord.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.carcattonne_data.Coord;
  return proto.carcattonne_data.Coord.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.carcattonne_data.Coord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.carcattonne_data.Coord}
 */
proto.carcattonne_data.Coord.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.carcattonne_data.Coord1D;
      reader.readMessage(value,proto.carcattonne_data.Coord1D.deserializeBinaryFromReader);
      msg.setCoord1d(value);
      break;
    case 2:
      var value = new proto.carcattonne_data.Coord2D;
      reader.readMessage(value,proto.carcattonne_data.Coord2D.deserializeBinaryFromReader);
      msg.setCoord2d(value);
      break;
    case 3:
      var value = new proto.carcattonne_data.Coord3D;
      reader.readMessage(value,proto.carcattonne_data.Coord3D.deserializeBinaryFromReader);
      msg.setCoord3d(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.carcattonne_data.Coord.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.carcattonne_data.Coord.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.carcattonne_data.Coord} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.carcattonne_data.Coord.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCoord1d();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.carcattonne_data.Coord1D.serializeBinaryToWriter
    );
  }
  f = message.getCoord2d();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.carcattonne_data.Coord2D.serializeBinaryToWriter
    );
  }
  f = message.getCoord3d();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.carcattonne_data.Coord3D.serializeBinaryToWriter
    );
  }
};


/**
 * optional Coord1D coord1D = 1;
 * @return {?proto.carcattonne_data.Coord1D}
 */
proto.carcattonne_data.Coord.prototype.getCoord1d = function() {
  return /** @type{?proto.carcattonne_data.Coord1D} */ (
    jspb.Message.getWrapperField(this, proto.carcattonne_data.Coord1D, 1));
};


/** @param {?proto.carcattonne_data.Coord1D|undefined} value */
proto.carcattonne_data.Coord.prototype.setCoord1d = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.carcattonne_data.Coord.oneofGroups_[0], value);
};


proto.carcattonne_data.Coord.prototype.clearCoord1d = function() {
  this.setCoord1d(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.carcattonne_data.Coord.prototype.hasCoord1d = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Coord2D coord2D = 2;
 * @return {?proto.carcattonne_data.Coord2D}
 */
proto.carcattonne_data.Coord.prototype.getCoord2d = function() {
  return /** @type{?proto.carcattonne_data.Coord2D} */ (
    jspb.Message.getWrapperField(this, proto.carcattonne_data.Coord2D, 2));
};


/** @param {?proto.carcattonne_data.Coord2D|undefined} value */
proto.carcattonne_data.Coord.prototype.setCoord2d = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.carcattonne_data.Coord.oneofGroups_[0], value);
};


proto.carcattonne_data.Coord.prototype.clearCoord2d = function() {
  this.setCoord2d(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.carcattonne_data.Coord.prototype.hasCoord2d = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Coord3D coord3D = 3;
 * @return {?proto.carcattonne_data.Coord3D}
 */
proto.carcattonne_data.Coord.prototype.getCoord3d = function() {
  return /** @type{?proto.carcattonne_data.Coord3D} */ (
    jspb.Message.getWrapperField(this, proto.carcattonne_data.Coord3D, 3));
};


/** @param {?proto.carcattonne_data.Coord3D|undefined} value */
proto.carcattonne_data.Coord.prototype.setCoord3d = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.carcattonne_data.Coord.oneofGroups_[0], value);
};


proto.carcattonne_data.Coord.prototype.clearCoord3d = function() {
  this.setCoord3d(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.carcattonne_data.Coord.prototype.hasCoord3d = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.carcattonne_data.Coord1D = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.carcattonne_data.Coord1D, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.carcattonne_data.Coord1D.displayName = 'proto.carcattonne_data.Coord1D';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.carcattonne_data.Coord1D.prototype.toObject = function(opt_includeInstance) {
  return proto.carcattonne_data.Coord1D.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.carcattonne_data.Coord1D} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.carcattonne_data.Coord1D.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.carcattonne_data.Coord1D}
 */
proto.carcattonne_data.Coord1D.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.carcattonne_data.Coord1D;
  return proto.carcattonne_data.Coord1D.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.carcattonne_data.Coord1D} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.carcattonne_data.Coord1D}
 */
proto.carcattonne_data.Coord1D.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.carcattonne_data.Coord1D.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.carcattonne_data.Coord1D.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.carcattonne_data.Coord1D} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.carcattonne_data.Coord1D.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.carcattonne_data.Coord1D.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.carcattonne_data.Coord1D.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.carcattonne_data.Coord2D = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.carcattonne_data.Coord2D, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.carcattonne_data.Coord2D.displayName = 'proto.carcattonne_data.Coord2D';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.carcattonne_data.Coord2D.prototype.toObject = function(opt_includeInstance) {
  return proto.carcattonne_data.Coord2D.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.carcattonne_data.Coord2D} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.carcattonne_data.Coord2D.toObject = function(includeInstance, msg) {
  var f, obj = {
    row: jspb.Message.getFieldWithDefault(msg, 1, 0),
    column: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.carcattonne_data.Coord2D}
 */
proto.carcattonne_data.Coord2D.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.carcattonne_data.Coord2D;
  return proto.carcattonne_data.Coord2D.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.carcattonne_data.Coord2D} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.carcattonne_data.Coord2D}
 */
proto.carcattonne_data.Coord2D.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRow(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setColumn(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.carcattonne_data.Coord2D.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.carcattonne_data.Coord2D.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.carcattonne_data.Coord2D} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.carcattonne_data.Coord2D.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRow();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getColumn();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 row = 1;
 * @return {number}
 */
proto.carcattonne_data.Coord2D.prototype.getRow = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.carcattonne_data.Coord2D.prototype.setRow = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 column = 2;
 * @return {number}
 */
proto.carcattonne_data.Coord2D.prototype.getColumn = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.carcattonne_data.Coord2D.prototype.setColumn = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.carcattonne_data.Coord3D = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.carcattonne_data.Coord3D, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.carcattonne_data.Coord3D.displayName = 'proto.carcattonne_data.Coord3D';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.carcattonne_data.Coord3D.prototype.toObject = function(opt_includeInstance) {
  return proto.carcattonne_data.Coord3D.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.carcattonne_data.Coord3D} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.carcattonne_data.Coord3D.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFieldWithDefault(msg, 1, 0),
    y: jspb.Message.getFieldWithDefault(msg, 2, 0),
    z: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.carcattonne_data.Coord3D}
 */
proto.carcattonne_data.Coord3D.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.carcattonne_data.Coord3D;
  return proto.carcattonne_data.Coord3D.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.carcattonne_data.Coord3D} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.carcattonne_data.Coord3D}
 */
proto.carcattonne_data.Coord3D.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setZ(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.carcattonne_data.Coord3D.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.carcattonne_data.Coord3D.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.carcattonne_data.Coord3D} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.carcattonne_data.Coord3D.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getZ();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 x = 1;
 * @return {number}
 */
proto.carcattonne_data.Coord3D.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.carcattonne_data.Coord3D.prototype.setX = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 y = 2;
 * @return {number}
 */
proto.carcattonne_data.Coord3D.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.carcattonne_data.Coord3D.prototype.setY = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 z = 3;
 * @return {number}
 */
proto.carcattonne_data.Coord3D.prototype.getZ = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.carcattonne_data.Coord3D.prototype.setZ = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.carcattonne_data.Node = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.carcattonne_data.Node, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.carcattonne_data.Node.displayName = 'proto.carcattonne_data.Node';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.carcattonne_data.Node.prototype.toObject = function(opt_includeInstance) {
  return proto.carcattonne_data.Node.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.carcattonne_data.Node} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.carcattonne_data.Node.toObject = function(includeInstance, msg) {
  var f, obj = {
    coord1: (f = msg.getCoord1()) && proto.carcattonne_data.Coord.toObject(includeInstance, f),
    coord2: (f = msg.getCoord2()) && proto.carcattonne_data.Coord.toObject(includeInstance, f),
    coord3: (f = msg.getCoord3()) && proto.carcattonne_data.Coord.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.carcattonne_data.Node}
 */
proto.carcattonne_data.Node.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.carcattonne_data.Node;
  return proto.carcattonne_data.Node.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.carcattonne_data.Node} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.carcattonne_data.Node}
 */
proto.carcattonne_data.Node.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.carcattonne_data.Coord;
      reader.readMessage(value,proto.carcattonne_data.Coord.deserializeBinaryFromReader);
      msg.setCoord1(value);
      break;
    case 2:
      var value = new proto.carcattonne_data.Coord;
      reader.readMessage(value,proto.carcattonne_data.Coord.deserializeBinaryFromReader);
      msg.setCoord2(value);
      break;
    case 3:
      var value = new proto.carcattonne_data.Coord;
      reader.readMessage(value,proto.carcattonne_data.Coord.deserializeBinaryFromReader);
      msg.setCoord3(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.carcattonne_data.Node.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.carcattonne_data.Node.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.carcattonne_data.Node} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.carcattonne_data.Node.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCoord1();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.carcattonne_data.Coord.serializeBinaryToWriter
    );
  }
  f = message.getCoord2();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.carcattonne_data.Coord.serializeBinaryToWriter
    );
  }
  f = message.getCoord3();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.carcattonne_data.Coord.serializeBinaryToWriter
    );
  }
};


/**
 * optional Coord coord1 = 1;
 * @return {?proto.carcattonne_data.Coord}
 */
proto.carcattonne_data.Node.prototype.getCoord1 = function() {
  return /** @type{?proto.carcattonne_data.Coord} */ (
    jspb.Message.getWrapperField(this, proto.carcattonne_data.Coord, 1));
};


/** @param {?proto.carcattonne_data.Coord|undefined} value */
proto.carcattonne_data.Node.prototype.setCoord1 = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.carcattonne_data.Node.prototype.clearCoord1 = function() {
  this.setCoord1(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.carcattonne_data.Node.prototype.hasCoord1 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Coord coord2 = 2;
 * @return {?proto.carcattonne_data.Coord}
 */
proto.carcattonne_data.Node.prototype.getCoord2 = function() {
  return /** @type{?proto.carcattonne_data.Coord} */ (
    jspb.Message.getWrapperField(this, proto.carcattonne_data.Coord, 2));
};


/** @param {?proto.carcattonne_data.Coord|undefined} value */
proto.carcattonne_data.Node.prototype.setCoord2 = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.carcattonne_data.Node.prototype.clearCoord2 = function() {
  this.setCoord2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.carcattonne_data.Node.prototype.hasCoord2 = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Coord coord3 = 3;
 * @return {?proto.carcattonne_data.Coord}
 */
proto.carcattonne_data.Node.prototype.getCoord3 = function() {
  return /** @type{?proto.carcattonne_data.Coord} */ (
    jspb.Message.getWrapperField(this, proto.carcattonne_data.Coord, 3));
};


/** @param {?proto.carcattonne_data.Coord|undefined} value */
proto.carcattonne_data.Node.prototype.setCoord3 = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.carcattonne_data.Node.prototype.clearCoord3 = function() {
  this.setCoord3(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.carcattonne_data.Node.prototype.hasCoord3 = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.carcattonne_data.Edge = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.carcattonne_data.Edge, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.carcattonne_data.Edge.displayName = 'proto.carcattonne_data.Edge';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.carcattonne_data.Edge.prototype.toObject = function(opt_includeInstance) {
  return proto.carcattonne_data.Edge.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.carcattonne_data.Edge} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.carcattonne_data.Edge.toObject = function(includeInstance, msg) {
  var f, obj = {
    coord1: (f = msg.getCoord1()) && proto.carcattonne_data.Coord.toObject(includeInstance, f),
    coord2: (f = msg.getCoord2()) && proto.carcattonne_data.Coord.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.carcattonne_data.Edge}
 */
proto.carcattonne_data.Edge.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.carcattonne_data.Edge;
  return proto.carcattonne_data.Edge.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.carcattonne_data.Edge} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.carcattonne_data.Edge}
 */
proto.carcattonne_data.Edge.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.carcattonne_data.Coord;
      reader.readMessage(value,proto.carcattonne_data.Coord.deserializeBinaryFromReader);
      msg.setCoord1(value);
      break;
    case 2:
      var value = new proto.carcattonne_data.Coord;
      reader.readMessage(value,proto.carcattonne_data.Coord.deserializeBinaryFromReader);
      msg.setCoord2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.carcattonne_data.Edge.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.carcattonne_data.Edge.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.carcattonne_data.Edge} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.carcattonne_data.Edge.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCoord1();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.carcattonne_data.Coord.serializeBinaryToWriter
    );
  }
  f = message.getCoord2();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.carcattonne_data.Coord.serializeBinaryToWriter
    );
  }
};


/**
 * optional Coord coord1 = 1;
 * @return {?proto.carcattonne_data.Coord}
 */
proto.carcattonne_data.Edge.prototype.getCoord1 = function() {
  return /** @type{?proto.carcattonne_data.Coord} */ (
    jspb.Message.getWrapperField(this, proto.carcattonne_data.Coord, 1));
};


/** @param {?proto.carcattonne_data.Coord|undefined} value */
proto.carcattonne_data.Edge.prototype.setCoord1 = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.carcattonne_data.Edge.prototype.clearCoord1 = function() {
  this.setCoord1(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.carcattonne_data.Edge.prototype.hasCoord1 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Coord coord2 = 2;
 * @return {?proto.carcattonne_data.Coord}
 */
proto.carcattonne_data.Edge.prototype.getCoord2 = function() {
  return /** @type{?proto.carcattonne_data.Coord} */ (
    jspb.Message.getWrapperField(this, proto.carcattonne_data.Coord, 2));
};


/** @param {?proto.carcattonne_data.Coord|undefined} value */
proto.carcattonne_data.Edge.prototype.setCoord2 = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.carcattonne_data.Edge.prototype.clearCoord2 = function() {
  this.setCoord2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.carcattonne_data.Edge.prototype.hasCoord2 = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.carcattonne_data.Hex = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.carcattonne_data.Hex, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.carcattonne_data.Hex.displayName = 'proto.carcattonne_data.Hex';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.carcattonne_data.Hex.prototype.toObject = function(opt_includeInstance) {
  return proto.carcattonne_data.Hex.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.carcattonne_data.Hex} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.carcattonne_data.Hex.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    coord: (f = msg.getCoord()) && proto.carcattonne_data.Coord.toObject(includeInstance, f),
    chit: jspb.Message.getFieldWithDefault(msg, 3, 0),
    port: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.carcattonne_data.Hex}
 */
proto.carcattonne_data.Hex.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.carcattonne_data.Hex;
  return proto.carcattonne_data.Hex.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.carcattonne_data.Hex} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.carcattonne_data.Hex}
 */
proto.carcattonne_data.Hex.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.carcattonne_data.HexType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.carcattonne_data.Coord;
      reader.readMessage(value,proto.carcattonne_data.Coord.deserializeBinaryFromReader);
      msg.setCoord(value);
      break;
    case 3:
      var value = /** @type {!proto.carcattonne_data.ChitType} */ (reader.readEnum());
      msg.setChit(value);
      break;
    case 4:
      var value = /** @type {!proto.carcattonne_data.PortType} */ (reader.readEnum());
      msg.setPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.carcattonne_data.Hex.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.carcattonne_data.Hex.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.carcattonne_data.Hex} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.carcattonne_data.Hex.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCoord();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.carcattonne_data.Coord.serializeBinaryToWriter
    );
  }
  f = message.getChit();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getPort();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional HexType Type = 1;
 * @return {!proto.carcattonne_data.HexType}
 */
proto.carcattonne_data.Hex.prototype.getType = function() {
  return /** @type {!proto.carcattonne_data.HexType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.carcattonne_data.HexType} value */
proto.carcattonne_data.Hex.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Coord coord = 2;
 * @return {?proto.carcattonne_data.Coord}
 */
proto.carcattonne_data.Hex.prototype.getCoord = function() {
  return /** @type{?proto.carcattonne_data.Coord} */ (
    jspb.Message.getWrapperField(this, proto.carcattonne_data.Coord, 2));
};


/** @param {?proto.carcattonne_data.Coord|undefined} value */
proto.carcattonne_data.Hex.prototype.setCoord = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.carcattonne_data.Hex.prototype.clearCoord = function() {
  this.setCoord(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.carcattonne_data.Hex.prototype.hasCoord = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ChitType chit = 3;
 * @return {!proto.carcattonne_data.ChitType}
 */
proto.carcattonne_data.Hex.prototype.getChit = function() {
  return /** @type {!proto.carcattonne_data.ChitType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.carcattonne_data.ChitType} value */
proto.carcattonne_data.Hex.prototype.setChit = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional PortType port = 4;
 * @return {!proto.carcattonne_data.PortType}
 */
proto.carcattonne_data.Hex.prototype.getPort = function() {
  return /** @type {!proto.carcattonne_data.PortType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.carcattonne_data.PortType} value */
proto.carcattonne_data.Hex.prototype.setPort = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * @enum {number}
 */
proto.carcattonne_data.HexType = {
  NONEHEX: 0,
  RIVER: 1,
  MOUNTAIN: 2,
  PASTURE: 3,
  WHEATFIELD: 4,
  FOREST: 5,
  SEA: 6,
  DESERT: 7,
  HEXFROMBAG: 8
};

/**
 * @enum {number}
 */
proto.carcattonne_data.ChitType = {
  CHITNONE: 0,
  CHIT2: 1,
  CHIT3: 2,
  CHIT4: 3,
  CHIT5: 4,
  CHIT6: 5,
  CHIT8: 6,
  CHIT9: 7,
  CHIT10: 8,
  CHIT11: 9,
  CHIT12: 10,
  CHITFROMBAG: 11
};

/**
 * @enum {number}
 */
proto.carcattonne_data.PortType = {
  CLAY2TO1: 0,
  ORE2TO1: 1,
  SHEEP2TO1: 2,
  WHEAT2TO1: 3,
  TIMBER2TO1: 4,
  ANY3TO1: 5,
  ANY4TO1: 6,
  FROMBAG: 7
};

/**
 * @enum {number}
 */
proto.carcattonne_data.ResourceType = {
  TIMBER: 0,
  WHEAT: 1,
  ORE: 2,
  SHEEP: 3,
  BRICK: 4,
  GOLD: 5,
  UNKNOWN: 6
};

goog.object.extend(exports, proto.carcattonne_data);
